!function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/dist/",i(i.s=35)}([function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.mount_collision_polygon=e.hsv2rgb=e.rgb2hsv=e.change_brightness=e.capitalize=e.get_directions=e.get_surroundings=e.kill_all_sprites=e.get_text_width=e.get_transition_directions=e.get_opposite_direction=e.transitions=e.is_close=e.is_inside_sector=e.range_360=e.variation=e.join_directions=e.split_direction=e.map_directions=e.directions_angles=e.base_actions=e.reverse_directions=e.directions_count=e.directions=e.element_names=e.ordered_elements=e.elements=void 0;const s=i(1),n=i(3);var a;function _(t){return t=(t%=s.degree360)<0?t+s.degree360:t}function o(t,e,i,n,a,o,r){const h=e*i*(e*i),c=Math.pow(o-n,2)+Math.pow(r-a,2),l=_(Math.atan2(a-r,o-n)),d=[0,s.degree90,Math.PI,s.degree270,s.degree360];let u=!1;for(let e=0;e<t.length;++e){let i=t[e],s=d[i-1];if(u=d[i]>=l&&l>=s,u)break}return c<=h&&u}function r(t,e,i){let s=Math.max(t,e,i),n=s-Math.min(t,e,i),a=n&&(s===t?(e-i)/n:s===e?2+(i-t)/n:4+(t-e)/n);return[60*(a<0?a+6:a),s&&n/s,s]}function h(t,e,i){let s=(s,n=(s+t/60)%6)=>i-i*e*Math.max(Math.min(n,4-n,1),0);return[s(5),s(3),s(1)]}!function(t){t.VENUS="venus",t.MERCURY="mercury",t.MARS="mars",t.JUPITER="jupiter",t.NO_ELEMENT="no_element"}(a=e.elements||(e.elements={})),e.ordered_elements=[a.VENUS,a.MERCURY,a.MARS,a.JUPITER],e.element_names={[a.VENUS]:"Earth",[a.MERCURY]:"Water",[a.MARS]:"Fire",[a.JUPITER]:"Wind"},e.directions={right:0,down_right:1,down:2,down_left:3,left:4,up_left:5,up:6,up_right:7},e.directions_count=Object.keys(e.directions).length,e.reverse_directions={[e.directions.right]:"right",[e.directions.up_right]:"up_right",[e.directions.up]:"up",[e.directions.up_left]:"up_left",[e.directions.left]:"left",[e.directions.down_left]:"down_left",[e.directions.down]:"down",[e.directions.down_right]:"down_right"},function(t){t.IDLE="idle",t.WALK="walk",t.DASH="dash",t.PUSH="push",t.CLIMB="climb",t.CAST="cast",t.JUMP="jump",t.BATTLE="battle"}(e.base_actions||(e.base_actions={})),e.directions_angles=function(t){return t*Math.PI/4},e.map_directions=function(t){return void 0===t||"all"===t?t:(t=Array.isArray(t)?t:[t]).map(t=>e.directions[t])},e.split_direction=function(t){if(t%2==0)return[t];let i=new Array(2);return i[0]=t===e.directions.right?t.up_right:t-1,i[1]=t===e.directions.up_right?e.directions.right:t+1,i},e.join_directions=function(t,i){return i=t===e.directions.up&&i===e.directions.right?e.directions_count:i,Math.min(t,i)+1},e.variation=function(){return n.random(0,4)},e.range_360=_,e.is_inside_sector=o,e.is_close=function(t,i,n,a,_,r){switch(t){case e.directions.up:return o([1,2],s.HERO_BODY_RADIUS,r,i,n,a,_);case e.directions.up_right:return o([1],s.HERO_BODY_RADIUS,r,i,n,a,_);case e.directions.right:return o([1,4],s.HERO_BODY_RADIUS,r,i,n,a,_);case e.directions.down_right:return o([4],s.HERO_BODY_RADIUS,r,i,n,a,_);case e.directions.down:return o([3,4],s.HERO_BODY_RADIUS,r,i,n,a,_);case e.directions.down_left:return o([3],s.HERO_BODY_RADIUS,r,i,n,a,_);case e.directions.left:return o([2,3],s.HERO_BODY_RADIUS,r,i,n,a,_);case e.directions.up_left:return o([2],s.HERO_BODY_RADIUS,r,i,n,a,_)}},e.transitions={[e.directions.up]:{[e.directions.up]:e.directions.up,[e.directions.down]:e.directions.down_left,[e.directions.left]:e.directions.up_left,[e.directions.right]:e.directions.up_right,[e.directions.down_left]:e.directions.left,[e.directions.down_right]:e.directions.right,[e.directions.up_left]:e.directions.up,[e.directions.up_right]:e.directions.up},[e.directions.down]:{[e.directions.up]:e.directions.up_left,[e.directions.down]:e.directions.down,[e.directions.left]:e.directions.down_left,[e.directions.right]:e.directions.down_right,[e.directions.down_left]:e.directions.down,[e.directions.down_right]:e.directions.down,[e.directions.up_left]:e.directions.left,[e.directions.up_right]:e.directions.right},[e.directions.left]:{[e.directions.up]:e.directions.up_left,[e.directions.down]:e.directions.down_left,[e.directions.left]:e.directions.left,[e.directions.right]:e.directions.up_right,[e.directions.down_left]:e.directions.left,[e.directions.down_right]:e.directions.down,[e.directions.up_left]:e.directions.left,[e.directions.up_right]:e.directions.up},[e.directions.right]:{[e.directions.up]:e.directions.up_right,[e.directions.down]:e.directions.down_right,[e.directions.left]:e.directions.down_left,[e.directions.right]:e.directions.right,[e.directions.down_left]:e.directions.down,[e.directions.down_right]:e.directions.right,[e.directions.up_left]:e.directions.up,[e.directions.up_right]:e.directions.right},[e.directions.down_left]:{[e.directions.up]:e.directions.up_left,[e.directions.down]:e.directions.down_left,[e.directions.left]:e.directions.down_left,[e.directions.right]:e.directions.down_right,[e.directions.down_left]:e.directions.down_left,[e.directions.down_right]:e.directions.down,[e.directions.up_left]:e.directions.left,[e.directions.up_right]:e.directions.up},[e.directions.down_right]:{[e.directions.up]:e.directions.up_right,[e.directions.down]:e.directions.down_right,[e.directions.left]:e.directions.down_left,[e.directions.right]:e.directions.down_right,[e.directions.down_left]:e.directions.down,[e.directions.down_right]:e.directions.down_right,[e.directions.up_left]:e.directions.left,[e.directions.up_right]:e.directions.right},[e.directions.up_left]:{[e.directions.up]:e.directions.up_left,[e.directions.down]:e.directions.down_left,[e.directions.left]:e.directions.up_left,[e.directions.right]:e.directions.up_right,[e.directions.down_left]:e.directions.left,[e.directions.down_right]:e.directions.right,[e.directions.up_left]:e.directions.up_left,[e.directions.up_right]:e.directions.up},[e.directions.up_right]:{[e.directions.up]:e.directions.up_right,[e.directions.down]:e.directions.down_right,[e.directions.left]:e.directions.up_left,[e.directions.right]:e.directions.up_right,[e.directions.down_left]:e.directions.left,[e.directions.down_right]:e.directions.right,[e.directions.up_left]:e.directions.up,[e.directions.up_right]:e.directions.up_right}},e.get_opposite_direction=function(t){switch(t){case e.directions.up:return e.directions.down;case e.directions.down:return e.directions.up;case e.directions.left:return e.directions.right;case e.directions.right:return e.directions.left}},e.get_transition_directions=function(t,i){return e.transitions[i][t]},e.get_text_width=function(t,e,i=!1){const n=i?"gs-italic-bmp-font":"gs-bmp-font";let a=t.add.bitmapText(0,0,n,e,s.FONT_SIZE);const _=a.width;return a.destroy(),_},e.kill_all_sprites=function(t,e=!1){t.children.forEach(t=>{e?t.parent.remove(t,!0):t.kill()})},e.get_surroundings=function(t,i,s=!1,n=1){let a=[{x:t-n,y:i,diag:!1,direction:e.directions.left},{x:t+n,y:i,diag:!1,direction:e.directions.right},{x:t,y:i-n,diag:!1,direction:e.directions.up},{x:t,y:i+n,diag:!1,direction:e.directions.down}];return s&&(a=a.concat([{x:t-n,y:i-n,diag:!0,direction:e.directions.up_left},{x:t+n,y:i-n,diag:!0,direction:e.directions.up_right},{x:t-n,y:i+n,diag:!0,direction:e.directions.down_left},{x:t+n,y:i+n,diag:!0,direction:e.directions.down_right}])),a},e.get_directions=function(t=!1){let i=[e.directions.up,e.directions.down,e.directions.left,e.directions.right];return t&&i.push(e.directions.up_left,e.directions.up_right,e.directions.down_left,e.directions.down_right),i},e.capitalize=function(t,e=!1){return(e?t.toLowerCase():t).replace(/(?:^|\s|["'([{])+\S/g,t=>t.toUpperCase())},e.change_brightness=function(t,e){t=3==(t="string"==typeof t?t.replace(/^\s*#|\s*$/g,""):t.toString(16)).length?t.replace(/(.)/g,"$1$1"):("000000"+t).slice(-6);let i,s,n,a=parseInt(t.substr(0,2),16),_=parseInt(t.substr(2,2),16),o=parseInt(t.substr(4,2),16);return[i,s,n]=r(a,_,o),n=n*e|0,[a,_,o]=h(i,s,n),t=((1<<24)+(a<<16)+(_<<8)+o).toString(16).slice(1),parseInt(t,16)},e.rgb2hsv=r,e.hsv2rgb=h,e.mount_collision_polygon=function(t,e,i){return void 0===i&&(i=0),[[i+e,e],...0===i?[]:[[t-i+e,e]],[t+e,i+e],...0===i?[]:[[t+e,t-i+e]],[t-i+e,t+e],...0===i?[]:[[i+e,t+e]],[e,t-i+e],...0===i?[]:[[e,i+e]]]}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.WORLD_MAP_SPRITE_SCALE_X=e.WORLD_MAP_SPRITE_SCALE_Y=e.WORLD_MAP_SPEED_WALK_REDUCE=e.WORLD_MAP_SPEED_DASH_REDUCE=e.AVATAR_SIZE=e.ELEM_ATTR_MAX=e.ELEM_ATTR_MIN=e.CAMERA_LERP=e.degree540=e.degree360=e.degree270=e.degree180=e.degree90=e.degree60=e.degree30=e.degree15=e.ICON_HEIGHT=e.ICON_WIDTH=e.PUSH_TIME=e.MAX_DIAG_WIN_HEIGHT=e.MAX_LINES_PER_DIAG_WIN=e.MAX_DIAG_WIN_WIDTH=e.SPACE_BETWEEN_LINES=e.WINDOW_PADDING_BOTTOM=e.WINDOW_PADDING_TOP=e.WINDOW_PADDING_H=e.OUTSIDE_BORDER_WIDTH=e.INSIDE_BORDER_WIDTH=e.FONT_SIZE=e.PURPLE_FONT_COLOR=e.BLUE_FONT_COLOR=e.RED_FONT_COLOR=e.YELLOW_FONT_COLOR=e.INACTIVE_FONT_COLOR=e.DEFAULT_FONT_COLOR=e.DEFAULT_WINDOW_COLOR=e.MAP_DAMPING=e.DELTA_TIME_FACTOR=e.INV_SQRT2=e.HERO_BODY_RADIUS_M7=e.HERO_BODY_RADIUS=e.GAME_HEIGHT=e.GAME_WIDTH=void 0,e.GAME_WIDTH=240,e.GAME_HEIGHT=160,e.HERO_BODY_RADIUS=7,e.HERO_BODY_RADIUS_M7=6.5,e.INV_SQRT2=1/Math.sqrt(2),e.DELTA_TIME_FACTOR=50/3,e.MAP_DAMPING=1,e.DEFAULT_WINDOW_COLOR=24704,e.DEFAULT_FONT_COLOR=16316664,e.INACTIVE_FONT_COLOR=560573,e.YELLOW_FONT_COLOR=16316480,e.RED_FONT_COLOR=16252928,e.BLUE_FONT_COLOR=248,e.PURPLE_FONT_COLOR=14708912,e.FONT_SIZE=8,e.INSIDE_BORDER_WIDTH=3,e.OUTSIDE_BORDER_WIDTH=1,e.WINDOW_PADDING_H=4,e.WINDOW_PADDING_TOP=8,e.WINDOW_PADDING_BOTTOM=4,e.SPACE_BETWEEN_LINES=8,e.MAX_DIAG_WIN_WIDTH=180,e.MAX_LINES_PER_DIAG_WIN=3,e.MAX_DIAG_WIN_HEIGHT=e.FONT_SIZE*e.MAX_LINES_PER_DIAG_WIN+e.SPACE_BETWEEN_LINES*(e.MAX_LINES_PER_DIAG_WIN-1)+e.WINDOW_PADDING_TOP+e.WINDOW_PADDING_BOTTOM,e.PUSH_TIME=950,e.ICON_WIDTH=14,e.ICON_HEIGHT=14,e.degree15=15*Math.PI/180,e.degree30=30*Math.PI/180,e.degree60=60*Math.PI/180,e.degree90=Math.PI/2,e.degree180=Math.PI,e.degree270=3*Math.PI/2,e.degree360=2*Math.PI,e.degree540=3*Math.PI,e.CAMERA_LERP=.15,e.ELEM_ATTR_MIN=-200,e.ELEM_ATTR_MAX=200,e.AVATAR_SIZE=32,e.WORLD_MAP_SPEED_DASH_REDUCE=-45,e.WORLD_MAP_SPEED_WALK_REDUCE=-40,e.WORLD_MAP_SPRITE_SCALE_Y=.84,e.WORLD_MAP_SPRITE_SCALE_X=.84},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Window=void 0;const s=i(1),n=i(11),a=i(0);class _{constructor(t,e,i,a,_,o=!0,r=s.DEFAULT_WINDOW_COLOR,h=s.DEFAULT_FONT_COLOR){this.game=t,this.group=t.add.group(),this.x=e,this.y=i,this.width=a,this.height=_,this.color=r,this.font_color=h,this.extra_sprites=[],this.internal_groups={},this.graphics=this.game.add.graphics(0,0),this.separators_graphics=this.game.add.graphics(0,0),this.draw_background(),this.draw_borders(),this.group.add(this.graphics),this.group.add(this.separators_graphics),this.group.alpha=0,this.group.width=0,this.group.height=0,this.need_pos_update=o,this.open=!1,this.lines_sprites=[],this.page_indicator=new n.PageIndicator(this.game,this)}get real_x(){return this.group.x}get real_y(){return this.group.y}make_item_obj(t,e,i){const s={icon:null,background:null,equipped:null,broken:null,quantity:null},n=e?e.x:0,a=e?e.y:0;return i?(i.bg&&(s.background=this.create_at_group(n,a,"item_border",void 0,void 0,i.internal_group)),s.icon=this.create_at_group(n,a,"items_icons",void 0,t,i.internal_group),i.broken&&(s.broken=this.create_at_group(n,a,"broken",void 0,void 0,i.internal_group)),i.equipped&&(s.equipped=this.create_at_group(n+_.ITEM_OBJ.EQUIPPED_X,a+_.ITEM_OBJ.EQUIPPED_Y,"equipped",void 0,void 0,i.internal_group)),i.quantity&&(s.quantity=this.game.add.bitmapText(n+_.ITEM_OBJ.QUANTITY_END_X,a+_.ITEM_OBJ.QUANTITY_Y,"gs-item-bmp-font",i.quantity.toString()),s.quantity.x-=s.quantity.width,i.internal_group?this.add_to_internal_group(i.internal_group,s.quantity):this.group.add(s.quantity))):s.icon=this.create_at_group(n,a,"items_icons",void 0,t),s}move_item_obj(t,e){for(let i in t)t[i]&&(t[i].x=e.x,t[i].y=e.y,"equipped"===i?(t[i].x+=_.ITEM_OBJ.EQUIPPED_X,t[i].y+=_.ITEM_OBJ.EQUIPPED_Y):"quantity"===i&&(t[i].x+=_.ITEM_OBJ.QUANTITY_END_X-t[i].width,t[i].y+=_.ITEM_OBJ.QUANTITY_Y))}clear_separators(){this.separators_graphics.clear()}draw_separator(t,e,i,s,n=!0){const _=a.change_brightness(this.color,1.3),o=a.change_brightness(this.color,.8),r=[a.change_brightness(this.color,.9),o,_];for(let a=0;a<r.length;++a){const _=r[a],o=a-1;this.separators_graphics.lineStyle(1,_),this.separators_graphics.moveTo(t+o*+n,e+o*+!n),this.separators_graphics.lineTo(i+o*+n,s+o*+!n)}}draw_background(){this.graphics.beginFill(this.color,1),this.graphics.drawRect(2,2,this.width,this.height),this.graphics.endFill()}draw_borders(){this.graphics.lineStyle(1,5395026),this.graphics.moveTo(0,1),this.graphics.lineTo(0,this.height+1),this.graphics.lineStyle(1,16777215),this.graphics.moveTo(1,1),this.graphics.lineTo(1,this.height+1),this.graphics.lineStyle(1,10855845),this.graphics.moveTo(2,1),this.graphics.lineTo(2,this.height),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(3,3),this.graphics.lineTo(3,this.height-1),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(this.width,2),this.graphics.lineTo(this.width,this.height),this.graphics.lineStyle(1,10855845),this.graphics.moveTo(this.width+2,1),this.graphics.lineTo(this.width+2,this.height+1),this.graphics.lineStyle(1,16777215),this.graphics.moveTo(this.width+1,1),this.graphics.lineTo(this.width+1,this.height),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(this.width+3,1),this.graphics.lineTo(this.width+3,this.height+1),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(2,0),this.graphics.lineTo(this.width+2,0),this.graphics.lineStyle(1,16777215),this.graphics.moveTo(2,1),this.graphics.lineTo(this.width+2,1),this.graphics.lineStyle(1,10855845),this.graphics.moveTo(3,2),this.graphics.lineTo(this.width+1,2),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(3,3),this.graphics.lineTo(this.width,3),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(3,this.height),this.graphics.lineTo(this.width,this.height),this.graphics.lineStyle(1,16777215),this.graphics.moveTo(2,this.height+1),this.graphics.lineTo(this.width+2,this.height+1),this.graphics.lineStyle(1,10855845),this.graphics.moveTo(2,this.height+2),this.graphics.lineTo(this.width+2,this.height+2),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(2,this.height+3),this.graphics.lineTo(this.width+2,this.height+3),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(1,1),this.graphics.lineTo(2,2),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(1,this.height+2),this.graphics.lineTo(2,this.height+3),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(this.width+2,this.height+2),this.graphics.lineTo(this.width+3,this.height+3),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(this.width+2,1),this.graphics.lineTo(this.width+3,2),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(4,4),this.graphics.lineTo(5,5),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(3,3),this.graphics.lineTo(4,4),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(this.width-1,this.height-1),this.graphics.lineTo(this.width,this.height),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(this.width-1,4),this.graphics.lineTo(this.width,5),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(4,this.height-1),this.graphics.lineTo(5,this.height)}update_size(t){void 0!==t.width&&(this.width=t.width),void 0!==t.height&&(this.height=t.height),this.graphics.clear(),this.draw_background(),this.draw_borders()}update_position(t,e=!0){void 0!==t.x&&(this.x=t.x),void 0!==t.y&&(this.y=t.y),this.group.x=(e?this.game.camera.x:0)+this.x,this.group.y=(e?this.game.camera.y:0)+this.y}define_internal_group(t,e={}){let i=this.game.add.group();return this.destroy_internal_group(t),this.internal_groups[t]=i,void 0!==e.x&&(i.x=e.x),void 0!==e.y&&(i.y=e.y),this.group.add(i),i}get_internal_group(t){return this.internal_groups[t]}add_to_internal_group(t,e){return t in this.internal_groups&&(this.internal_groups[t].add(e),!0)}destroy_internal_group(t){t in this.internal_groups&&this.internal_groups[t]&&this.internal_groups[t].destroy()}show(t,e=!0,i){this.group.alpha=1,this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y,this.close_callback=i,e?this.game.add.tween(this.group).to({width:this.graphics.width,height:this.graphics.height},_.TRANSITION_TIME,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.open=!0,void 0!==t&&t()}):(this.open=!0,this.group.width=this.graphics.width,this.group.height=this.graphics.height,void 0!==t&&t())}update(t=!1){(this.need_pos_update||t)&&(this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y)}add_sprite_to_group(t,e){let i=this.group;if(void 0!==e){const t=this.get_internal_group(e);t&&(i=t)}i.add(t),this.extra_sprites.push(t)}create_at_group(t,e,i,s,n,a){let _=this.group;if(void 0!==a){const t=this.get_internal_group(a);t&&(_=t)}let o=_.create(t,e,i,n);return void 0!==s&&(o.tint=s),this.extra_sprites.push(o),o}send_to_front(){this.group.parent.bringToTop(this.group)}remove_from_group(t,e=!0){if(void 0!==t)this.group.remove(t,e);else for(let t=0;t<this.extra_sprites.length;++t)this.group.remove(this.extra_sprites[t],e)}remove_smooth(t){t.smoothed=!1,t.autoRound=!0}set_text(t,e,i,n,a=!1,_=!1){for(let t=0;t<this.lines_sprites.length;++t)this.lines_sprites[t].text.destroy(),this.lines_sprites[t].shadow.destroy();this.lines_sprites=[];const o=a?-2:0,r=void 0===e?s.WINDOW_PADDING_H+4:e;let h=void 0===i?s.WINDOW_PADDING_TOP+o:i;const c=a?"gs-italic-bmp-font":"gs-bmp-font";let l,d,u=[];_&&(l=new Promise(t=>d=t));for(let e=0;e<t.length;++e){let i=t[e],a=this.game.add.bitmapText(r,h,c,_?"":i,s.FONT_SIZE),o=this.game.add.bitmapText(r+1,h+1,c,_?"":i,s.FONT_SIZE);if(h+=s.FONT_SIZE+(void 0===n?s.SPACE_BETWEEN_LINES:n),this.remove_smooth(a),a.tint=this.font_color,this.remove_smooth(o),o.tint=0,_){const t=i.split(" ");let e,s=0;const n=()=>{this.game.time.events.repeat(25,t.length,()=>{a.text+=t[s]+" ",o.text+=t[s]+" ",++s,s===t.length&&e()})};u.length?u.pop().then(n):n(),u.push(new Promise(t=>e=t))}this.group.add(o),this.group.add(a),this.lines_sprites.push({text:a,shadow:o})}return Promise.all(u).then(d),l}set_single_line_text(t,e=!1,i=!1){const n=i?s.WINDOW_PADDING_H+2:s.WINDOW_PADDING_H+4;let a=i?s.WINDOW_PADDING_TOP-2:s.WINDOW_PADDING_TOP;const _=i?"gs-italic-bmp-font":"gs-bmp-font";let o=this.game.add.bitmapText(n,a,_,t,s.FONT_SIZE),r=this.game.add.bitmapText(n+1,a+1,_,t,s.FONT_SIZE);return e&&(o.x-=o.width,r.x-=r.width),this.remove_smooth(o),o.tint=this.font_color,this.remove_smooth(r),r.tint=0,this.group.add(r),this.group.add(o),{text:o,shadow:r,right_align:e,initial_x:n}}set_text_in_position(t,e,i,n=!1,a=!1,_=this.font_color,o=!1,r,h=!1){const c=h?"gs-italic-bmp-font":"gs-bmp-font";let l,d=this.game.add.bitmapText(e,i,c,t,s.FONT_SIZE),u=this.game.add.bitmapText(e+1,i+1,c,t,s.FONT_SIZE);a&&(d.centerX=e,d.centerY=i,u.centerX=e+1,u.centerY=i+1),n&&(d.x-=d.width,u.x-=u.width),o&&(l=this.game.add.graphics(d.x-1,d.y),l.beginFill(this.color,1),l.drawRect(0,0,d.width+3,s.FONT_SIZE),l.endFill(),void 0!==r&&this.add_to_internal_group(r,l)||this.group.add(l)),this.remove_smooth(d),d.tint=_,this.remove_smooth(u),u.tint=0;let p=!1;return void 0!==r&&(p=this.add_to_internal_group(r,u)&&this.add_to_internal_group(r,d)),p||(this.group.add(u),this.group.add(d)),{text:d,shadow:u,right_align:n,initial_x:e,text_bg:l}}update_text(t,e,i,s){e.text.setText(t),e.shadow.setText(t),this.update_text_position({x:i,y:s},e)}update_text_position(t,e){void 0!==t.x&&(e.text.x=t.x,e.shadow.x=t.x+1,e.initial_x=t.x,e.text_bg&&(e.text_bg.x=e.text.x-1)),void 0!==t.y&&(e.text.y=t.y,e.shadow.y=t.y+1,e.text_bg&&(e.text_bg.y=e.text.y)),e.right_align&&(e.text.x=e.initial_x-e.text.width,e.shadow.x=e.initial_x-e.shadow.width+1,e.text_bg&&(e.text_bg.x=e.text.x-1))}update_text_color(t,e){e.text.tint=t}remove_text(t){t.text.destroy(),t.shadow.destroy(),t.text_bg&&t.text_bg.destroy()}close(t,e=!0){e?this.game.add.tween(this.group).to({width:0,height:0},_.TRANSITION_TIME,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.group.alpha=0,this.open=!1,this.page_indicator.is_set&&this.page_indicator.terminante(),void 0!==t&&t(),void 0!==this.close_callback&&this.close_callback()}):(this.group.alpha=0,this.open=!1,this.page_indicator.is_set&&this.page_indicator.terminante(),this.group.width=0,this.group.height=0,void 0!==t&&t(),void 0!==this.close_callback&&this.close_callback())}destroy(t,e){let i=()=>{this.page_indicator.is_set&&this.page_indicator.terminante(),this.group.destroy(),this.internal_groups={},void 0!==e&&e()};t?this.game.add.tween(this.group).to({width:0,height:0},_.TRANSITION_TIME,Phaser.Easing.Linear.None,!0).onComplete.addOnce(i):i()}}e.Window=_,_.TRANSITION_TIME=Phaser.Timer.QUARTER>>2,_.ITEM_OBJ={EQUIPPED_X:7,EQUIPPED_Y:8,QUANTITY_END_X:15,QUANTITY_Y:8}},function(t,e,i){(function(t,s){var n;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var a="Expected a function",_="__lodash_placeholder__",o=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],r="[object Arguments]",h="[object Array]",c="[object Boolean]",l="[object Date]",d="[object Error]",u="[object Function]",p="[object GeneratorFunction]",m="[object Map]",g="[object Number]",y="[object Object]",w="[object RegExp]",f="[object Set]",b="[object String]",v="[object Symbol]",E="[object WeakMap]",x="[object ArrayBuffer]",T="[object DataView]",A="[object Float32Array]",S="[object Float64Array]",I="[object Int8Array]",k="[object Int16Array]",N="[object Int32Array]",R="[object Uint8Array]",P="[object Uint16Array]",O="[object Uint32Array]",j=/\b__p \+= '';/g,M=/\b(__p \+=) '' \+/g,L=/(__e\(.*?\)|\b__t\)) \+\n'';/g,D=/&(?:amp|lt|gt|quot|#39);/g,C=/[&<>"']/g,H=RegExp(D.source),Y=RegExp(C.source),U=/<%-([\s\S]+?)%>/g,G=/<%([\s\S]+?)%>/g,W=/<%=([\s\S]+?)%>/g,q=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,F=/^\w*$/,X=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,B=/[\\^$.*+?()[\]{}|]/g,z=RegExp(B.source),K=/^\s+|\s+$/g,V=/^\s+/,J=/\s+$/,$=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Q=/\{\n\/\* \[wrapped with (.+)\] \*/,Z=/,? & /,tt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,et=/\\(\\)?/g,it=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,st=/\w*$/,nt=/^[-+]0x[0-9a-f]+$/i,at=/^0b[01]+$/i,_t=/^\[object .+?Constructor\]$/,ot=/^0o[0-7]+$/i,rt=/^(?:0|[1-9]\d*)$/,ht=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,ct=/($^)/,lt=/['\n\r\u2028\u2029\\]/g,dt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",ut="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",pt="[\\ud800-\\udfff]",mt="["+ut+"]",gt="["+dt+"]",yt="\\d+",wt="[\\u2700-\\u27bf]",ft="[a-z\\xdf-\\xf6\\xf8-\\xff]",bt="[^\\ud800-\\udfff"+ut+yt+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",vt="\\ud83c[\\udffb-\\udfff]",Et="[^\\ud800-\\udfff]",xt="(?:\\ud83c[\\udde6-\\uddff]){2}",Tt="[\\ud800-\\udbff][\\udc00-\\udfff]",At="[A-Z\\xc0-\\xd6\\xd8-\\xde]",St="(?:"+ft+"|"+bt+")",It="(?:"+At+"|"+bt+")",kt="(?:"+gt+"|"+vt+")"+"?",Nt="[\\ufe0e\\ufe0f]?"+kt+("(?:\\u200d(?:"+[Et,xt,Tt].join("|")+")[\\ufe0e\\ufe0f]?"+kt+")*"),Rt="(?:"+[wt,xt,Tt].join("|")+")"+Nt,Pt="(?:"+[Et+gt+"?",gt,xt,Tt,pt].join("|")+")",Ot=RegExp("['’]","g"),jt=RegExp(gt,"g"),Mt=RegExp(vt+"(?="+vt+")|"+Pt+Nt,"g"),Lt=RegExp([At+"?"+ft+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[mt,At,"$"].join("|")+")",It+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[mt,At+St,"$"].join("|")+")",At+"?"+St+"+(?:['’](?:d|ll|m|re|s|t|ve))?",At+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",yt,Rt].join("|"),"g"),Dt=RegExp("[\\u200d\\ud800-\\udfff"+dt+"\\ufe0e\\ufe0f]"),Ct=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Ht=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Yt=-1,Ut={};Ut[A]=Ut[S]=Ut[I]=Ut[k]=Ut[N]=Ut[R]=Ut["[object Uint8ClampedArray]"]=Ut[P]=Ut[O]=!0,Ut[r]=Ut[h]=Ut[x]=Ut[c]=Ut[T]=Ut[l]=Ut[d]=Ut[u]=Ut[m]=Ut[g]=Ut[y]=Ut[w]=Ut[f]=Ut[b]=Ut[E]=!1;var Gt={};Gt[r]=Gt[h]=Gt[x]=Gt[T]=Gt[c]=Gt[l]=Gt[A]=Gt[S]=Gt[I]=Gt[k]=Gt[N]=Gt[m]=Gt[g]=Gt[y]=Gt[w]=Gt[f]=Gt[b]=Gt[v]=Gt[R]=Gt["[object Uint8ClampedArray]"]=Gt[P]=Gt[O]=!0,Gt[d]=Gt[u]=Gt[E]=!1;var Wt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},qt=parseFloat,Ft=parseInt,Xt="object"==typeof t&&t&&t.Object===Object&&t,Bt="object"==typeof self&&self&&self.Object===Object&&self,zt=Xt||Bt||Function("return this")(),Kt=e&&!e.nodeType&&e,Vt=Kt&&"object"==typeof s&&s&&!s.nodeType&&s,Jt=Vt&&Vt.exports===Kt,$t=Jt&&Xt.process,Qt=function(){try{var t=Vt&&Vt.require&&Vt.require("util").types;return t||$t&&$t.binding&&$t.binding("util")}catch(t){}}(),Zt=Qt&&Qt.isArrayBuffer,te=Qt&&Qt.isDate,ee=Qt&&Qt.isMap,ie=Qt&&Qt.isRegExp,se=Qt&&Qt.isSet,ne=Qt&&Qt.isTypedArray;function ae(t,e,i){switch(i.length){case 0:return t.call(e);case 1:return t.call(e,i[0]);case 2:return t.call(e,i[0],i[1]);case 3:return t.call(e,i[0],i[1],i[2])}return t.apply(e,i)}function _e(t,e,i,s){for(var n=-1,a=null==t?0:t.length;++n<a;){var _=t[n];e(s,_,i(_),t)}return s}function oe(t,e){for(var i=-1,s=null==t?0:t.length;++i<s&&!1!==e(t[i],i,t););return t}function re(t,e){for(var i=null==t?0:t.length;i--&&!1!==e(t[i],i,t););return t}function he(t,e){for(var i=-1,s=null==t?0:t.length;++i<s;)if(!e(t[i],i,t))return!1;return!0}function ce(t,e){for(var i=-1,s=null==t?0:t.length,n=0,a=[];++i<s;){var _=t[i];e(_,i,t)&&(a[n++]=_)}return a}function le(t,e){return!!(null==t?0:t.length)&&ve(t,e,0)>-1}function de(t,e,i){for(var s=-1,n=null==t?0:t.length;++s<n;)if(i(e,t[s]))return!0;return!1}function ue(t,e){for(var i=-1,s=null==t?0:t.length,n=Array(s);++i<s;)n[i]=e(t[i],i,t);return n}function pe(t,e){for(var i=-1,s=e.length,n=t.length;++i<s;)t[n+i]=e[i];return t}function me(t,e,i,s){var n=-1,a=null==t?0:t.length;for(s&&a&&(i=t[++n]);++n<a;)i=e(i,t[n],n,t);return i}function ge(t,e,i,s){var n=null==t?0:t.length;for(s&&n&&(i=t[--n]);n--;)i=e(i,t[n],n,t);return i}function ye(t,e){for(var i=-1,s=null==t?0:t.length;++i<s;)if(e(t[i],i,t))return!0;return!1}var we=Ae("length");function fe(t,e,i){var s;return i(t,(function(t,i,n){if(e(t,i,n))return s=i,!1})),s}function be(t,e,i,s){for(var n=t.length,a=i+(s?1:-1);s?a--:++a<n;)if(e(t[a],a,t))return a;return-1}function ve(t,e,i){return e==e?function(t,e,i){var s=i-1,n=t.length;for(;++s<n;)if(t[s]===e)return s;return-1}(t,e,i):be(t,xe,i)}function Ee(t,e,i,s){for(var n=i-1,a=t.length;++n<a;)if(s(t[n],e))return n;return-1}function xe(t){return t!=t}function Te(t,e){var i=null==t?0:t.length;return i?ke(t,e)/i:NaN}function Ae(t){return function(e){return null==e?void 0:e[t]}}function Se(t){return function(e){return null==t?void 0:t[e]}}function Ie(t,e,i,s,n){return n(t,(function(t,n,a){i=s?(s=!1,t):e(i,t,n,a)})),i}function ke(t,e){for(var i,s=-1,n=t.length;++s<n;){var a=e(t[s]);void 0!==a&&(i=void 0===i?a:i+a)}return i}function Ne(t,e){for(var i=-1,s=Array(t);++i<t;)s[i]=e(i);return s}function Re(t){return function(e){return t(e)}}function Pe(t,e){return ue(e,(function(e){return t[e]}))}function Oe(t,e){return t.has(e)}function je(t,e){for(var i=-1,s=t.length;++i<s&&ve(e,t[i],0)>-1;);return i}function Me(t,e){for(var i=t.length;i--&&ve(e,t[i],0)>-1;);return i}function Le(t,e){for(var i=t.length,s=0;i--;)t[i]===e&&++s;return s}var De=Se({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Ce=Se({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function He(t){return"\\"+Wt[t]}function Ye(t){return Dt.test(t)}function Ue(t){var e=-1,i=Array(t.size);return t.forEach((function(t,s){i[++e]=[s,t]})),i}function Ge(t,e){return function(i){return t(e(i))}}function We(t,e){for(var i=-1,s=t.length,n=0,a=[];++i<s;){var o=t[i];o!==e&&o!==_||(t[i]=_,a[n++]=i)}return a}function qe(t){var e=-1,i=Array(t.size);return t.forEach((function(t){i[++e]=t})),i}function Fe(t){var e=-1,i=Array(t.size);return t.forEach((function(t){i[++e]=[t,t]})),i}function Xe(t){return Ye(t)?function(t){var e=Mt.lastIndex=0;for(;Mt.test(t);)++e;return e}(t):we(t)}function Be(t){return Ye(t)?function(t){return t.match(Mt)||[]}(t):function(t){return t.split("")}(t)}var ze=Se({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Ke=function t(e){var i,s=(e=null==e?zt:Ke.defaults(zt.Object(),e,Ke.pick(zt,Ht))).Array,n=e.Date,dt=e.Error,ut=e.Function,pt=e.Math,mt=e.Object,gt=e.RegExp,yt=e.String,wt=e.TypeError,ft=s.prototype,bt=ut.prototype,vt=mt.prototype,Et=e["__core-js_shared__"],xt=bt.toString,Tt=vt.hasOwnProperty,At=0,St=(i=/[^.]+$/.exec(Et&&Et.keys&&Et.keys.IE_PROTO||""))?"Symbol(src)_1."+i:"",It=vt.toString,kt=xt.call(mt),Nt=zt._,Rt=gt("^"+xt.call(Tt).replace(B,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Pt=Jt?e.Buffer:void 0,Mt=e.Symbol,Dt=e.Uint8Array,Wt=Pt?Pt.allocUnsafe:void 0,Xt=Ge(mt.getPrototypeOf,mt),Bt=mt.create,Kt=vt.propertyIsEnumerable,Vt=ft.splice,$t=Mt?Mt.isConcatSpreadable:void 0,Qt=Mt?Mt.iterator:void 0,we=Mt?Mt.toStringTag:void 0,Se=function(){try{var t=Zn(mt,"defineProperty");return t({},"",{}),t}catch(t){}}(),Ve=e.clearTimeout!==zt.clearTimeout&&e.clearTimeout,Je=n&&n.now!==zt.Date.now&&n.now,$e=e.setTimeout!==zt.setTimeout&&e.setTimeout,Qe=pt.ceil,Ze=pt.floor,ti=mt.getOwnPropertySymbols,ei=Pt?Pt.isBuffer:void 0,ii=e.isFinite,si=ft.join,ni=Ge(mt.keys,mt),ai=pt.max,_i=pt.min,oi=n.now,ri=e.parseInt,hi=pt.random,ci=ft.reverse,li=Zn(e,"DataView"),di=Zn(e,"Map"),ui=Zn(e,"Promise"),pi=Zn(e,"Set"),mi=Zn(e,"WeakMap"),gi=Zn(mt,"create"),yi=mi&&new mi,wi={},fi=Sa(li),bi=Sa(di),vi=Sa(ui),Ei=Sa(pi),xi=Sa(mi),Ti=Mt?Mt.prototype:void 0,Ai=Ti?Ti.valueOf:void 0,Si=Ti?Ti.toString:void 0;function Ii(t){if(q_(t)&&!O_(t)&&!(t instanceof Pi)){if(t instanceof Ri)return t;if(Tt.call(t,"__wrapped__"))return Ia(t)}return new Ri(t)}var ki=function(){function t(){}return function(e){if(!W_(e))return{};if(Bt)return Bt(e);t.prototype=e;var i=new t;return t.prototype=void 0,i}}();function Ni(){}function Ri(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=void 0}function Pi(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function Oi(t){var e=-1,i=null==t?0:t.length;for(this.clear();++e<i;){var s=t[e];this.set(s[0],s[1])}}function ji(t){var e=-1,i=null==t?0:t.length;for(this.clear();++e<i;){var s=t[e];this.set(s[0],s[1])}}function Mi(t){var e=-1,i=null==t?0:t.length;for(this.clear();++e<i;){var s=t[e];this.set(s[0],s[1])}}function Li(t){var e=-1,i=null==t?0:t.length;for(this.__data__=new Mi;++e<i;)this.add(t[e])}function Di(t){var e=this.__data__=new ji(t);this.size=e.size}function Ci(t,e){var i=O_(t),s=!i&&P_(t),n=!i&&!s&&D_(t),a=!i&&!s&&!n&&$_(t),_=i||s||n||a,o=_?Ne(t.length,yt):[],r=o.length;for(var h in t)!e&&!Tt.call(t,h)||_&&("length"==h||n&&("offset"==h||"parent"==h)||a&&("buffer"==h||"byteLength"==h||"byteOffset"==h)||_a(h,r))||o.push(h);return o}function Hi(t){var e=t.length;return e?t[Ls(0,e-1)]:void 0}function Yi(t,e){return xa(yn(t),Ki(e,0,t.length))}function Ui(t){return xa(yn(t))}function Gi(t,e,i){(void 0!==i&&!k_(t[e],i)||void 0===i&&!(e in t))&&Bi(t,e,i)}function Wi(t,e,i){var s=t[e];Tt.call(t,e)&&k_(s,i)&&(void 0!==i||e in t)||Bi(t,e,i)}function qi(t,e){for(var i=t.length;i--;)if(k_(t[i][0],e))return i;return-1}function Fi(t,e,i,s){return Zi(t,(function(t,n,a){e(s,t,i(t),a)})),s}function Xi(t,e){return t&&wn(e,bo(e),t)}function Bi(t,e,i){"__proto__"==e&&Se?Se(t,e,{configurable:!0,enumerable:!0,value:i,writable:!0}):t[e]=i}function zi(t,e){for(var i=-1,n=e.length,a=s(n),_=null==t;++i<n;)a[i]=_?void 0:mo(t,e[i]);return a}function Ki(t,e,i){return t==t&&(void 0!==i&&(t=t<=i?t:i),void 0!==e&&(t=t>=e?t:e)),t}function Vi(t,e,i,s,n,a){var _,o=1&e,h=2&e,d=4&e;if(i&&(_=n?i(t,s,n,a):i(t)),void 0!==_)return _;if(!W_(t))return t;var E=O_(t);if(E){if(_=function(t){var e=t.length,i=new t.constructor(e);e&&"string"==typeof t[0]&&Tt.call(t,"index")&&(i.index=t.index,i.input=t.input);return i}(t),!o)return yn(t,_)}else{var j=ia(t),M=j==u||j==p;if(D_(t))return ln(t,o);if(j==y||j==r||M&&!n){if(_=h||M?{}:na(t),!o)return h?function(t,e){return wn(t,ea(t),e)}(t,function(t,e){return t&&wn(e,vo(e),t)}(_,t)):function(t,e){return wn(t,ta(t),e)}(t,Xi(_,t))}else{if(!Gt[j])return n?t:{};_=function(t,e,i){var s=t.constructor;switch(e){case x:return dn(t);case c:case l:return new s(+t);case T:return function(t,e){var i=e?dn(t.buffer):t.buffer;return new t.constructor(i,t.byteOffset,t.byteLength)}(t,i);case A:case S:case I:case k:case N:case R:case"[object Uint8ClampedArray]":case P:case O:return un(t,i);case m:return new s;case g:case b:return new s(t);case w:return function(t){var e=new t.constructor(t.source,st.exec(t));return e.lastIndex=t.lastIndex,e}(t);case f:return new s;case v:return n=t,Ai?mt(Ai.call(n)):{}}var n}(t,j,o)}}a||(a=new Di);var L=a.get(t);if(L)return L;a.set(t,_),K_(t)?t.forEach((function(s){_.add(Vi(s,e,i,s,t,a))})):F_(t)&&t.forEach((function(s,n){_.set(n,Vi(s,e,i,n,t,a))}));var D=E?void 0:(d?h?Bn:Xn:h?vo:bo)(t);return oe(D||t,(function(s,n){D&&(s=t[n=s]),Wi(_,n,Vi(s,e,i,n,t,a))})),_}function Ji(t,e,i){var s=i.length;if(null==t)return!s;for(t=mt(t);s--;){var n=i[s],a=e[n],_=t[n];if(void 0===_&&!(n in t)||!a(_))return!1}return!0}function $i(t,e,i){if("function"!=typeof t)throw new wt(a);return fa((function(){t.apply(void 0,i)}),e)}function Qi(t,e,i,s){var n=-1,a=le,_=!0,o=t.length,r=[],h=e.length;if(!o)return r;i&&(e=ue(e,Re(i))),s?(a=de,_=!1):e.length>=200&&(a=Oe,_=!1,e=new Li(e));t:for(;++n<o;){var c=t[n],l=null==i?c:i(c);if(c=s||0!==c?c:0,_&&l==l){for(var d=h;d--;)if(e[d]===l)continue t;r.push(c)}else a(e,l,s)||r.push(c)}return r}Ii.templateSettings={escape:U,evaluate:G,interpolate:W,variable:"",imports:{_:Ii}},Ii.prototype=Ni.prototype,Ii.prototype.constructor=Ii,Ri.prototype=ki(Ni.prototype),Ri.prototype.constructor=Ri,Pi.prototype=ki(Ni.prototype),Pi.prototype.constructor=Pi,Oi.prototype.clear=function(){this.__data__=gi?gi(null):{},this.size=0},Oi.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},Oi.prototype.get=function(t){var e=this.__data__;if(gi){var i=e[t];return"__lodash_hash_undefined__"===i?void 0:i}return Tt.call(e,t)?e[t]:void 0},Oi.prototype.has=function(t){var e=this.__data__;return gi?void 0!==e[t]:Tt.call(e,t)},Oi.prototype.set=function(t,e){var i=this.__data__;return this.size+=this.has(t)?0:1,i[t]=gi&&void 0===e?"__lodash_hash_undefined__":e,this},ji.prototype.clear=function(){this.__data__=[],this.size=0},ji.prototype.delete=function(t){var e=this.__data__,i=qi(e,t);return!(i<0)&&(i==e.length-1?e.pop():Vt.call(e,i,1),--this.size,!0)},ji.prototype.get=function(t){var e=this.__data__,i=qi(e,t);return i<0?void 0:e[i][1]},ji.prototype.has=function(t){return qi(this.__data__,t)>-1},ji.prototype.set=function(t,e){var i=this.__data__,s=qi(i,t);return s<0?(++this.size,i.push([t,e])):i[s][1]=e,this},Mi.prototype.clear=function(){this.size=0,this.__data__={hash:new Oi,map:new(di||ji),string:new Oi}},Mi.prototype.delete=function(t){var e=$n(this,t).delete(t);return this.size-=e?1:0,e},Mi.prototype.get=function(t){return $n(this,t).get(t)},Mi.prototype.has=function(t){return $n(this,t).has(t)},Mi.prototype.set=function(t,e){var i=$n(this,t),s=i.size;return i.set(t,e),this.size+=i.size==s?0:1,this},Li.prototype.add=Li.prototype.push=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this},Li.prototype.has=function(t){return this.__data__.has(t)},Di.prototype.clear=function(){this.__data__=new ji,this.size=0},Di.prototype.delete=function(t){var e=this.__data__,i=e.delete(t);return this.size=e.size,i},Di.prototype.get=function(t){return this.__data__.get(t)},Di.prototype.has=function(t){return this.__data__.has(t)},Di.prototype.set=function(t,e){var i=this.__data__;if(i instanceof ji){var s=i.__data__;if(!di||s.length<199)return s.push([t,e]),this.size=++i.size,this;i=this.__data__=new Mi(s)}return i.set(t,e),this.size=i.size,this};var Zi=vn(os),ts=vn(rs,!0);function es(t,e){var i=!0;return Zi(t,(function(t,s,n){return i=!!e(t,s,n)})),i}function is(t,e,i){for(var s=-1,n=t.length;++s<n;){var a=t[s],_=e(a);if(null!=_&&(void 0===o?_==_&&!J_(_):i(_,o)))var o=_,r=a}return r}function ss(t,e){var i=[];return Zi(t,(function(t,s,n){e(t,s,n)&&i.push(t)})),i}function ns(t,e,i,s,n){var a=-1,_=t.length;for(i||(i=aa),n||(n=[]);++a<_;){var o=t[a];e>0&&i(o)?e>1?ns(o,e-1,i,s,n):pe(n,o):s||(n[n.length]=o)}return n}var as=En(),_s=En(!0);function os(t,e){return t&&as(t,e,bo)}function rs(t,e){return t&&_s(t,e,bo)}function hs(t,e){return ce(e,(function(e){return Y_(t[e])}))}function cs(t,e){for(var i=0,s=(e=on(e,t)).length;null!=t&&i<s;)t=t[Aa(e[i++])];return i&&i==s?t:void 0}function ls(t,e,i){var s=e(t);return O_(t)?s:pe(s,i(t))}function ds(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":we&&we in mt(t)?function(t){var e=Tt.call(t,we),i=t[we];try{t[we]=void 0;var s=!0}catch(t){}var n=It.call(t);s&&(e?t[we]=i:delete t[we]);return n}(t):function(t){return It.call(t)}(t)}function us(t,e){return t>e}function ps(t,e){return null!=t&&Tt.call(t,e)}function ms(t,e){return null!=t&&e in mt(t)}function gs(t,e,i){for(var n=i?de:le,a=t[0].length,_=t.length,o=_,r=s(_),h=1/0,c=[];o--;){var l=t[o];o&&e&&(l=ue(l,Re(e))),h=_i(l.length,h),r[o]=!i&&(e||a>=120&&l.length>=120)?new Li(o&&l):void 0}l=t[0];var d=-1,u=r[0];t:for(;++d<a&&c.length<h;){var p=l[d],m=e?e(p):p;if(p=i||0!==p?p:0,!(u?Oe(u,m):n(c,m,i))){for(o=_;--o;){var g=r[o];if(!(g?Oe(g,m):n(t[o],m,i)))continue t}u&&u.push(m),c.push(p)}}return c}function ys(t,e,i){var s=null==(t=ma(t,e=on(e,t)))?t:t[Aa(Ha(e))];return null==s?void 0:ae(s,t,i)}function ws(t){return q_(t)&&ds(t)==r}function fs(t,e,i,s,n){return t===e||(null==t||null==e||!q_(t)&&!q_(e)?t!=t&&e!=e:function(t,e,i,s,n,a){var _=O_(t),o=O_(e),u=_?h:ia(t),p=o?h:ia(e),E=(u=u==r?y:u)==y,A=(p=p==r?y:p)==y,S=u==p;if(S&&D_(t)){if(!D_(e))return!1;_=!0,E=!1}if(S&&!E)return a||(a=new Di),_||$_(t)?qn(t,e,i,s,n,a):function(t,e,i,s,n,a,_){switch(i){case T:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case x:return!(t.byteLength!=e.byteLength||!a(new Dt(t),new Dt(e)));case c:case l:case g:return k_(+t,+e);case d:return t.name==e.name&&t.message==e.message;case w:case b:return t==e+"";case m:var o=Ue;case f:var r=1&s;if(o||(o=qe),t.size!=e.size&&!r)return!1;var h=_.get(t);if(h)return h==e;s|=2,_.set(t,e);var u=qn(o(t),o(e),s,n,a,_);return _.delete(t),u;case v:if(Ai)return Ai.call(t)==Ai.call(e)}return!1}(t,e,u,i,s,n,a);if(!(1&i)){var I=E&&Tt.call(t,"__wrapped__"),k=A&&Tt.call(e,"__wrapped__");if(I||k){var N=I?t.value():t,R=k?e.value():e;return a||(a=new Di),n(N,R,i,s,a)}}if(!S)return!1;return a||(a=new Di),function(t,e,i,s,n,a){var _=1&i,o=Xn(t),r=o.length,h=Xn(e).length;if(r!=h&&!_)return!1;var c=r;for(;c--;){var l=o[c];if(!(_?l in e:Tt.call(e,l)))return!1}var d=a.get(t),u=a.get(e);if(d&&u)return d==e&&u==t;var p=!0;a.set(t,e),a.set(e,t);var m=_;for(;++c<r;){l=o[c];var g=t[l],y=e[l];if(s)var w=_?s(y,g,l,e,t,a):s(g,y,l,t,e,a);if(!(void 0===w?g===y||n(g,y,i,s,a):w)){p=!1;break}m||(m="constructor"==l)}if(p&&!m){var f=t.constructor,b=e.constructor;f==b||!("constructor"in t)||!("constructor"in e)||"function"==typeof f&&f instanceof f&&"function"==typeof b&&b instanceof b||(p=!1)}return a.delete(t),a.delete(e),p}(t,e,i,s,n,a)}(t,e,i,s,fs,n))}function bs(t,e,i,s){var n=i.length,a=n,_=!s;if(null==t)return!a;for(t=mt(t);n--;){var o=i[n];if(_&&o[2]?o[1]!==t[o[0]]:!(o[0]in t))return!1}for(;++n<a;){var r=(o=i[n])[0],h=t[r],c=o[1];if(_&&o[2]){if(void 0===h&&!(r in t))return!1}else{var l=new Di;if(s)var d=s(h,c,r,t,e,l);if(!(void 0===d?fs(c,h,3,s,l):d))return!1}}return!0}function vs(t){return!(!W_(t)||(e=t,St&&St in e))&&(Y_(t)?Rt:_t).test(Sa(t));var e}function Es(t){return"function"==typeof t?t:null==t?Bo:"object"==typeof t?O_(t)?ks(t[0],t[1]):Is(t):er(t)}function xs(t){if(!la(t))return ni(t);var e=[];for(var i in mt(t))Tt.call(t,i)&&"constructor"!=i&&e.push(i);return e}function Ts(t){if(!W_(t))return function(t){var e=[];if(null!=t)for(var i in mt(t))e.push(i);return e}(t);var e=la(t),i=[];for(var s in t)("constructor"!=s||!e&&Tt.call(t,s))&&i.push(s);return i}function As(t,e){return t<e}function Ss(t,e){var i=-1,n=M_(t)?s(t.length):[];return Zi(t,(function(t,s,a){n[++i]=e(t,s,a)})),n}function Is(t){var e=Qn(t);return 1==e.length&&e[0][2]?ua(e[0][0],e[0][1]):function(i){return i===t||bs(i,t,e)}}function ks(t,e){return ra(t)&&da(e)?ua(Aa(t),e):function(i){var s=mo(i,t);return void 0===s&&s===e?go(i,t):fs(e,s,3)}}function Ns(t,e,i,s,n){t!==e&&as(e,(function(a,_){if(n||(n=new Di),W_(a))!function(t,e,i,s,n,a,_){var o=ya(t,i),r=ya(e,i),h=_.get(r);if(h)return void Gi(t,i,h);var c=a?a(o,r,i+"",t,e,_):void 0,l=void 0===c;if(l){var d=O_(r),u=!d&&D_(r),p=!d&&!u&&$_(r);c=r,d||u||p?O_(o)?c=o:L_(o)?c=yn(o):u?(l=!1,c=ln(r,!0)):p?(l=!1,c=un(r,!0)):c=[]:B_(r)||P_(r)?(c=o,P_(o)?c=ao(o):W_(o)&&!Y_(o)||(c=na(r))):l=!1}l&&(_.set(r,c),n(c,r,s,a,_),_.delete(r));Gi(t,i,c)}(t,e,_,i,Ns,s,n);else{var o=s?s(ya(t,_),a,_+"",t,e,n):void 0;void 0===o&&(o=a),Gi(t,_,o)}}),vo)}function Rs(t,e){var i=t.length;if(i)return _a(e+=e<0?i:0,i)?t[e]:void 0}function Ps(t,e,i){e=e.length?ue(e,(function(t){return O_(t)?function(e){return cs(e,1===t.length?t[0]:t)}:t})):[Bo];var s=-1;return e=ue(e,Re(Jn())),function(t,e){var i=t.length;for(t.sort(e);i--;)t[i]=t[i].value;return t}(Ss(t,(function(t,i,n){return{criteria:ue(e,(function(e){return e(t)})),index:++s,value:t}})),(function(t,e){return function(t,e,i){var s=-1,n=t.criteria,a=e.criteria,_=n.length,o=i.length;for(;++s<_;){var r=pn(n[s],a[s]);if(r){if(s>=o)return r;var h=i[s];return r*("desc"==h?-1:1)}}return t.index-e.index}(t,e,i)}))}function Os(t,e,i){for(var s=-1,n=e.length,a={};++s<n;){var _=e[s],o=cs(t,_);i(o,_)&&Us(a,on(_,t),o)}return a}function js(t,e,i,s){var n=s?Ee:ve,a=-1,_=e.length,o=t;for(t===e&&(e=yn(e)),i&&(o=ue(t,Re(i)));++a<_;)for(var r=0,h=e[a],c=i?i(h):h;(r=n(o,c,r,s))>-1;)o!==t&&Vt.call(o,r,1),Vt.call(t,r,1);return t}function Ms(t,e){for(var i=t?e.length:0,s=i-1;i--;){var n=e[i];if(i==s||n!==a){var a=n;_a(n)?Vt.call(t,n,1):Qs(t,n)}}return t}function Ls(t,e){return t+Ze(hi()*(e-t+1))}function Ds(t,e){var i="";if(!t||e<1||e>9007199254740991)return i;do{e%2&&(i+=t),(e=Ze(e/2))&&(t+=t)}while(e);return i}function Cs(t,e){return ba(pa(t,e,Bo),t+"")}function Hs(t){return Hi(No(t))}function Ys(t,e){var i=No(t);return xa(i,Ki(e,0,i.length))}function Us(t,e,i,s){if(!W_(t))return t;for(var n=-1,a=(e=on(e,t)).length,_=a-1,o=t;null!=o&&++n<a;){var r=Aa(e[n]),h=i;if("__proto__"===r||"constructor"===r||"prototype"===r)return t;if(n!=_){var c=o[r];void 0===(h=s?s(c,r,o):void 0)&&(h=W_(c)?c:_a(e[n+1])?[]:{})}Wi(o,r,h),o=o[r]}return t}var Gs=yi?function(t,e){return yi.set(t,e),t}:Bo,Ws=Se?function(t,e){return Se(t,"toString",{configurable:!0,enumerable:!1,value:qo(e),writable:!0})}:Bo;function qs(t){return xa(No(t))}function Fs(t,e,i){var n=-1,a=t.length;e<0&&(e=-e>a?0:a+e),(i=i>a?a:i)<0&&(i+=a),a=e>i?0:i-e>>>0,e>>>=0;for(var _=s(a);++n<a;)_[n]=t[n+e];return _}function Xs(t,e){var i;return Zi(t,(function(t,s,n){return!(i=e(t,s,n))})),!!i}function Bs(t,e,i){var s=0,n=null==t?s:t.length;if("number"==typeof e&&e==e&&n<=2147483647){for(;s<n;){var a=s+n>>>1,_=t[a];null!==_&&!J_(_)&&(i?_<=e:_<e)?s=a+1:n=a}return n}return zs(t,e,Bo,i)}function zs(t,e,i,s){var n=0,a=null==t?0:t.length;if(0===a)return 0;for(var _=(e=i(e))!=e,o=null===e,r=J_(e),h=void 0===e;n<a;){var c=Ze((n+a)/2),l=i(t[c]),d=void 0!==l,u=null===l,p=l==l,m=J_(l);if(_)var g=s||p;else g=h?p&&(s||d):o?p&&d&&(s||!u):r?p&&d&&!u&&(s||!m):!u&&!m&&(s?l<=e:l<e);g?n=c+1:a=c}return _i(a,4294967294)}function Ks(t,e){for(var i=-1,s=t.length,n=0,a=[];++i<s;){var _=t[i],o=e?e(_):_;if(!i||!k_(o,r)){var r=o;a[n++]=0===_?0:_}}return a}function Vs(t){return"number"==typeof t?t:J_(t)?NaN:+t}function Js(t){if("string"==typeof t)return t;if(O_(t))return ue(t,Js)+"";if(J_(t))return Si?Si.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function $s(t,e,i){var s=-1,n=le,a=t.length,_=!0,o=[],r=o;if(i)_=!1,n=de;else if(a>=200){var h=e?null:Cn(t);if(h)return qe(h);_=!1,n=Oe,r=new Li}else r=e?[]:o;t:for(;++s<a;){var c=t[s],l=e?e(c):c;if(c=i||0!==c?c:0,_&&l==l){for(var d=r.length;d--;)if(r[d]===l)continue t;e&&r.push(l),o.push(c)}else n(r,l,i)||(r!==o&&r.push(l),o.push(c))}return o}function Qs(t,e){return null==(t=ma(t,e=on(e,t)))||delete t[Aa(Ha(e))]}function Zs(t,e,i,s){return Us(t,e,i(cs(t,e)),s)}function tn(t,e,i,s){for(var n=t.length,a=s?n:-1;(s?a--:++a<n)&&e(t[a],a,t););return i?Fs(t,s?0:a,s?a+1:n):Fs(t,s?a+1:0,s?n:a)}function en(t,e){var i=t;return i instanceof Pi&&(i=i.value()),me(e,(function(t,e){return e.func.apply(e.thisArg,pe([t],e.args))}),i)}function sn(t,e,i){var n=t.length;if(n<2)return n?$s(t[0]):[];for(var a=-1,_=s(n);++a<n;)for(var o=t[a],r=-1;++r<n;)r!=a&&(_[a]=Qi(_[a]||o,t[r],e,i));return $s(ns(_,1),e,i)}function nn(t,e,i){for(var s=-1,n=t.length,a=e.length,_={};++s<n;){var o=s<a?e[s]:void 0;i(_,t[s],o)}return _}function an(t){return L_(t)?t:[]}function _n(t){return"function"==typeof t?t:Bo}function on(t,e){return O_(t)?t:ra(t,e)?[t]:Ta(_o(t))}var rn=Cs;function hn(t,e,i){var s=t.length;return i=void 0===i?s:i,!e&&i>=s?t:Fs(t,e,i)}var cn=Ve||function(t){return zt.clearTimeout(t)};function ln(t,e){if(e)return t.slice();var i=t.length,s=Wt?Wt(i):new t.constructor(i);return t.copy(s),s}function dn(t){var e=new t.constructor(t.byteLength);return new Dt(e).set(new Dt(t)),e}function un(t,e){var i=e?dn(t.buffer):t.buffer;return new t.constructor(i,t.byteOffset,t.length)}function pn(t,e){if(t!==e){var i=void 0!==t,s=null===t,n=t==t,a=J_(t),_=void 0!==e,o=null===e,r=e==e,h=J_(e);if(!o&&!h&&!a&&t>e||a&&_&&r&&!o&&!h||s&&_&&r||!i&&r||!n)return 1;if(!s&&!a&&!h&&t<e||h&&i&&n&&!s&&!a||o&&i&&n||!_&&n||!r)return-1}return 0}function mn(t,e,i,n){for(var a=-1,_=t.length,o=i.length,r=-1,h=e.length,c=ai(_-o,0),l=s(h+c),d=!n;++r<h;)l[r]=e[r];for(;++a<o;)(d||a<_)&&(l[i[a]]=t[a]);for(;c--;)l[r++]=t[a++];return l}function gn(t,e,i,n){for(var a=-1,_=t.length,o=-1,r=i.length,h=-1,c=e.length,l=ai(_-r,0),d=s(l+c),u=!n;++a<l;)d[a]=t[a];for(var p=a;++h<c;)d[p+h]=e[h];for(;++o<r;)(u||a<_)&&(d[p+i[o]]=t[a++]);return d}function yn(t,e){var i=-1,n=t.length;for(e||(e=s(n));++i<n;)e[i]=t[i];return e}function wn(t,e,i,s){var n=!i;i||(i={});for(var a=-1,_=e.length;++a<_;){var o=e[a],r=s?s(i[o],t[o],o,i,t):void 0;void 0===r&&(r=t[o]),n?Bi(i,o,r):Wi(i,o,r)}return i}function fn(t,e){return function(i,s){var n=O_(i)?_e:Fi,a=e?e():{};return n(i,t,Jn(s,2),a)}}function bn(t){return Cs((function(e,i){var s=-1,n=i.length,a=n>1?i[n-1]:void 0,_=n>2?i[2]:void 0;for(a=t.length>3&&"function"==typeof a?(n--,a):void 0,_&&oa(i[0],i[1],_)&&(a=n<3?void 0:a,n=1),e=mt(e);++s<n;){var o=i[s];o&&t(e,o,s,a)}return e}))}function vn(t,e){return function(i,s){if(null==i)return i;if(!M_(i))return t(i,s);for(var n=i.length,a=e?n:-1,_=mt(i);(e?a--:++a<n)&&!1!==s(_[a],a,_););return i}}function En(t){return function(e,i,s){for(var n=-1,a=mt(e),_=s(e),o=_.length;o--;){var r=_[t?o:++n];if(!1===i(a[r],r,a))break}return e}}function xn(t){return function(e){var i=Ye(e=_o(e))?Be(e):void 0,s=i?i[0]:e.charAt(0),n=i?hn(i,1).join(""):e.slice(1);return s[t]()+n}}function Tn(t){return function(e){return me(Uo(Oo(e).replace(Ot,"")),t,"")}}function An(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var i=ki(t.prototype),s=t.apply(i,e);return W_(s)?s:i}}function Sn(t){return function(e,i,s){var n=mt(e);if(!M_(e)){var a=Jn(i,3);e=bo(e),i=function(t){return a(n[t],t,n)}}var _=t(e,i,s);return _>-1?n[a?e[_]:_]:void 0}}function In(t){return Fn((function(e){var i=e.length,s=i,n=Ri.prototype.thru;for(t&&e.reverse();s--;){var _=e[s];if("function"!=typeof _)throw new wt(a);if(n&&!o&&"wrapper"==Kn(_))var o=new Ri([],!0)}for(s=o?s:i;++s<i;){var r=Kn(_=e[s]),h="wrapper"==r?zn(_):void 0;o=h&&ha(h[0])&&424==h[1]&&!h[4].length&&1==h[9]?o[Kn(h[0])].apply(o,h[3]):1==_.length&&ha(_)?o[r]():o.thru(_)}return function(){var t=arguments,s=t[0];if(o&&1==t.length&&O_(s))return o.plant(s).value();for(var n=0,a=i?e[n].apply(this,t):s;++n<i;)a=e[n].call(this,a);return a}}))}function kn(t,e,i,n,a,_,o,r,h,c){var l=128&e,d=1&e,u=2&e,p=24&e,m=512&e,g=u?void 0:An(t);return function y(){for(var w=arguments.length,f=s(w),b=w;b--;)f[b]=arguments[b];if(p)var v=Vn(y),E=Le(f,v);if(n&&(f=mn(f,n,a,p)),_&&(f=gn(f,_,o,p)),w-=E,p&&w<c){var x=We(f,v);return Ln(t,e,kn,y.placeholder,i,f,x,r,h,c-w)}var T=d?i:this,A=u?T[t]:t;return w=f.length,r?f=ga(f,r):m&&w>1&&f.reverse(),l&&h<w&&(f.length=h),this&&this!==zt&&this instanceof y&&(A=g||An(A)),A.apply(T,f)}}function Nn(t,e){return function(i,s){return function(t,e,i,s){return os(t,(function(t,n,a){e(s,i(t),n,a)})),s}(i,t,e(s),{})}}function Rn(t,e){return function(i,s){var n;if(void 0===i&&void 0===s)return e;if(void 0!==i&&(n=i),void 0!==s){if(void 0===n)return s;"string"==typeof i||"string"==typeof s?(i=Js(i),s=Js(s)):(i=Vs(i),s=Vs(s)),n=t(i,s)}return n}}function Pn(t){return Fn((function(e){return e=ue(e,Re(Jn())),Cs((function(i){var s=this;return t(e,(function(t){return ae(t,s,i)}))}))}))}function On(t,e){var i=(e=void 0===e?" ":Js(e)).length;if(i<2)return i?Ds(e,t):e;var s=Ds(e,Qe(t/Xe(e)));return Ye(e)?hn(Be(s),0,t).join(""):s.slice(0,t)}function jn(t){return function(e,i,n){return n&&"number"!=typeof n&&oa(e,i,n)&&(i=n=void 0),e=eo(e),void 0===i?(i=e,e=0):i=eo(i),function(t,e,i,n){for(var a=-1,_=ai(Qe((e-t)/(i||1)),0),o=s(_);_--;)o[n?_:++a]=t,t+=i;return o}(e,i,n=void 0===n?e<i?1:-1:eo(n),t)}}function Mn(t){return function(e,i){return"string"==typeof e&&"string"==typeof i||(e=no(e),i=no(i)),t(e,i)}}function Ln(t,e,i,s,n,a,_,o,r,h){var c=8&e;e|=c?32:64,4&(e&=~(c?64:32))||(e&=-4);var l=[t,e,n,c?a:void 0,c?_:void 0,c?void 0:a,c?void 0:_,o,r,h],d=i.apply(void 0,l);return ha(t)&&wa(d,l),d.placeholder=s,va(d,t,e)}function Dn(t){var e=pt[t];return function(t,i){if(t=no(t),(i=null==i?0:_i(io(i),292))&&ii(t)){var s=(_o(t)+"e").split("e");return+((s=(_o(e(s[0]+"e"+(+s[1]+i)))+"e").split("e"))[0]+"e"+(+s[1]-i))}return e(t)}}var Cn=pi&&1/qe(new pi([,-0]))[1]==1/0?function(t){return new pi(t)}:$o;function Hn(t){return function(e){var i=ia(e);return i==m?Ue(e):i==f?Fe(e):function(t,e){return ue(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function Yn(t,e,i,n,o,r,h,c){var l=2&e;if(!l&&"function"!=typeof t)throw new wt(a);var d=n?n.length:0;if(d||(e&=-97,n=o=void 0),h=void 0===h?h:ai(io(h),0),c=void 0===c?c:io(c),d-=o?o.length:0,64&e){var u=n,p=o;n=o=void 0}var m=l?void 0:zn(t),g=[t,e,i,n,o,u,p,r,h,c];if(m&&function(t,e){var i=t[1],s=e[1],n=i|s,a=n<131,o=128==s&&8==i||128==s&&256==i&&t[7].length<=e[8]||384==s&&e[7].length<=e[8]&&8==i;if(!a&&!o)return t;1&s&&(t[2]=e[2],n|=1&i?0:4);var r=e[3];if(r){var h=t[3];t[3]=h?mn(h,r,e[4]):r,t[4]=h?We(t[3],_):e[4]}(r=e[5])&&(h=t[5],t[5]=h?gn(h,r,e[6]):r,t[6]=h?We(t[5],_):e[6]);(r=e[7])&&(t[7]=r);128&s&&(t[8]=null==t[8]?e[8]:_i(t[8],e[8]));null==t[9]&&(t[9]=e[9]);t[0]=e[0],t[1]=n}(g,m),t=g[0],e=g[1],i=g[2],n=g[3],o=g[4],!(c=g[9]=void 0===g[9]?l?0:t.length:ai(g[9]-d,0))&&24&e&&(e&=-25),e&&1!=e)y=8==e||16==e?function(t,e,i){var n=An(t);return function a(){for(var _=arguments.length,o=s(_),r=_,h=Vn(a);r--;)o[r]=arguments[r];var c=_<3&&o[0]!==h&&o[_-1]!==h?[]:We(o,h);if((_-=c.length)<i)return Ln(t,e,kn,a.placeholder,void 0,o,c,void 0,void 0,i-_);var l=this&&this!==zt&&this instanceof a?n:t;return ae(l,this,o)}}(t,e,c):32!=e&&33!=e||o.length?kn.apply(void 0,g):function(t,e,i,n){var a=1&e,_=An(t);return function e(){for(var o=-1,r=arguments.length,h=-1,c=n.length,l=s(c+r),d=this&&this!==zt&&this instanceof e?_:t;++h<c;)l[h]=n[h];for(;r--;)l[h++]=arguments[++o];return ae(d,a?i:this,l)}}(t,e,i,n);else var y=function(t,e,i){var s=1&e,n=An(t);return function e(){var a=this&&this!==zt&&this instanceof e?n:t;return a.apply(s?i:this,arguments)}}(t,e,i);return va((m?Gs:wa)(y,g),t,e)}function Un(t,e,i,s){return void 0===t||k_(t,vt[i])&&!Tt.call(s,i)?e:t}function Gn(t,e,i,s,n,a){return W_(t)&&W_(e)&&(a.set(e,t),Ns(t,e,void 0,Gn,a),a.delete(e)),t}function Wn(t){return B_(t)?void 0:t}function qn(t,e,i,s,n,a){var _=1&i,o=t.length,r=e.length;if(o!=r&&!(_&&r>o))return!1;var h=a.get(t),c=a.get(e);if(h&&c)return h==e&&c==t;var l=-1,d=!0,u=2&i?new Li:void 0;for(a.set(t,e),a.set(e,t);++l<o;){var p=t[l],m=e[l];if(s)var g=_?s(m,p,l,e,t,a):s(p,m,l,t,e,a);if(void 0!==g){if(g)continue;d=!1;break}if(u){if(!ye(e,(function(t,e){if(!Oe(u,e)&&(p===t||n(p,t,i,s,a)))return u.push(e)}))){d=!1;break}}else if(p!==m&&!n(p,m,i,s,a)){d=!1;break}}return a.delete(t),a.delete(e),d}function Fn(t){return ba(pa(t,void 0,ja),t+"")}function Xn(t){return ls(t,bo,ta)}function Bn(t){return ls(t,vo,ea)}var zn=yi?function(t){return yi.get(t)}:$o;function Kn(t){for(var e=t.name+"",i=wi[e],s=Tt.call(wi,e)?i.length:0;s--;){var n=i[s],a=n.func;if(null==a||a==t)return n.name}return e}function Vn(t){return(Tt.call(Ii,"placeholder")?Ii:t).placeholder}function Jn(){var t=Ii.iteratee||zo;return t=t===zo?Es:t,arguments.length?t(arguments[0],arguments[1]):t}function $n(t,e){var i,s,n=t.__data__;return("string"==(s=typeof(i=e))||"number"==s||"symbol"==s||"boolean"==s?"__proto__"!==i:null===i)?n["string"==typeof e?"string":"hash"]:n.map}function Qn(t){for(var e=bo(t),i=e.length;i--;){var s=e[i],n=t[s];e[i]=[s,n,da(n)]}return e}function Zn(t,e){var i=function(t,e){return null==t?void 0:t[e]}(t,e);return vs(i)?i:void 0}var ta=ti?function(t){return null==t?[]:(t=mt(t),ce(ti(t),(function(e){return Kt.call(t,e)})))}:nr,ea=ti?function(t){for(var e=[];t;)pe(e,ta(t)),t=Xt(t);return e}:nr,ia=ds;function sa(t,e,i){for(var s=-1,n=(e=on(e,t)).length,a=!1;++s<n;){var _=Aa(e[s]);if(!(a=null!=t&&i(t,_)))break;t=t[_]}return a||++s!=n?a:!!(n=null==t?0:t.length)&&G_(n)&&_a(_,n)&&(O_(t)||P_(t))}function na(t){return"function"!=typeof t.constructor||la(t)?{}:ki(Xt(t))}function aa(t){return O_(t)||P_(t)||!!($t&&t&&t[$t])}function _a(t,e){var i=typeof t;return!!(e=null==e?9007199254740991:e)&&("number"==i||"symbol"!=i&&rt.test(t))&&t>-1&&t%1==0&&t<e}function oa(t,e,i){if(!W_(i))return!1;var s=typeof e;return!!("number"==s?M_(i)&&_a(e,i.length):"string"==s&&e in i)&&k_(i[e],t)}function ra(t,e){if(O_(t))return!1;var i=typeof t;return!("number"!=i&&"symbol"!=i&&"boolean"!=i&&null!=t&&!J_(t))||(F.test(t)||!q.test(t)||null!=e&&t in mt(e))}function ha(t){var e=Kn(t),i=Ii[e];if("function"!=typeof i||!(e in Pi.prototype))return!1;if(t===i)return!0;var s=zn(i);return!!s&&t===s[0]}(li&&ia(new li(new ArrayBuffer(1)))!=T||di&&ia(new di)!=m||ui&&"[object Promise]"!=ia(ui.resolve())||pi&&ia(new pi)!=f||mi&&ia(new mi)!=E)&&(ia=function(t){var e=ds(t),i=e==y?t.constructor:void 0,s=i?Sa(i):"";if(s)switch(s){case fi:return T;case bi:return m;case vi:return"[object Promise]";case Ei:return f;case xi:return E}return e});var ca=Et?Y_:ar;function la(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||vt)}function da(t){return t==t&&!W_(t)}function ua(t,e){return function(i){return null!=i&&(i[t]===e&&(void 0!==e||t in mt(i)))}}function pa(t,e,i){return e=ai(void 0===e?t.length-1:e,0),function(){for(var n=arguments,a=-1,_=ai(n.length-e,0),o=s(_);++a<_;)o[a]=n[e+a];a=-1;for(var r=s(e+1);++a<e;)r[a]=n[a];return r[e]=i(o),ae(t,this,r)}}function ma(t,e){return e.length<2?t:cs(t,Fs(e,0,-1))}function ga(t,e){for(var i=t.length,s=_i(e.length,i),n=yn(t);s--;){var a=e[s];t[s]=_a(a,i)?n[a]:void 0}return t}function ya(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var wa=Ea(Gs),fa=$e||function(t,e){return zt.setTimeout(t,e)},ba=Ea(Ws);function va(t,e,i){var s=e+"";return ba(t,function(t,e){var i=e.length;if(!i)return t;var s=i-1;return e[s]=(i>1?"& ":"")+e[s],e=e.join(i>2?", ":" "),t.replace($,"{\n/* [wrapped with "+e+"] */\n")}(s,function(t,e){return oe(o,(function(i){var s="_."+i[0];e&i[1]&&!le(t,s)&&t.push(s)})),t.sort()}(function(t){var e=t.match(Q);return e?e[1].split(Z):[]}(s),i)))}function Ea(t){var e=0,i=0;return function(){var s=oi(),n=16-(s-i);if(i=s,n>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}function xa(t,e){var i=-1,s=t.length,n=s-1;for(e=void 0===e?s:e;++i<e;){var a=Ls(i,n),_=t[a];t[a]=t[i],t[i]=_}return t.length=e,t}var Ta=function(t){var e=E_(t,(function(t){return 500===i.size&&i.clear(),t})),i=e.cache;return e}((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(X,(function(t,i,s,n){e.push(s?n.replace(et,"$1"):i||t)})),e}));function Aa(t){if("string"==typeof t||J_(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function Sa(t){if(null!=t){try{return xt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Ia(t){if(t instanceof Pi)return t.clone();var e=new Ri(t.__wrapped__,t.__chain__);return e.__actions__=yn(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var ka=Cs((function(t,e){return L_(t)?Qi(t,ns(e,1,L_,!0)):[]})),Na=Cs((function(t,e){var i=Ha(e);return L_(i)&&(i=void 0),L_(t)?Qi(t,ns(e,1,L_,!0),Jn(i,2)):[]})),Ra=Cs((function(t,e){var i=Ha(e);return L_(i)&&(i=void 0),L_(t)?Qi(t,ns(e,1,L_,!0),void 0,i):[]}));function Pa(t,e,i){var s=null==t?0:t.length;if(!s)return-1;var n=null==i?0:io(i);return n<0&&(n=ai(s+n,0)),be(t,Jn(e,3),n)}function Oa(t,e,i){var s=null==t?0:t.length;if(!s)return-1;var n=s-1;return void 0!==i&&(n=io(i),n=i<0?ai(s+n,0):_i(n,s-1)),be(t,Jn(e,3),n,!0)}function ja(t){return(null==t?0:t.length)?ns(t,1):[]}function Ma(t){return t&&t.length?t[0]:void 0}var La=Cs((function(t){var e=ue(t,an);return e.length&&e[0]===t[0]?gs(e):[]})),Da=Cs((function(t){var e=Ha(t),i=ue(t,an);return e===Ha(i)?e=void 0:i.pop(),i.length&&i[0]===t[0]?gs(i,Jn(e,2)):[]})),Ca=Cs((function(t){var e=Ha(t),i=ue(t,an);return(e="function"==typeof e?e:void 0)&&i.pop(),i.length&&i[0]===t[0]?gs(i,void 0,e):[]}));function Ha(t){var e=null==t?0:t.length;return e?t[e-1]:void 0}var Ya=Cs(Ua);function Ua(t,e){return t&&t.length&&e&&e.length?js(t,e):t}var Ga=Fn((function(t,e){var i=null==t?0:t.length,s=zi(t,e);return Ms(t,ue(e,(function(t){return _a(t,i)?+t:t})).sort(pn)),s}));function Wa(t){return null==t?t:ci.call(t)}var qa=Cs((function(t){return $s(ns(t,1,L_,!0))})),Fa=Cs((function(t){var e=Ha(t);return L_(e)&&(e=void 0),$s(ns(t,1,L_,!0),Jn(e,2))})),Xa=Cs((function(t){var e=Ha(t);return e="function"==typeof e?e:void 0,$s(ns(t,1,L_,!0),void 0,e)}));function Ba(t){if(!t||!t.length)return[];var e=0;return t=ce(t,(function(t){if(L_(t))return e=ai(t.length,e),!0})),Ne(e,(function(e){return ue(t,Ae(e))}))}function za(t,e){if(!t||!t.length)return[];var i=Ba(t);return null==e?i:ue(i,(function(t){return ae(e,void 0,t)}))}var Ka=Cs((function(t,e){return L_(t)?Qi(t,e):[]})),Va=Cs((function(t){return sn(ce(t,L_))})),Ja=Cs((function(t){var e=Ha(t);return L_(e)&&(e=void 0),sn(ce(t,L_),Jn(e,2))})),$a=Cs((function(t){var e=Ha(t);return e="function"==typeof e?e:void 0,sn(ce(t,L_),void 0,e)})),Qa=Cs(Ba);var Za=Cs((function(t){var e=t.length,i=e>1?t[e-1]:void 0;return i="function"==typeof i?(t.pop(),i):void 0,za(t,i)}));function t_(t){var e=Ii(t);return e.__chain__=!0,e}function e_(t,e){return e(t)}var i_=Fn((function(t){var e=t.length,i=e?t[0]:0,s=this.__wrapped__,n=function(e){return zi(e,t)};return!(e>1||this.__actions__.length)&&s instanceof Pi&&_a(i)?((s=s.slice(i,+i+(e?1:0))).__actions__.push({func:e_,args:[n],thisArg:void 0}),new Ri(s,this.__chain__).thru((function(t){return e&&!t.length&&t.push(void 0),t}))):this.thru(n)}));var s_=fn((function(t,e,i){Tt.call(t,i)?++t[i]:Bi(t,i,1)}));var n_=Sn(Pa),a_=Sn(Oa);function __(t,e){return(O_(t)?oe:Zi)(t,Jn(e,3))}function o_(t,e){return(O_(t)?re:ts)(t,Jn(e,3))}var r_=fn((function(t,e,i){Tt.call(t,i)?t[i].push(e):Bi(t,i,[e])}));var h_=Cs((function(t,e,i){var n=-1,a="function"==typeof e,_=M_(t)?s(t.length):[];return Zi(t,(function(t){_[++n]=a?ae(e,t,i):ys(t,e,i)})),_})),c_=fn((function(t,e,i){Bi(t,i,e)}));function l_(t,e){return(O_(t)?ue:Ss)(t,Jn(e,3))}var d_=fn((function(t,e,i){t[i?0:1].push(e)}),(function(){return[[],[]]}));var u_=Cs((function(t,e){if(null==t)return[];var i=e.length;return i>1&&oa(t,e[0],e[1])?e=[]:i>2&&oa(e[0],e[1],e[2])&&(e=[e[0]]),Ps(t,ns(e,1),[])})),p_=Je||function(){return zt.Date.now()};function m_(t,e,i){return e=i?void 0:e,Yn(t,128,void 0,void 0,void 0,void 0,e=t&&null==e?t.length:e)}function g_(t,e){var i;if("function"!=typeof e)throw new wt(a);return t=io(t),function(){return--t>0&&(i=e.apply(this,arguments)),t<=1&&(e=void 0),i}}var y_=Cs((function(t,e,i){var s=1;if(i.length){var n=We(i,Vn(y_));s|=32}return Yn(t,s,e,i,n)})),w_=Cs((function(t,e,i){var s=3;if(i.length){var n=We(i,Vn(w_));s|=32}return Yn(e,s,t,i,n)}));function f_(t,e,i){var s,n,_,o,r,h,c=0,l=!1,d=!1,u=!0;if("function"!=typeof t)throw new wt(a);function p(e){var i=s,a=n;return s=n=void 0,c=e,o=t.apply(a,i)}function m(t){return c=t,r=fa(y,e),l?p(t):o}function g(t){var i=t-h;return void 0===h||i>=e||i<0||d&&t-c>=_}function y(){var t=p_();if(g(t))return w(t);r=fa(y,function(t){var i=e-(t-h);return d?_i(i,_-(t-c)):i}(t))}function w(t){return r=void 0,u&&s?p(t):(s=n=void 0,o)}function f(){var t=p_(),i=g(t);if(s=arguments,n=this,h=t,i){if(void 0===r)return m(h);if(d)return cn(r),r=fa(y,e),p(h)}return void 0===r&&(r=fa(y,e)),o}return e=no(e)||0,W_(i)&&(l=!!i.leading,_=(d="maxWait"in i)?ai(no(i.maxWait)||0,e):_,u="trailing"in i?!!i.trailing:u),f.cancel=function(){void 0!==r&&cn(r),c=0,s=h=n=r=void 0},f.flush=function(){return void 0===r?o:w(p_())},f}var b_=Cs((function(t,e){return $i(t,1,e)})),v_=Cs((function(t,e,i){return $i(t,no(e)||0,i)}));function E_(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new wt(a);var i=function(){var s=arguments,n=e?e.apply(this,s):s[0],a=i.cache;if(a.has(n))return a.get(n);var _=t.apply(this,s);return i.cache=a.set(n,_)||a,_};return i.cache=new(E_.Cache||Mi),i}function x_(t){if("function"!=typeof t)throw new wt(a);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}E_.Cache=Mi;var T_=rn((function(t,e){var i=(e=1==e.length&&O_(e[0])?ue(e[0],Re(Jn())):ue(ns(e,1),Re(Jn()))).length;return Cs((function(s){for(var n=-1,a=_i(s.length,i);++n<a;)s[n]=e[n].call(this,s[n]);return ae(t,this,s)}))})),A_=Cs((function(t,e){return Yn(t,32,void 0,e,We(e,Vn(A_)))})),S_=Cs((function(t,e){return Yn(t,64,void 0,e,We(e,Vn(S_)))})),I_=Fn((function(t,e){return Yn(t,256,void 0,void 0,void 0,e)}));function k_(t,e){return t===e||t!=t&&e!=e}var N_=Mn(us),R_=Mn((function(t,e){return t>=e})),P_=ws(function(){return arguments}())?ws:function(t){return q_(t)&&Tt.call(t,"callee")&&!Kt.call(t,"callee")},O_=s.isArray,j_=Zt?Re(Zt):function(t){return q_(t)&&ds(t)==x};function M_(t){return null!=t&&G_(t.length)&&!Y_(t)}function L_(t){return q_(t)&&M_(t)}var D_=ei||ar,C_=te?Re(te):function(t){return q_(t)&&ds(t)==l};function H_(t){if(!q_(t))return!1;var e=ds(t);return e==d||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!B_(t)}function Y_(t){if(!W_(t))return!1;var e=ds(t);return e==u||e==p||"[object AsyncFunction]"==e||"[object Proxy]"==e}function U_(t){return"number"==typeof t&&t==io(t)}function G_(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}function W_(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function q_(t){return null!=t&&"object"==typeof t}var F_=ee?Re(ee):function(t){return q_(t)&&ia(t)==m};function X_(t){return"number"==typeof t||q_(t)&&ds(t)==g}function B_(t){if(!q_(t)||ds(t)!=y)return!1;var e=Xt(t);if(null===e)return!0;var i=Tt.call(e,"constructor")&&e.constructor;return"function"==typeof i&&i instanceof i&&xt.call(i)==kt}var z_=ie?Re(ie):function(t){return q_(t)&&ds(t)==w};var K_=se?Re(se):function(t){return q_(t)&&ia(t)==f};function V_(t){return"string"==typeof t||!O_(t)&&q_(t)&&ds(t)==b}function J_(t){return"symbol"==typeof t||q_(t)&&ds(t)==v}var $_=ne?Re(ne):function(t){return q_(t)&&G_(t.length)&&!!Ut[ds(t)]};var Q_=Mn(As),Z_=Mn((function(t,e){return t<=e}));function to(t){if(!t)return[];if(M_(t))return V_(t)?Be(t):yn(t);if(Qt&&t[Qt])return function(t){for(var e,i=[];!(e=t.next()).done;)i.push(e.value);return i}(t[Qt]());var e=ia(t);return(e==m?Ue:e==f?qe:No)(t)}function eo(t){return t?(t=no(t))===1/0||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function io(t){var e=eo(t),i=e%1;return e==e?i?e-i:e:0}function so(t){return t?Ki(io(t),0,4294967295):0}function no(t){if("number"==typeof t)return t;if(J_(t))return NaN;if(W_(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=W_(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(K,"");var i=at.test(t);return i||ot.test(t)?Ft(t.slice(2),i?2:8):nt.test(t)?NaN:+t}function ao(t){return wn(t,vo(t))}function _o(t){return null==t?"":Js(t)}var oo=bn((function(t,e){if(la(e)||M_(e))wn(e,bo(e),t);else for(var i in e)Tt.call(e,i)&&Wi(t,i,e[i])})),ro=bn((function(t,e){wn(e,vo(e),t)})),ho=bn((function(t,e,i,s){wn(e,vo(e),t,s)})),co=bn((function(t,e,i,s){wn(e,bo(e),t,s)})),lo=Fn(zi);var uo=Cs((function(t,e){t=mt(t);var i=-1,s=e.length,n=s>2?e[2]:void 0;for(n&&oa(e[0],e[1],n)&&(s=1);++i<s;)for(var a=e[i],_=vo(a),o=-1,r=_.length;++o<r;){var h=_[o],c=t[h];(void 0===c||k_(c,vt[h])&&!Tt.call(t,h))&&(t[h]=a[h])}return t})),po=Cs((function(t){return t.push(void 0,Gn),ae(xo,void 0,t)}));function mo(t,e,i){var s=null==t?void 0:cs(t,e);return void 0===s?i:s}function go(t,e){return null!=t&&sa(t,e,ms)}var yo=Nn((function(t,e,i){null!=e&&"function"!=typeof e.toString&&(e=It.call(e)),t[e]=i}),qo(Bo)),wo=Nn((function(t,e,i){null!=e&&"function"!=typeof e.toString&&(e=It.call(e)),Tt.call(t,e)?t[e].push(i):t[e]=[i]}),Jn),fo=Cs(ys);function bo(t){return M_(t)?Ci(t):xs(t)}function vo(t){return M_(t)?Ci(t,!0):Ts(t)}var Eo=bn((function(t,e,i){Ns(t,e,i)})),xo=bn((function(t,e,i,s){Ns(t,e,i,s)})),To=Fn((function(t,e){var i={};if(null==t)return i;var s=!1;e=ue(e,(function(e){return e=on(e,t),s||(s=e.length>1),e})),wn(t,Bn(t),i),s&&(i=Vi(i,7,Wn));for(var n=e.length;n--;)Qs(i,e[n]);return i}));var Ao=Fn((function(t,e){return null==t?{}:function(t,e){return Os(t,e,(function(e,i){return go(t,i)}))}(t,e)}));function So(t,e){if(null==t)return{};var i=ue(Bn(t),(function(t){return[t]}));return e=Jn(e),Os(t,i,(function(t,i){return e(t,i[0])}))}var Io=Hn(bo),ko=Hn(vo);function No(t){return null==t?[]:Pe(t,bo(t))}var Ro=Tn((function(t,e,i){return e=e.toLowerCase(),t+(i?Po(e):e)}));function Po(t){return Yo(_o(t).toLowerCase())}function Oo(t){return(t=_o(t))&&t.replace(ht,De).replace(jt,"")}var jo=Tn((function(t,e,i){return t+(i?"-":"")+e.toLowerCase()})),Mo=Tn((function(t,e,i){return t+(i?" ":"")+e.toLowerCase()})),Lo=xn("toLowerCase");var Do=Tn((function(t,e,i){return t+(i?"_":"")+e.toLowerCase()}));var Co=Tn((function(t,e,i){return t+(i?" ":"")+Yo(e)}));var Ho=Tn((function(t,e,i){return t+(i?" ":"")+e.toUpperCase()})),Yo=xn("toUpperCase");function Uo(t,e,i){return t=_o(t),void 0===(e=i?void 0:e)?function(t){return Ct.test(t)}(t)?function(t){return t.match(Lt)||[]}(t):function(t){return t.match(tt)||[]}(t):t.match(e)||[]}var Go=Cs((function(t,e){try{return ae(t,void 0,e)}catch(t){return H_(t)?t:new dt(t)}})),Wo=Fn((function(t,e){return oe(e,(function(e){e=Aa(e),Bi(t,e,y_(t[e],t))})),t}));function qo(t){return function(){return t}}var Fo=In(),Xo=In(!0);function Bo(t){return t}function zo(t){return Es("function"==typeof t?t:Vi(t,1))}var Ko=Cs((function(t,e){return function(i){return ys(i,t,e)}})),Vo=Cs((function(t,e){return function(i){return ys(t,i,e)}}));function Jo(t,e,i){var s=bo(e),n=hs(e,s);null!=i||W_(e)&&(n.length||!s.length)||(i=e,e=t,t=this,n=hs(e,bo(e)));var a=!(W_(i)&&"chain"in i&&!i.chain),_=Y_(t);return oe(n,(function(i){var s=e[i];t[i]=s,_&&(t.prototype[i]=function(){var e=this.__chain__;if(a||e){var i=t(this.__wrapped__),n=i.__actions__=yn(this.__actions__);return n.push({func:s,args:arguments,thisArg:t}),i.__chain__=e,i}return s.apply(t,pe([this.value()],arguments))})})),t}function $o(){}var Qo=Pn(ue),Zo=Pn(he),tr=Pn(ye);function er(t){return ra(t)?Ae(Aa(t)):function(t){return function(e){return cs(e,t)}}(t)}var ir=jn(),sr=jn(!0);function nr(){return[]}function ar(){return!1}var _r=Rn((function(t,e){return t+e}),0),or=Dn("ceil"),rr=Rn((function(t,e){return t/e}),1),hr=Dn("floor");var cr,lr=Rn((function(t,e){return t*e}),1),dr=Dn("round"),ur=Rn((function(t,e){return t-e}),0);return Ii.after=function(t,e){if("function"!=typeof e)throw new wt(a);return t=io(t),function(){if(--t<1)return e.apply(this,arguments)}},Ii.ary=m_,Ii.assign=oo,Ii.assignIn=ro,Ii.assignInWith=ho,Ii.assignWith=co,Ii.at=lo,Ii.before=g_,Ii.bind=y_,Ii.bindAll=Wo,Ii.bindKey=w_,Ii.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return O_(t)?t:[t]},Ii.chain=t_,Ii.chunk=function(t,e,i){e=(i?oa(t,e,i):void 0===e)?1:ai(io(e),0);var n=null==t?0:t.length;if(!n||e<1)return[];for(var a=0,_=0,o=s(Qe(n/e));a<n;)o[_++]=Fs(t,a,a+=e);return o},Ii.compact=function(t){for(var e=-1,i=null==t?0:t.length,s=0,n=[];++e<i;){var a=t[e];a&&(n[s++]=a)}return n},Ii.concat=function(){var t=arguments.length;if(!t)return[];for(var e=s(t-1),i=arguments[0],n=t;n--;)e[n-1]=arguments[n];return pe(O_(i)?yn(i):[i],ns(e,1))},Ii.cond=function(t){var e=null==t?0:t.length,i=Jn();return t=e?ue(t,(function(t){if("function"!=typeof t[1])throw new wt(a);return[i(t[0]),t[1]]})):[],Cs((function(i){for(var s=-1;++s<e;){var n=t[s];if(ae(n[0],this,i))return ae(n[1],this,i)}}))},Ii.conforms=function(t){return function(t){var e=bo(t);return function(i){return Ji(i,t,e)}}(Vi(t,1))},Ii.constant=qo,Ii.countBy=s_,Ii.create=function(t,e){var i=ki(t);return null==e?i:Xi(i,e)},Ii.curry=function t(e,i,s){var n=Yn(e,8,void 0,void 0,void 0,void 0,void 0,i=s?void 0:i);return n.placeholder=t.placeholder,n},Ii.curryRight=function t(e,i,s){var n=Yn(e,16,void 0,void 0,void 0,void 0,void 0,i=s?void 0:i);return n.placeholder=t.placeholder,n},Ii.debounce=f_,Ii.defaults=uo,Ii.defaultsDeep=po,Ii.defer=b_,Ii.delay=v_,Ii.difference=ka,Ii.differenceBy=Na,Ii.differenceWith=Ra,Ii.drop=function(t,e,i){var s=null==t?0:t.length;return s?Fs(t,(e=i||void 0===e?1:io(e))<0?0:e,s):[]},Ii.dropRight=function(t,e,i){var s=null==t?0:t.length;return s?Fs(t,0,(e=s-(e=i||void 0===e?1:io(e)))<0?0:e):[]},Ii.dropRightWhile=function(t,e){return t&&t.length?tn(t,Jn(e,3),!0,!0):[]},Ii.dropWhile=function(t,e){return t&&t.length?tn(t,Jn(e,3),!0):[]},Ii.fill=function(t,e,i,s){var n=null==t?0:t.length;return n?(i&&"number"!=typeof i&&oa(t,e,i)&&(i=0,s=n),function(t,e,i,s){var n=t.length;for((i=io(i))<0&&(i=-i>n?0:n+i),(s=void 0===s||s>n?n:io(s))<0&&(s+=n),s=i>s?0:so(s);i<s;)t[i++]=e;return t}(t,e,i,s)):[]},Ii.filter=function(t,e){return(O_(t)?ce:ss)(t,Jn(e,3))},Ii.flatMap=function(t,e){return ns(l_(t,e),1)},Ii.flatMapDeep=function(t,e){return ns(l_(t,e),1/0)},Ii.flatMapDepth=function(t,e,i){return i=void 0===i?1:io(i),ns(l_(t,e),i)},Ii.flatten=ja,Ii.flattenDeep=function(t){return(null==t?0:t.length)?ns(t,1/0):[]},Ii.flattenDepth=function(t,e){return(null==t?0:t.length)?ns(t,e=void 0===e?1:io(e)):[]},Ii.flip=function(t){return Yn(t,512)},Ii.flow=Fo,Ii.flowRight=Xo,Ii.fromPairs=function(t){for(var e=-1,i=null==t?0:t.length,s={};++e<i;){var n=t[e];s[n[0]]=n[1]}return s},Ii.functions=function(t){return null==t?[]:hs(t,bo(t))},Ii.functionsIn=function(t){return null==t?[]:hs(t,vo(t))},Ii.groupBy=r_,Ii.initial=function(t){return(null==t?0:t.length)?Fs(t,0,-1):[]},Ii.intersection=La,Ii.intersectionBy=Da,Ii.intersectionWith=Ca,Ii.invert=yo,Ii.invertBy=wo,Ii.invokeMap=h_,Ii.iteratee=zo,Ii.keyBy=c_,Ii.keys=bo,Ii.keysIn=vo,Ii.map=l_,Ii.mapKeys=function(t,e){var i={};return e=Jn(e,3),os(t,(function(t,s,n){Bi(i,e(t,s,n),t)})),i},Ii.mapValues=function(t,e){var i={};return e=Jn(e,3),os(t,(function(t,s,n){Bi(i,s,e(t,s,n))})),i},Ii.matches=function(t){return Is(Vi(t,1))},Ii.matchesProperty=function(t,e){return ks(t,Vi(e,1))},Ii.memoize=E_,Ii.merge=Eo,Ii.mergeWith=xo,Ii.method=Ko,Ii.methodOf=Vo,Ii.mixin=Jo,Ii.negate=x_,Ii.nthArg=function(t){return t=io(t),Cs((function(e){return Rs(e,t)}))},Ii.omit=To,Ii.omitBy=function(t,e){return So(t,x_(Jn(e)))},Ii.once=function(t){return g_(2,t)},Ii.orderBy=function(t,e,i,s){return null==t?[]:(O_(e)||(e=null==e?[]:[e]),O_(i=s?void 0:i)||(i=null==i?[]:[i]),Ps(t,e,i))},Ii.over=Qo,Ii.overArgs=T_,Ii.overEvery=Zo,Ii.overSome=tr,Ii.partial=A_,Ii.partialRight=S_,Ii.partition=d_,Ii.pick=Ao,Ii.pickBy=So,Ii.property=er,Ii.propertyOf=function(t){return function(e){return null==t?void 0:cs(t,e)}},Ii.pull=Ya,Ii.pullAll=Ua,Ii.pullAllBy=function(t,e,i){return t&&t.length&&e&&e.length?js(t,e,Jn(i,2)):t},Ii.pullAllWith=function(t,e,i){return t&&t.length&&e&&e.length?js(t,e,void 0,i):t},Ii.pullAt=Ga,Ii.range=ir,Ii.rangeRight=sr,Ii.rearg=I_,Ii.reject=function(t,e){return(O_(t)?ce:ss)(t,x_(Jn(e,3)))},Ii.remove=function(t,e){var i=[];if(!t||!t.length)return i;var s=-1,n=[],a=t.length;for(e=Jn(e,3);++s<a;){var _=t[s];e(_,s,t)&&(i.push(_),n.push(s))}return Ms(t,n),i},Ii.rest=function(t,e){if("function"!=typeof t)throw new wt(a);return Cs(t,e=void 0===e?e:io(e))},Ii.reverse=Wa,Ii.sampleSize=function(t,e,i){return e=(i?oa(t,e,i):void 0===e)?1:io(e),(O_(t)?Yi:Ys)(t,e)},Ii.set=function(t,e,i){return null==t?t:Us(t,e,i)},Ii.setWith=function(t,e,i,s){return s="function"==typeof s?s:void 0,null==t?t:Us(t,e,i,s)},Ii.shuffle=function(t){return(O_(t)?Ui:qs)(t)},Ii.slice=function(t,e,i){var s=null==t?0:t.length;return s?(i&&"number"!=typeof i&&oa(t,e,i)?(e=0,i=s):(e=null==e?0:io(e),i=void 0===i?s:io(i)),Fs(t,e,i)):[]},Ii.sortBy=u_,Ii.sortedUniq=function(t){return t&&t.length?Ks(t):[]},Ii.sortedUniqBy=function(t,e){return t&&t.length?Ks(t,Jn(e,2)):[]},Ii.split=function(t,e,i){return i&&"number"!=typeof i&&oa(t,e,i)&&(e=i=void 0),(i=void 0===i?4294967295:i>>>0)?(t=_o(t))&&("string"==typeof e||null!=e&&!z_(e))&&!(e=Js(e))&&Ye(t)?hn(Be(t),0,i):t.split(e,i):[]},Ii.spread=function(t,e){if("function"!=typeof t)throw new wt(a);return e=null==e?0:ai(io(e),0),Cs((function(i){var s=i[e],n=hn(i,0,e);return s&&pe(n,s),ae(t,this,n)}))},Ii.tail=function(t){var e=null==t?0:t.length;return e?Fs(t,1,e):[]},Ii.take=function(t,e,i){return t&&t.length?Fs(t,0,(e=i||void 0===e?1:io(e))<0?0:e):[]},Ii.takeRight=function(t,e,i){var s=null==t?0:t.length;return s?Fs(t,(e=s-(e=i||void 0===e?1:io(e)))<0?0:e,s):[]},Ii.takeRightWhile=function(t,e){return t&&t.length?tn(t,Jn(e,3),!1,!0):[]},Ii.takeWhile=function(t,e){return t&&t.length?tn(t,Jn(e,3)):[]},Ii.tap=function(t,e){return e(t),t},Ii.throttle=function(t,e,i){var s=!0,n=!0;if("function"!=typeof t)throw new wt(a);return W_(i)&&(s="leading"in i?!!i.leading:s,n="trailing"in i?!!i.trailing:n),f_(t,e,{leading:s,maxWait:e,trailing:n})},Ii.thru=e_,Ii.toArray=to,Ii.toPairs=Io,Ii.toPairsIn=ko,Ii.toPath=function(t){return O_(t)?ue(t,Aa):J_(t)?[t]:yn(Ta(_o(t)))},Ii.toPlainObject=ao,Ii.transform=function(t,e,i){var s=O_(t),n=s||D_(t)||$_(t);if(e=Jn(e,4),null==i){var a=t&&t.constructor;i=n?s?new a:[]:W_(t)&&Y_(a)?ki(Xt(t)):{}}return(n?oe:os)(t,(function(t,s,n){return e(i,t,s,n)})),i},Ii.unary=function(t){return m_(t,1)},Ii.union=qa,Ii.unionBy=Fa,Ii.unionWith=Xa,Ii.uniq=function(t){return t&&t.length?$s(t):[]},Ii.uniqBy=function(t,e){return t&&t.length?$s(t,Jn(e,2)):[]},Ii.uniqWith=function(t,e){return e="function"==typeof e?e:void 0,t&&t.length?$s(t,void 0,e):[]},Ii.unset=function(t,e){return null==t||Qs(t,e)},Ii.unzip=Ba,Ii.unzipWith=za,Ii.update=function(t,e,i){return null==t?t:Zs(t,e,_n(i))},Ii.updateWith=function(t,e,i,s){return s="function"==typeof s?s:void 0,null==t?t:Zs(t,e,_n(i),s)},Ii.values=No,Ii.valuesIn=function(t){return null==t?[]:Pe(t,vo(t))},Ii.without=Ka,Ii.words=Uo,Ii.wrap=function(t,e){return A_(_n(e),t)},Ii.xor=Va,Ii.xorBy=Ja,Ii.xorWith=$a,Ii.zip=Qa,Ii.zipObject=function(t,e){return nn(t||[],e||[],Wi)},Ii.zipObjectDeep=function(t,e){return nn(t||[],e||[],Us)},Ii.zipWith=Za,Ii.entries=Io,Ii.entriesIn=ko,Ii.extend=ro,Ii.extendWith=ho,Jo(Ii,Ii),Ii.add=_r,Ii.attempt=Go,Ii.camelCase=Ro,Ii.capitalize=Po,Ii.ceil=or,Ii.clamp=function(t,e,i){return void 0===i&&(i=e,e=void 0),void 0!==i&&(i=(i=no(i))==i?i:0),void 0!==e&&(e=(e=no(e))==e?e:0),Ki(no(t),e,i)},Ii.clone=function(t){return Vi(t,4)},Ii.cloneDeep=function(t){return Vi(t,5)},Ii.cloneDeepWith=function(t,e){return Vi(t,5,e="function"==typeof e?e:void 0)},Ii.cloneWith=function(t,e){return Vi(t,4,e="function"==typeof e?e:void 0)},Ii.conformsTo=function(t,e){return null==e||Ji(t,e,bo(e))},Ii.deburr=Oo,Ii.defaultTo=function(t,e){return null==t||t!=t?e:t},Ii.divide=rr,Ii.endsWith=function(t,e,i){t=_o(t),e=Js(e);var s=t.length,n=i=void 0===i?s:Ki(io(i),0,s);return(i-=e.length)>=0&&t.slice(i,n)==e},Ii.eq=k_,Ii.escape=function(t){return(t=_o(t))&&Y.test(t)?t.replace(C,Ce):t},Ii.escapeRegExp=function(t){return(t=_o(t))&&z.test(t)?t.replace(B,"\\$&"):t},Ii.every=function(t,e,i){var s=O_(t)?he:es;return i&&oa(t,e,i)&&(e=void 0),s(t,Jn(e,3))},Ii.find=n_,Ii.findIndex=Pa,Ii.findKey=function(t,e){return fe(t,Jn(e,3),os)},Ii.findLast=a_,Ii.findLastIndex=Oa,Ii.findLastKey=function(t,e){return fe(t,Jn(e,3),rs)},Ii.floor=hr,Ii.forEach=__,Ii.forEachRight=o_,Ii.forIn=function(t,e){return null==t?t:as(t,Jn(e,3),vo)},Ii.forInRight=function(t,e){return null==t?t:_s(t,Jn(e,3),vo)},Ii.forOwn=function(t,e){return t&&os(t,Jn(e,3))},Ii.forOwnRight=function(t,e){return t&&rs(t,Jn(e,3))},Ii.get=mo,Ii.gt=N_,Ii.gte=R_,Ii.has=function(t,e){return null!=t&&sa(t,e,ps)},Ii.hasIn=go,Ii.head=Ma,Ii.identity=Bo,Ii.includes=function(t,e,i,s){t=M_(t)?t:No(t),i=i&&!s?io(i):0;var n=t.length;return i<0&&(i=ai(n+i,0)),V_(t)?i<=n&&t.indexOf(e,i)>-1:!!n&&ve(t,e,i)>-1},Ii.indexOf=function(t,e,i){var s=null==t?0:t.length;if(!s)return-1;var n=null==i?0:io(i);return n<0&&(n=ai(s+n,0)),ve(t,e,n)},Ii.inRange=function(t,e,i){return e=eo(e),void 0===i?(i=e,e=0):i=eo(i),function(t,e,i){return t>=_i(e,i)&&t<ai(e,i)}(t=no(t),e,i)},Ii.invoke=fo,Ii.isArguments=P_,Ii.isArray=O_,Ii.isArrayBuffer=j_,Ii.isArrayLike=M_,Ii.isArrayLikeObject=L_,Ii.isBoolean=function(t){return!0===t||!1===t||q_(t)&&ds(t)==c},Ii.isBuffer=D_,Ii.isDate=C_,Ii.isElement=function(t){return q_(t)&&1===t.nodeType&&!B_(t)},Ii.isEmpty=function(t){if(null==t)return!0;if(M_(t)&&(O_(t)||"string"==typeof t||"function"==typeof t.splice||D_(t)||$_(t)||P_(t)))return!t.length;var e=ia(t);if(e==m||e==f)return!t.size;if(la(t))return!xs(t).length;for(var i in t)if(Tt.call(t,i))return!1;return!0},Ii.isEqual=function(t,e){return fs(t,e)},Ii.isEqualWith=function(t,e,i){var s=(i="function"==typeof i?i:void 0)?i(t,e):void 0;return void 0===s?fs(t,e,void 0,i):!!s},Ii.isError=H_,Ii.isFinite=function(t){return"number"==typeof t&&ii(t)},Ii.isFunction=Y_,Ii.isInteger=U_,Ii.isLength=G_,Ii.isMap=F_,Ii.isMatch=function(t,e){return t===e||bs(t,e,Qn(e))},Ii.isMatchWith=function(t,e,i){return i="function"==typeof i?i:void 0,bs(t,e,Qn(e),i)},Ii.isNaN=function(t){return X_(t)&&t!=+t},Ii.isNative=function(t){if(ca(t))throw new dt("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return vs(t)},Ii.isNil=function(t){return null==t},Ii.isNull=function(t){return null===t},Ii.isNumber=X_,Ii.isObject=W_,Ii.isObjectLike=q_,Ii.isPlainObject=B_,Ii.isRegExp=z_,Ii.isSafeInteger=function(t){return U_(t)&&t>=-9007199254740991&&t<=9007199254740991},Ii.isSet=K_,Ii.isString=V_,Ii.isSymbol=J_,Ii.isTypedArray=$_,Ii.isUndefined=function(t){return void 0===t},Ii.isWeakMap=function(t){return q_(t)&&ia(t)==E},Ii.isWeakSet=function(t){return q_(t)&&"[object WeakSet]"==ds(t)},Ii.join=function(t,e){return null==t?"":si.call(t,e)},Ii.kebabCase=jo,Ii.last=Ha,Ii.lastIndexOf=function(t,e,i){var s=null==t?0:t.length;if(!s)return-1;var n=s;return void 0!==i&&(n=(n=io(i))<0?ai(s+n,0):_i(n,s-1)),e==e?function(t,e,i){for(var s=i+1;s--;)if(t[s]===e)return s;return s}(t,e,n):be(t,xe,n,!0)},Ii.lowerCase=Mo,Ii.lowerFirst=Lo,Ii.lt=Q_,Ii.lte=Z_,Ii.max=function(t){return t&&t.length?is(t,Bo,us):void 0},Ii.maxBy=function(t,e){return t&&t.length?is(t,Jn(e,2),us):void 0},Ii.mean=function(t){return Te(t,Bo)},Ii.meanBy=function(t,e){return Te(t,Jn(e,2))},Ii.min=function(t){return t&&t.length?is(t,Bo,As):void 0},Ii.minBy=function(t,e){return t&&t.length?is(t,Jn(e,2),As):void 0},Ii.stubArray=nr,Ii.stubFalse=ar,Ii.stubObject=function(){return{}},Ii.stubString=function(){return""},Ii.stubTrue=function(){return!0},Ii.multiply=lr,Ii.nth=function(t,e){return t&&t.length?Rs(t,io(e)):void 0},Ii.noConflict=function(){return zt._===this&&(zt._=Nt),this},Ii.noop=$o,Ii.now=p_,Ii.pad=function(t,e,i){t=_o(t);var s=(e=io(e))?Xe(t):0;if(!e||s>=e)return t;var n=(e-s)/2;return On(Ze(n),i)+t+On(Qe(n),i)},Ii.padEnd=function(t,e,i){t=_o(t);var s=(e=io(e))?Xe(t):0;return e&&s<e?t+On(e-s,i):t},Ii.padStart=function(t,e,i){t=_o(t);var s=(e=io(e))?Xe(t):0;return e&&s<e?On(e-s,i)+t:t},Ii.parseInt=function(t,e,i){return i||null==e?e=0:e&&(e=+e),ri(_o(t).replace(V,""),e||0)},Ii.random=function(t,e,i){if(i&&"boolean"!=typeof i&&oa(t,e,i)&&(e=i=void 0),void 0===i&&("boolean"==typeof e?(i=e,e=void 0):"boolean"==typeof t&&(i=t,t=void 0)),void 0===t&&void 0===e?(t=0,e=1):(t=eo(t),void 0===e?(e=t,t=0):e=eo(e)),t>e){var s=t;t=e,e=s}if(i||t%1||e%1){var n=hi();return _i(t+n*(e-t+qt("1e-"+((n+"").length-1))),e)}return Ls(t,e)},Ii.reduce=function(t,e,i){var s=O_(t)?me:Ie,n=arguments.length<3;return s(t,Jn(e,4),i,n,Zi)},Ii.reduceRight=function(t,e,i){var s=O_(t)?ge:Ie,n=arguments.length<3;return s(t,Jn(e,4),i,n,ts)},Ii.repeat=function(t,e,i){return e=(i?oa(t,e,i):void 0===e)?1:io(e),Ds(_o(t),e)},Ii.replace=function(){var t=arguments,e=_o(t[0]);return t.length<3?e:e.replace(t[1],t[2])},Ii.result=function(t,e,i){var s=-1,n=(e=on(e,t)).length;for(n||(n=1,t=void 0);++s<n;){var a=null==t?void 0:t[Aa(e[s])];void 0===a&&(s=n,a=i),t=Y_(a)?a.call(t):a}return t},Ii.round=dr,Ii.runInContext=t,Ii.sample=function(t){return(O_(t)?Hi:Hs)(t)},Ii.size=function(t){if(null==t)return 0;if(M_(t))return V_(t)?Xe(t):t.length;var e=ia(t);return e==m||e==f?t.size:xs(t).length},Ii.snakeCase=Do,Ii.some=function(t,e,i){var s=O_(t)?ye:Xs;return i&&oa(t,e,i)&&(e=void 0),s(t,Jn(e,3))},Ii.sortedIndex=function(t,e){return Bs(t,e)},Ii.sortedIndexBy=function(t,e,i){return zs(t,e,Jn(i,2))},Ii.sortedIndexOf=function(t,e){var i=null==t?0:t.length;if(i){var s=Bs(t,e);if(s<i&&k_(t[s],e))return s}return-1},Ii.sortedLastIndex=function(t,e){return Bs(t,e,!0)},Ii.sortedLastIndexBy=function(t,e,i){return zs(t,e,Jn(i,2),!0)},Ii.sortedLastIndexOf=function(t,e){if(null==t?0:t.length){var i=Bs(t,e,!0)-1;if(k_(t[i],e))return i}return-1},Ii.startCase=Co,Ii.startsWith=function(t,e,i){return t=_o(t),i=null==i?0:Ki(io(i),0,t.length),e=Js(e),t.slice(i,i+e.length)==e},Ii.subtract=ur,Ii.sum=function(t){return t&&t.length?ke(t,Bo):0},Ii.sumBy=function(t,e){return t&&t.length?ke(t,Jn(e,2)):0},Ii.template=function(t,e,i){var s=Ii.templateSettings;i&&oa(t,e,i)&&(e=void 0),t=_o(t),e=ho({},e,s,Un);var n,a,_=ho({},e.imports,s.imports,Un),o=bo(_),r=Pe(_,o),h=0,c=e.interpolate||ct,l="__p += '",d=gt((e.escape||ct).source+"|"+c.source+"|"+(c===W?it:ct).source+"|"+(e.evaluate||ct).source+"|$","g"),u="//# sourceURL="+(Tt.call(e,"sourceURL")?(e.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Yt+"]")+"\n";t.replace(d,(function(e,i,s,_,o,r){return s||(s=_),l+=t.slice(h,r).replace(lt,He),i&&(n=!0,l+="' +\n__e("+i+") +\n'"),o&&(a=!0,l+="';\n"+o+";\n__p += '"),s&&(l+="' +\n((__t = ("+s+")) == null ? '' : __t) +\n'"),h=r+e.length,e})),l+="';\n";var p=Tt.call(e,"variable")&&e.variable;p||(l="with (obj) {\n"+l+"\n}\n"),l=(a?l.replace(j,""):l).replace(M,"$1").replace(L,"$1;"),l="function("+(p||"obj")+") {\n"+(p?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(n?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+l+"return __p\n}";var m=Go((function(){return ut(o,u+"return "+l).apply(void 0,r)}));if(m.source=l,H_(m))throw m;return m},Ii.times=function(t,e){if((t=io(t))<1||t>9007199254740991)return[];var i=4294967295,s=_i(t,4294967295);t-=4294967295;for(var n=Ne(s,e=Jn(e));++i<t;)e(i);return n},Ii.toFinite=eo,Ii.toInteger=io,Ii.toLength=so,Ii.toLower=function(t){return _o(t).toLowerCase()},Ii.toNumber=no,Ii.toSafeInteger=function(t){return t?Ki(io(t),-9007199254740991,9007199254740991):0===t?t:0},Ii.toString=_o,Ii.toUpper=function(t){return _o(t).toUpperCase()},Ii.trim=function(t,e,i){if((t=_o(t))&&(i||void 0===e))return t.replace(K,"");if(!t||!(e=Js(e)))return t;var s=Be(t),n=Be(e);return hn(s,je(s,n),Me(s,n)+1).join("")},Ii.trimEnd=function(t,e,i){if((t=_o(t))&&(i||void 0===e))return t.replace(J,"");if(!t||!(e=Js(e)))return t;var s=Be(t);return hn(s,0,Me(s,Be(e))+1).join("")},Ii.trimStart=function(t,e,i){if((t=_o(t))&&(i||void 0===e))return t.replace(V,"");if(!t||!(e=Js(e)))return t;var s=Be(t);return hn(s,je(s,Be(e))).join("")},Ii.truncate=function(t,e){var i=30,s="...";if(W_(e)){var n="separator"in e?e.separator:n;i="length"in e?io(e.length):i,s="omission"in e?Js(e.omission):s}var a=(t=_o(t)).length;if(Ye(t)){var _=Be(t);a=_.length}if(i>=a)return t;var o=i-Xe(s);if(o<1)return s;var r=_?hn(_,0,o).join(""):t.slice(0,o);if(void 0===n)return r+s;if(_&&(o+=r.length-o),z_(n)){if(t.slice(o).search(n)){var h,c=r;for(n.global||(n=gt(n.source,_o(st.exec(n))+"g")),n.lastIndex=0;h=n.exec(c);)var l=h.index;r=r.slice(0,void 0===l?o:l)}}else if(t.indexOf(Js(n),o)!=o){var d=r.lastIndexOf(n);d>-1&&(r=r.slice(0,d))}return r+s},Ii.unescape=function(t){return(t=_o(t))&&H.test(t)?t.replace(D,ze):t},Ii.uniqueId=function(t){var e=++At;return _o(t)+e},Ii.upperCase=Ho,Ii.upperFirst=Yo,Ii.each=__,Ii.eachRight=o_,Ii.first=Ma,Jo(Ii,(cr={},os(Ii,(function(t,e){Tt.call(Ii.prototype,e)||(cr[e]=t)})),cr),{chain:!1}),Ii.VERSION="4.17.20",oe(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Ii[t].placeholder=Ii})),oe(["drop","take"],(function(t,e){Pi.prototype[t]=function(i){i=void 0===i?1:ai(io(i),0);var s=this.__filtered__&&!e?new Pi(this):this.clone();return s.__filtered__?s.__takeCount__=_i(i,s.__takeCount__):s.__views__.push({size:_i(i,4294967295),type:t+(s.__dir__<0?"Right":"")}),s},Pi.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),oe(["filter","map","takeWhile"],(function(t,e){var i=e+1,s=1==i||3==i;Pi.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:Jn(t,3),type:i}),e.__filtered__=e.__filtered__||s,e}})),oe(["head","last"],(function(t,e){var i="take"+(e?"Right":"");Pi.prototype[t]=function(){return this[i](1).value()[0]}})),oe(["initial","tail"],(function(t,e){var i="drop"+(e?"":"Right");Pi.prototype[t]=function(){return this.__filtered__?new Pi(this):this[i](1)}})),Pi.prototype.compact=function(){return this.filter(Bo)},Pi.prototype.find=function(t){return this.filter(t).head()},Pi.prototype.findLast=function(t){return this.reverse().find(t)},Pi.prototype.invokeMap=Cs((function(t,e){return"function"==typeof t?new Pi(this):this.map((function(i){return ys(i,t,e)}))})),Pi.prototype.reject=function(t){return this.filter(x_(Jn(t)))},Pi.prototype.slice=function(t,e){t=io(t);var i=this;return i.__filtered__&&(t>0||e<0)?new Pi(i):(t<0?i=i.takeRight(-t):t&&(i=i.drop(t)),void 0!==e&&(i=(e=io(e))<0?i.dropRight(-e):i.take(e-t)),i)},Pi.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Pi.prototype.toArray=function(){return this.take(4294967295)},os(Pi.prototype,(function(t,e){var i=/^(?:filter|find|map|reject)|While$/.test(e),s=/^(?:head|last)$/.test(e),n=Ii[s?"take"+("last"==e?"Right":""):e],a=s||/^find/.test(e);n&&(Ii.prototype[e]=function(){var e=this.__wrapped__,_=s?[1]:arguments,o=e instanceof Pi,r=_[0],h=o||O_(e),c=function(t){var e=n.apply(Ii,pe([t],_));return s&&l?e[0]:e};h&&i&&"function"==typeof r&&1!=r.length&&(o=h=!1);var l=this.__chain__,d=!!this.__actions__.length,u=a&&!l,p=o&&!d;if(!a&&h){e=p?e:new Pi(this);var m=t.apply(e,_);return m.__actions__.push({func:e_,args:[c],thisArg:void 0}),new Ri(m,l)}return u&&p?t.apply(this,_):(m=this.thru(c),u?s?m.value()[0]:m.value():m)})})),oe(["pop","push","shift","sort","splice","unshift"],(function(t){var e=ft[t],i=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",s=/^(?:pop|shift)$/.test(t);Ii.prototype[t]=function(){var t=arguments;if(s&&!this.__chain__){var n=this.value();return e.apply(O_(n)?n:[],t)}return this[i]((function(i){return e.apply(O_(i)?i:[],t)}))}})),os(Pi.prototype,(function(t,e){var i=Ii[e];if(i){var s=i.name+"";Tt.call(wi,s)||(wi[s]=[]),wi[s].push({name:e,func:i})}})),wi[kn(void 0,2).name]=[{name:"wrapper",func:void 0}],Pi.prototype.clone=function(){var t=new Pi(this.__wrapped__);return t.__actions__=yn(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=yn(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=yn(this.__views__),t},Pi.prototype.reverse=function(){if(this.__filtered__){var t=new Pi(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Pi.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,i=O_(t),s=e<0,n=i?t.length:0,a=function(t,e,i){var s=-1,n=i.length;for(;++s<n;){var a=i[s],_=a.size;switch(a.type){case"drop":t+=_;break;case"dropRight":e-=_;break;case"take":e=_i(e,t+_);break;case"takeRight":t=ai(t,e-_)}}return{start:t,end:e}}(0,n,this.__views__),_=a.start,o=a.end,r=o-_,h=s?o:_-1,c=this.__iteratees__,l=c.length,d=0,u=_i(r,this.__takeCount__);if(!i||!s&&n==r&&u==r)return en(t,this.__actions__);var p=[];t:for(;r--&&d<u;){for(var m=-1,g=t[h+=e];++m<l;){var y=c[m],w=y.iteratee,f=y.type,b=w(g);if(2==f)g=b;else if(!b){if(1==f)continue t;break t}}p[d++]=g}return p},Ii.prototype.at=i_,Ii.prototype.chain=function(){return t_(this)},Ii.prototype.commit=function(){return new Ri(this.value(),this.__chain__)},Ii.prototype.next=function(){void 0===this.__values__&&(this.__values__=to(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?void 0:this.__values__[this.__index__++]}},Ii.prototype.plant=function(t){for(var e,i=this;i instanceof Ni;){var s=Ia(i);s.__index__=0,s.__values__=void 0,e?n.__wrapped__=s:e=s;var n=s;i=i.__wrapped__}return n.__wrapped__=t,e},Ii.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Pi){var e=t;return this.__actions__.length&&(e=new Pi(this)),(e=e.reverse()).__actions__.push({func:e_,args:[Wa],thisArg:void 0}),new Ri(e,this.__chain__)}return this.thru(Wa)},Ii.prototype.toJSON=Ii.prototype.valueOf=Ii.prototype.value=function(){return en(this.__wrapped__,this.__actions__)},Ii.prototype.first=Ii.prototype.head,Qt&&(Ii.prototype[Qt]=function(){return this}),Ii}();zt._=Ke,void 0===(n=function(){return Ke}.call(e,i,e,s))||(s.exports=n)}).call(this)}).call(this,i(36),i(37)(t))},function(t,e,i){"use strict";var s;Object.defineProperty(e,"__esModule",{value:!0}),e.CursorManager=e.PointVariants=e.WiggleVariants=void 0,function(t){t[t.NORMAL=0]="NORMAL"}(e.WiggleVariants||(e.WiggleVariants={})),function(t){t[t.SHORT=0]="SHORT",t[t.NORMAL=1]="NORMAL",t[t.LONG=2]="LONG"}(s=e.PointVariants||(e.PointVariants={}));class n{constructor(t){this.game=t,this.group=this.game.add.group(),this.group.visible=!1,this.group.x=0,this.group.y=0,this.cursor=this.group.create(0,0,"cursor"),this.cursor.anchor.x=.5,this.active_tween=null,this.cursor_default_pos={x:0,y:0},this.cursor_flipped=!1}init_tween(t,e){switch(this.clear_tweens(),this.group.visible||this.show(),t.type){case n.WIGGLE.KEY:let e=n.WIGGLE.X1,i=n.WIGGLE.X2,a=n.WIGGLE.Y1,_=n.WIGGLE.Y2,o=t.time?t.time:n.WIGGLE.DEFAULT_TIME;this.active_tween=this.game.add.tween(this.cursor).to({x:this.cursor.x+e,y:this.cursor.y+a},o,Phaser.Easing.Linear.None).to({x:this.cursor.x+i,y:this.cursor.y+_},o,Phaser.Easing.Linear.None).to({x:this.cursor.x+e,y:this.cursor.y+a},o,Phaser.Easing.Linear.None).to({x:this.cursor.x,y:this.cursor.y},o,Phaser.Easing.Linear.None).loop();break;case n.POINT.KEY:void 0===t.variant&&(t.variant=s.NORMAL);let r=n.POINT[t.variant].X,h=n.POINT[t.variant].Y,c=t.time?t.time:n.POINT.DEFAULT_TIME;this.cursor_flipped&&(r*=-1),this.active_tween=this.game.add.tween(this.cursor).to({x:this.cursor.x+r,y:this.cursor.y+h},c,Phaser.Easing.Linear.None).to({x:this.cursor.x,y:this.cursor.y},c,Phaser.Easing.Linear.None).loop()}this.bring_to_top(),this.active_tween&&this.active_tween.start(),e&&e()}move_to(t,e,i){this.group.visible||this.show(),this.bring_to_top();const s=!!e&&(void 0!==e.flip&&e.flip),a=!e||(void 0===e.animate||e.animate),_=e?e.tween_config:void 0,o=e&&void 0!==e.move_time?e.move_time:n.DEFAULT_MOVE_TIME;if(s!==this.cursor_flipped&&this.flip_cursor(),_||this.clear_tweens(),t.x+=n.X_SHIFT,this.cursor_default_pos={x:t.x+this.game.camera.x,y:t.y+this.game.camera.y},a){this.game.add.tween(this.cursor).to({x:t.x+this.game.camera.x,y:t.y+this.game.camera.y},o,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{_?this.init_tween(_,i):i&&i()},this)}else this.cursor.x=t.x+this.game.camera.x,this.cursor.y=t.y+this.game.camera.y,_?this.init_tween(_,i):i&&i()}clear_tweens(){this.active_tween&&this.game.tweens.remove(this.active_tween),this.active_tween=null,this.cursor.x=this.cursor_default_pos.x,this.cursor.y=this.cursor_default_pos.y}flip_cursor(){this.clear_tweens(),this.cursor.scale.x*=-1,this.cursor_flipped=!this.cursor_flipped}bring_to_top(){this.game.world.bringToTop(this.group)}hide(){this.group.visible=!1}show(){this.group.visible=!0}destroy(){this.group.remove(this.cursor,!0),this.group=null,this.cursor=null,this.active_tween=null}}e.CursorManager=n,n.CursorTweens={WIGGLE:"wiggle",POINT:"point"},n.WIGGLE={KEY:n.CursorTweens.WIGGLE,X1:-4,Y1:4,X2:-8,Y2:0,DEFAULT_TIME:Phaser.Timer.QUARTER>>1},n.POINT={KEY:n.CursorTweens.POINT,0:{X:-2,Y:2},1:{X:-4,Y:4},2:{X:-6,Y:6},DEFAULT_TIME:Phaser.Timer.QUARTER>>1},n.DEFAULT_MOVE_TIME=Phaser.Timer.QUARTER>>1,n.X_SHIFT=8},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Player=e.ordered_main_stats=e.ordered_status_menu=e.ordered_status_battle=e.on_remove_status_msg=e.on_catch_status_msg=e.effect_type_stat=e.main_stats=e.permanent_status=e.temporary_status=e.fighter_types=void 0;const s=i(9),n=i(0);var a,_,o,r;!function(t){t[t.ALLY=1]="ALLY",t[t.ENEMY=2]="ENEMY"}(a=e.fighter_types||(e.fighter_types={})),function(t){t.DELUSION="delusion",t.STUN="stun",t.SLEEP="sleep",t.SEAL="seal",t.DEATH_CURSE="death_curse"}(_=e.temporary_status||(e.temporary_status={})),function(t){t.DOWNED="downed",t.POISON="poison",t.VENOM="venom",t.EQUIP_CURSE="equip_curse",t.HAUNT="haunt"}(o=e.permanent_status||(e.permanent_status={})),function(t){t.MAX_HP="max_hp",t.CURRENT_HP="current_hp",t.MAX_PP="max_pp",t.CURRENT_PP="current_pp",t.ATTACK="atk",t.DEFENSE="def",t.AGILITY="agi",t.LUCK="luk"}(r=e.main_stats||(e.main_stats={})),e.effect_type_stat={[s.effect_types.MAX_HP]:r.MAX_HP,[s.effect_types.MAX_PP]:r.MAX_PP,[s.effect_types.ATTACK]:r.ATTACK,[s.effect_types.DEFENSE]:r.DEFENSE,[s.effect_types.AGILITY]:r.AGILITY,[s.effect_types.LUCK]:r.LUCK,[s.effect_types.CURRENT_HP]:r.CURRENT_HP,[s.effect_types.CURRENT_PP]:r.CURRENT_PP},e.on_catch_status_msg={[_.DELUSION]:t=>t.name+" is wrapped in delusion!",[_.STUN]:t=>t.name+" has been stunned!",[_.SLEEP]:t=>t.name+" falls asleep!",[_.SEAL]:t=>t.name+"'s Psynergy has been sealed!",[_.DEATH_CURSE]:t=>`The Spirit of Death embraces ${t.name}!`,[o.DOWNED]:t=>t.fighter_type===a.ALLY?t.name+" was downed...":`You felled ${t.name}!`,[o.POISON]:t=>t.name+" is infected with poison!",[o.VENOM]:t=>t.name+" is infected with deadly poison!",[o.HAUNT]:t=>`An evil spirit grips ${t.name}!`},e.on_remove_status_msg={[_.DELUSION]:t=>t.name+" sees clearly once again!",[_.STUN]:t=>t.name+" is no longer stunned!",[_.SLEEP]:t=>t.name+" wakes from slumber!",[_.SEAL]:t=>t.name+"'s Psynergy seal is gone!",[o.DOWNED]:t=>t.name+"'s has been revived!",[o.POISON]:t=>`The poison is purged from ${t.name}!`,[o.VENOM]:t=>`The venom is purged from ${t.name}!`},e.ordered_status_battle=[o.DOWNED,o.EQUIP_CURSE,_.DEATH_CURSE,o.POISON,o.VENOM,_.SEAL,_.STUN,_.SLEEP,o.HAUNT,_.DELUSION],e.ordered_status_menu=[o.DOWNED,o.POISON,o.VENOM,o.EQUIP_CURSE,o.HAUNT],e.ordered_main_stats=[r.MAX_HP,r.MAX_PP,r.ATTACK,r.DEFENSE,r.AGILITY,r.LUCK];e.Player=class{constructor(t,e){this.key_name=t,this.name=e,this.temporary_status=new Set,this.permanent_status=new Set,this.effects=[],this.init_effect_turns_count()}init_effect_turns_count(){this.effect_turns_count={[_.DELUSION]:0,[_.STUN]:0,[_.SLEEP]:0,[_.SEAL]:0,[_.DEATH_CURSE]:0,[s.effect_types.MAX_HP]:0,[s.effect_types.MAX_PP]:0,[s.effect_types.ATTACK]:0,[s.effect_types.DEFENSE]:0,[s.effect_types.AGILITY]:0,[s.effect_types.LUCK]:0,[s.effect_types.POWER]:{},[s.effect_types.RESIST]:{}};for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t];this.effect_turns_count[s.effect_types.POWER][e]=0,this.effect_turns_count[s.effect_types.RESIST][e]=0}}get_effect_turns_key(t){switch(t.type){case s.effect_types.TEMPORARY_STATUS:return t.status_key_name;case s.effect_types.MAX_HP:case s.effect_types.MAX_PP:case s.effect_types.ATTACK:case s.effect_types.DEFENSE:case s.effect_types.AGILITY:case s.effect_types.LUCK:return t.type;case s.effect_types.POWER:case s.effect_types.RESIST:return t.type+"_"+t.attribute}return null}get_effect_turns_count(t){switch(t.type){case s.effect_types.TEMPORARY_STATUS:return this.effect_turns_count[t.status_key_name];case s.effect_types.MAX_HP:case s.effect_types.MAX_PP:case s.effect_types.ATTACK:case s.effect_types.DEFENSE:case s.effect_types.AGILITY:case s.effect_types.LUCK:return this.effect_turns_count[t.type];case s.effect_types.POWER:case s.effect_types.RESIST:return this.effect_turns_count[t.type][t.attribute]}return null}set_effect_turns_count(t,e=-1,i=!0){switch(t.type){case s.effect_types.TEMPORARY_STATUS:this.effect_turns_count[t.status_key_name]=i?this.effect_turns_count[t.status_key_name]+e:e;case s.effect_types.MAX_HP:case s.effect_types.MAX_PP:case s.effect_types.ATTACK:case s.effect_types.DEFENSE:case s.effect_types.AGILITY:case s.effect_types.LUCK:return this.effect_turns_count[t.type]=i?this.effect_turns_count[t.type]+e:e;case s.effect_types.POWER:case s.effect_types.RESIST:return this.effect_turns_count[t.type][t.attribute]=i?this.effect_turns_count[t.type][t.attribute]+e:e}}add_effect(t,e,i=!1){let n,a=new s.Effect(t.type,t.quantity,t.operator,e,t.quantity_is_absolute,t.rate,t.chance,t.attribute,t.add_status,t.status_key_name,t.turns_quantity,t.variation_on_final_result,t.damage_formula_key_name,t.usage,t.on_caster,t.relative_to_property,t.sub_effect,t.effect_msg,t.show_msg,this);return this.effects.push(a),i&&(n=a.apply_effect()),{effect:a,changes:n}}remove_effect(t,e=!1){this.effects=this.effects.filter(e=>e!==t),e&&t.apply_effect()}add_permanent_status(t){this.permanent_status.add(t)}remove_permanent_status(t){this.permanent_status.delete(t)}has_permanent_status(t){return this.permanent_status.has(t)}add_temporary_status(t){this.temporary_status.add(t)}remove_temporary_status(t){this.temporary_status.delete(t)}has_temporary_status(t){return this.temporary_status.has(t)}is_paralyzed(){return this.temporary_status.has(_.SLEEP)||this.temporary_status.has(_.STUN)}is_poisoned(){return this.permanent_status.has(o.POISON)?o.POISON:!!this.permanent_status.has(o.VENOM)&&o.VENOM}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TileEvent=e.event_types=void 0;const s=i(0),n=i(3);!function(t){t.CLIMB="climb",t.SPEED="speed",t.TELEPORT="teleport",t.JUMP="jump",t.STEP="step",t.COLLISION="collision",t.SLIDER="slider"}(e.event_types||(e.event_types={}));class a{constructor(t,e,i,n,_,o,r,h,c,l){this.game=t,this.data=e,this.type=i,this.x=n,this.y=_,this.location_key=a.get_location_key(this.x,this.y),this.id=a.id_incrementer++,this.activation_collision_layers=Array.isArray(r)?r:[r],void 0!==o&&"all"!==o||(o=s.get_directions(!0)),this.activation_directions=Array.isArray(o)?o:[o],this.dynamic=h,this.active=Array.isArray(c)?c:new Array(this.activation_directions.length).fill(void 0===c||c),this.origin_interactable_object=void 0===l?null:l,a.events[this.id]=this}is_active(t){const e=s.split_direction(t);for(let t=0;t<e.length;++t)if(this.active[this.activation_directions.indexOf(e[t])])return!0;return!1}activate_at(t){this.active[this.activation_directions.indexOf(t)]=!0}deactivate_at(t){this.active[this.activation_directions.indexOf(t)]=!1}activate(){this.active=this.active.map(()=>!0)}deactivate(){this.active=this.active.map(()=>!1)}check_position(){return this.data.hero.tile_x_pos===this.x&&this.data.hero.tile_y_pos===this.y}static get_location_key(t,e){return t.toString()+"_"+e.toString()}static get_event_by_id(t,e){return n.find(t,{id:e})}static get_event(t){return a.events[t]}static reset(){a.id_incrementer=0,a.events={}}}e.TileEvent=a,a.reset()},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Djinn=e.djinn_font_colors=e.djinn_status=void 0;const s=i(1),n=i(0),a=i(3);var _;!function(t){t.SET="set",t.STANDBY="standby",t.RECOVERY="recovery",t.ANY="any"}(_=e.djinn_status||(e.djinn_status={})),e.djinn_font_colors={[_.RECOVERY]:s.YELLOW_FONT_COLOR,[_.STANDBY]:s.RED_FONT_COLOR,[_.SET]:s.DEFAULT_FONT_COLOR};e.Djinn=class{constructor(t,e,i,s,n,a,o,r,h,c,l,d){this.key_name=t,this.name=e,this.description=i,this.element=s,this.ability_key_name=n,this.hp_boost=a,this.pp_boost=o,this.atk_boost=r,this.def_boost=h,this.agi_boost=c,this.luk_boost=l,this.status=_.SET,this.index=d,this.recovery_turn=0}set_status(t,e){this.status=t,e.update_elemental_attributes(),e.update_class(),e.update_attributes(),e.update_abilities()}static has_standby_djinn(t,e){return a.some(e.map(t=>t.djinni).map(e=>e.filter(e=>t[e].status===_.STANDBY).length))}static get_standby_djinni(t,e){let i=a.mapValues(a.groupBy(e.map(t=>t.djinni).flat(),e=>t[e].element),e=>e.filter(e=>t[e].status===_.STANDBY).length);for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t];e in i||(i[e]=0)}return i}static set_to_recovery(t,e,i){let s=Object.assign({},i),n=!1;for(let i=0;i<e.length;++i){const o=e[i],r=o.djinni;let h=1;for(let e=0;e<r.length;++e){const i=t[r[e]];if(i.status===_.STANDBY&&(s[i.element]>0&&(i.recovery_turn=h,++h,i.set_status(_.RECOVERY,o),--s[i.element],!a.some(s,Boolean)))){n=!0;break}}if(n)break}}}},function(t,e,i){"use strict";var s;Object.defineProperty(e,"__esModule",{value:!0}),e.Item=e.use_types=e.item_types=void 0,function(t){t.WEAPONS="weapons",t.ARMOR="armor",t.CHEST_PROTECTOR="chest_protector",t.HEAD_PROTECTOR="head_protector",t.LEG_PROTECTOR="leg_protector",t.ABILITY_GRANTOR="ability_grantor",t.CLASS_CHANGER="class_changer",t.RING="ring",t.UNDERWEAR="underwear",t.GENERAL_ITEM="general_item"}(s=e.item_types||(e.item_types={})),function(t){t.MULTIPLE_USES="multiple_uses",t.SINGLE_USE="single_use",t.BREAKS_WHEN_USE="breaks_when_use",t.NO_USE="no_use"}(e.use_types||(e.use_types={}));class n{constructor(t,e,i,n,a,_,o,r,h,c,l,d,u,p,m,g,y,w){this.key_name=t,this.name=e,this.type=i,this.description=n,this.use_type=a,this.curses_when_equipped=_,this.cant_be_removed=o,this.rare_item=r,this.important_item=h,this.carry_up_to_30=c,this.effects=l,this.attribute=d,this.unleash_ability=u,this.unleash_rate=p,this.use_ability=m,this.equipable_chars=g,this.price=y,this.granted_ability=w,this.equipable=this.type!==s.GENERAL_ITEM}}e.Item=n,n.BREAKS_CHANCE=1/8},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Effect=e.effect_msg=e.effect_usages=e.effect_operators=e.effect_names=e.effect_types=void 0;const s=i(5),n=i(0);var a,_,o;!function(t){t.MAX_HP="max_hp",t.MAX_PP="max_pp",t.ATTACK="attack",t.DEFENSE="defense",t.AGILITY="agility",t.LUCK="luck",t.POWER="power",t.RESIST="resist",t.CURRENT_HP="current_hp",t.CURRENT_PP="current_pp",t.HP_RECOVERY="hp_recovery",t.PP_RECOVERY="pp_recovery",t.CRITICALS="criticals",t.COUNTER_STRIKE="counter_strike",t.TEMPORARY_STATUS="temporary_status",t.PERMANENT_STATUS="permanent_status",t.TURNS="turns",t.ENCOUNTERS="encounters",t.FLEE="flee",t.END_THE_ROUND="end_the_round",t.ABILITY_POWER="ability_power",t.SET_DJINN="set_djinn",t.DAMAGE_MODIFIER="damage_modifier",t.DAMAGE_INPUT="damage_input"}(a=e.effect_types||(e.effect_types={})),e.effect_names={[a.MAX_HP]:"HP",[a.MAX_PP]:"PP",[a.ATTACK]:"Attack",[a.DEFENSE]:"Defense",[a.AGILITY]:"Agility",[a.LUCK]:"Luck",[a.POWER]:"Power",[a.RESIST]:"Resist"},function(t){t.PLUS="plus",t.MINUS="minus",t.TIMES="times",t.DIVIDE="divide"}(_=e.effect_operators||(e.effect_operators={})),function(t){t.NOT_APPLY="not_apply",t.ON_USE="on_use",t.ON_TAKE="on_take",t.BATTLE_ROUND_START="battle_round_start",t.BATTLE_ROUND_END="battle_round_end",t.PLAYER_TURN_START="player_turn_start",t.PLAYER_TURN_END="player_turn_end"}(o=e.effect_usages||(e.effect_usages={})),e.effect_msg={aura:t=>`A protective aura encircles ${t.name}!`,double:()=>"And it got doubled!"};class r{constructor(t,e,i,s,a,_,r,h,c,l,d,u,p,m,g,y,w,f,b,v){this.type=t,this.quantity=e,this.operator=i,this.effect_owner_instance=s,this.quantity_is_absolute=void 0!==a&&a,this.rate=void 0===_?1:_,this.chance=void 0===r?1:r,this.attribute=void 0===h?n.elements.NO_ELEMENT:h,this.add_status=c,this.status_key_name=l,this.turns_quantity=d,this.turn_count=d,this.variation_on_final_result=void 0!==u&&u,this.damage_formula_key_name=p,this.usage=void 0===m?o.NOT_APPLY:m,this.on_caster=void 0!==g&&g,this.relative_to_property=y,this.effect_msg=f,this.show_msg=void 0===b||b,this.char=v,this.sub_effect=w,void 0!==this.sub_effect&&this.init_sub_effect()}static apply_operator(t,e,i){switch(i){case _.PLUS:return t+e;case _.MINUS:return t-e;case _.TIMES:return t*e;case _.DIVIDE:return t/e}}init_sub_effect(){this.sub_effect.quantity_is_absolute=void 0!==this.sub_effect.quantity_is_absolute&&this.sub_effect.quantity_is_absolute,this.sub_effect.rate=void 0===this.sub_effect.rate?1:this.sub_effect.rate,this.sub_effect.chance=void 0===this.sub_effect.chance?1:this.sub_effect.chance,this.sub_effect.attribute=void 0===this.sub_effect.attribute?n.elements.NO_ELEMENT:this.sub_effect.attribute,this.sub_effect.variation_on_final_result=void 0!==this.sub_effect.variation_on_final_result&&this.sub_effect.variation_on_final_result,this.sub_effect.usage=void 0===this.sub_effect.usage?o.NOT_APPLY:this.sub_effect.usage,this.sub_effect.on_caster=void 0!==this.sub_effect.on_caster&&this.sub_effect.on_caster}apply_general_value(t,e){const i=void 0!==t?this.char[t]:e;if(Math.random()>=this.chance)return{before:i,after:i};let s;if(this.quantity_is_absolute)void 0!==t&&(this.char[t]=this.quantity),s=this.quantity;else{let i,a=this.quantity;a*=this.rate,this.variation_on_final_result&&(a+=n.variation()),i=void 0!==t?this.char[void 0!==this.relative_to_property?this.relative_to_property:t]:e;const _=0|r.apply_operator(i,a,this.operator);void 0!==t&&(this.char[t]=_),s=_}return{before:i,after:s}}apply_subeffect(t,e){return Math.random()<this.sub_effect.chance&&(this.sub_effect.quantity_is_absolute?this.char[t]=e:(e*=this.sub_effect.rate,this.sub_effect.variation_on_final_result&&(e+=n.variation()),this.char[t]=0|r.apply_operator(this.char[t],e,this.sub_effect.operator))),this.char[t]}static preview_value_applied(t,e){if(t.quantity_is_absolute)return t.quantity;{let i=t.quantity;return t.rate||(t.rate=1),i*=t.rate,i|=0,r.apply_operator(e,i,t.operator)}}check_caps(t,e,i,s){this.char[t]>this.char[e]?(s&&(s.after=this.char[e]),this.char[t]=this.char[e]):this.char[t]<i&&(s&&(s.after=i),this.char[t]=i)}apply_effect(t){switch(this.type){case a.MAX_HP:case a.MAX_PP:case a.ATTACK:case a.DEFENSE:case a.AGILITY:case a.LUCK:return this.apply_general_value(s.effect_type_stat[this.type]);case a.HP_RECOVERY:return this.apply_general_value("hp_recovery");case a.PP_RECOVERY:return this.apply_general_value("pp_recovery");case a.CURRENT_HP:const e=this.apply_general_value(s.main_stats.CURRENT_HP);return this.check_caps(s.main_stats.CURRENT_HP,s.main_stats.MAX_HP,0,e),e;case a.CURRENT_PP:const i=this.apply_general_value(s.main_stats.CURRENT_PP);return this.check_caps(s.main_stats.CURRENT_PP,s.main_stats.MAX_PP,0,i),i;case a.POWER:return this.apply_general_value(this.attribute+"_power_current");case a.RESIST:return this.apply_general_value(this.attribute+"_resist_current");case a.TURNS:return this.turn_count=1,this.apply_general_value("turns");case a.PERMANENT_STATUS:return void(this.add_status?this.char.add_permanent_status(this.status_key_name):this.char.remove_permanent_status(this.status_key_name));case a.TEMPORARY_STATUS:return void(this.add_status?this.char.add_temporary_status(this.status_key_name):this.char.remove_temporary_status(this.status_key_name));case a.DAMAGE_MODIFIER:return this.apply_general_value(void 0,t);case a.DAMAGE_INPUT:let n=this.apply_general_value(void 0,t);const _=s.effect_type_stat[this.sub_effect.type];switch(n.before=this.char[_],n.after=this.apply_subeffect(_,n.after),this.sub_effect.type){case a.CURRENT_HP:this.check_caps(s.main_stats.CURRENT_HP,s.main_stats.MAX_HP,0,n);break;case a.CURRENT_PP:this.check_caps(s.main_stats.CURRENT_PP,s.main_stats.MAX_PP,0,n)}return n}}}e.Effect=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.StatusComponent=e.StatusModes=void 0;const s=i(7),n=i(0);var a;!function(t){t[t.BATTLE=0]="BATTLE",t[t.MENU=1]="MENU"}(a=e.StatusModes||(e.StatusModes={}));class _{constructor(t,e,i,s,n,o){this.game=t,this.data=e,this.window=i,this.mode=o||a.BATTLE,(this.mode===a.BATTLE||this.mode===a.MENU)&&(this.manager=this.manager),this.window.internal_groups[_.GROUP_KEY]||this.window.define_internal_group(_.GROUP_KEY,{x:0,y:0}),this.highlight=this.game.add.graphics(0,0),this.highlight.blendMode=PIXI.blendModes.SCREEN,this.window.add_to_internal_group(_.GROUP_KEY,this.highlight),this.state_sprites=[],this.manager=s,this.current_col=n?n.col:0,this.current_line=n?n.line:0}get selected_char(){let t=null;return(this.mode===a.BATTLE||this.mode===a.MENU)&&(t=this.manager),t.selected_character}get battle_status_effects(){let t=null;return(this.mode===a.BATTLE||this.mode===a.MENU)&&(t=this.manager),t.battle_effects_array}update_description(t,e){let i=null;(this.mode===a.BATTLE||this.mode===a.MENU)&&(i=this.manager),i.update_description(t,e)}update_highlight(t){this.highlight.clear(),this.highlight.beginFill(this.window.color,1),this.highlight.drawRect(t.x,t.y,t.width,t.height),this.highlight.endFill()}get current_pos(){return{line:this.current_line,col:this.current_col}}reset(t,e){t&&(this.current_line=t.line,this.current_col=t.col),this.clear(e),this.initialize(),this.select_option(),this.on_change()}clear(t){this.highlight.clear(),this.data.cursor_manager.hide();for(let t in this.state_sprites)this.state_sprites[t].destroy();this.state_sprites=[],this.window.page_indicator.is_set&&this.window.page_indicator.terminante(),t||this.window.clear_separators()}get_djinn_counts(t){const e=this.selected_char[t+"_djinni"].map(t=>this.data.info.djinni_list[t]);return{total:e.length,set:e.filter(t=>t.status===s.djinn_status.SET).length}}get_elemental_stats(t){let e=0,i=0,s=0;switch(t){case n.elements.VENUS:e=this.selected_char.venus_level_current,i=this.selected_char.venus_power_current,s=this.selected_char.venus_resist_current;break;case n.elements.MERCURY:e=this.selected_char.mercury_level_current,i=this.selected_char.mercury_power_current,s=this.selected_char.mercury_resist_current;break;case n.elements.MARS:e=this.selected_char.mars_level_current,i=this.selected_char.mars_power_current,s=this.selected_char.mars_resist_current;break;case n.elements.JUPITER:e=this.selected_char.jupiter_level_current,i=this.selected_char.jupiter_power_current,s=this.selected_char.jupiter_resist_current}return{level:e,power:i,resistance:s}}get_djinni_sprite(t,e,i){const a=this.data.info.djinni_sprites[t].getActionKey(s.djinn_status.SET),_=e.create(i.x,i.y,a);_.anchor.setTo(.5,1),_.scale.x=-1;const o=n.reverse_directions[n.directions.down],r=s.djinn_status.SET;return this.data.info.djinni_sprites[t].setAnimation(_,r),_.animations.play(this.data.info.djinni_sprites[t].getAnimationKey(r,o)),_}}e.StatusComponent=_,_.GROUP_KEY="status_component"},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PageIndicator=e.PageIndicatorModes=void 0;const s=i(1);var n;!function(t){t[t.HIGHLIGHT=0]="HIGHLIGHT",t[t.FLASH=1]="FLASH"}(n=e.PageIndicatorModes||(e.PageIndicatorModes={}));class a{constructor(t,e,i){this.game=t,this.window=e,this.window.define_internal_group(a.GROUP_KEY,{x:0,y:0}),this.set=!1,this.mode=null,this.flash_event=null,this.page_count=0,this.anchor={x:i?i.x:this.window.width-3,y:i?i.y:0},this.default_arrow_pos={right:0,left:0}}get is_set(){return this.set}set position(t){t.x&&(this.anchor.x=t.x),t.y&&(this.anchor.y=t.y)}initialize(t,e,i){if(!(t<=1)){this.is_set,this.mode=i||n.HIGHLIGHT,this.page_count=t,this.number_bar=this.game.add.graphics(0,0),this.number_bar.alpha=0,this.window.add_sprite_to_group(this.number_bar,a.GROUP_KEY),this.number_bar.beginFill(this.window.color,1),this.number_bar.drawRect(0,0,a.NUMBER_WIDTH,a.NUMBER_HEIGHT),this.number_bar.endFill(),this.number_bar_highlight=this.game.add.graphics(0,0),this.number_bar_highlight.blendMode=PIXI.blendModes.SCREEN,this.number_bar_highlight.alpha=0,this.window.add_sprite_to_group(this.number_bar_highlight,a.GROUP_KEY),this.number_bar_highlight.beginFill(this.window.color,1),this.number_bar_highlight.drawRect(0,0,a.NUMBER_WIDTH,a.NUMBER_HEIGHT),this.number_bar_highlight.endFill(),this.page_numbers=[],this.arrow_timer=this.game.time.create(!1),this.flash_timer=this.game.time.create(!1),this.right_arrow=this.window.create_at_group(0,0,"page_arrow",void 0,void 0,a.GROUP_KEY),this.right_arrow.alpha=0,this.left_arrow=this.window.create_at_group(0,0,"page_arrow",void 0,void 0,a.GROUP_KEY),this.left_arrow.alpha=0,this.set=!0,this.number_bar.width=this.page_count*a.NUMBER_WIDTH,this.number_bar.x=this.anchor.x-this.number_bar.width-2,this.number_bar.y=this.anchor.y,this.number_bar.alpha=1;for(let t=1;t<=this.page_count;++t){const e=this.number_bar.x+a.NUMBER_WIDTH*(t-1)+(a.NUMBER_WIDTH>>1),i=this.number_bar.y+(a.NUMBER_HEIGHT>>1);this.page_numbers.push(this.window.set_text_in_position(t.toString(),e,i,!1,!0))}this.number_bar_highlight.alpha=1,this.select_page(e),this.set_arrows()}}select_page(t){this.mode===n.HIGHLIGHT?(this.number_bar_highlight.x=this.number_bar.x+t*a.NUMBER_WIDTH,this.number_bar_highlight.y=this.number_bar.y):this.mode===n.FLASH&&(this.number_bar_highlight.alpha=0,this.flash_timer.running&&(this.flash_event.pendingDelete=!0,this.flash_event=null),this.page_numbers.forEach((e,i)=>{e.text.tint=i===t?s.DEFAULT_FONT_COLOR:s.INACTIVE_FONT_COLOR}),this.flash_event=this.flash_timer.loop(a.FLASH_LOOP,()=>{this.page_numbers[t].text.tint===s.DEFAULT_FONT_COLOR?this.page_numbers[t].text.tint=s.INACTIVE_FONT_COLOR:this.page_numbers[t].text.tint=s.DEFAULT_FONT_COLOR}),this.flash_timer.start())}set_arrows(){this.left_arrow.alpha=1,this.right_arrow.alpha=1;const t=this.number_bar.x-8;this.left_arrow.x=t,this.left_arrow.y=this.anchor.y,this.right_arrow.x=this.anchor.x,this.right_arrow.y=this.anchor.y,this.right_arrow.scale.x=-1,this.right_arrow.x-=this.right_arrow.width,this.default_arrow_pos={right:this.right_arrow.x,left:this.left_arrow.x},this.arrow_timer.running&&this.arrow_timer.paused?this.arrow_timer.resume():(this.arrow_timer.loop(a.ARROW_LOOP,()=>{this.right_arrow.x!==this.default_arrow_pos.right&&this.left_arrow.x!==this.default_arrow_pos.left?(this.right_arrow.x=this.default_arrow_pos.right,this.left_arrow.x=this.default_arrow_pos.left):(this.right_arrow.x+=-a.ARROW_SHIFT,this.left_arrow.x+=a.ARROW_SHIFT)}),this.arrow_timer.start())}terminante(){if(this.set){this.set=!1,this.mode=null,this.number_bar.alpha=0,this.number_bar_highlight.alpha=0,this.left_arrow.alpha=0,this.right_arrow.alpha=0;for(let t=0;t<this.page_numbers.length;++t)this.window.remove_text(this.page_numbers[t]);this.page_numbers=[],this.arrow_timer.pause(),this.flash_timer.pause()}}}e.PageIndicator=a,a.NUMBER_WIDTH=8,a.NUMBER_HEIGHT=8,a.ARROW_SHIFT=1,a.GROUP_KEY="page_indicator",a.ARROW_LOOP=Phaser.Timer.QUARTER>>1,a.FLASH_LOOP=150},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainChar=e.item_equip_slot=e.equip_slots=void 0;const s=i(27),n=i(7),a=i(9),_=i(8),o=i(5),r=i(0),h=i(1),c=i(3),l=i(13);var d;!function(t){t.WEAPON="weapon",t.HEAD="head",t.CHEST="chest",t.BODY="body",t.RING="ring",t.BOOTS="boots",t.UNDERWEAR="underwear"}(d=e.equip_slots||(e.equip_slots={})),e.item_equip_slot={[_.item_types.WEAPONS]:d.WEAPON,[_.item_types.ARMOR]:d.BODY,[_.item_types.CHEST_PROTECTOR]:d.CHEST,[_.item_types.HEAD_PROTECTOR]:d.HEAD,[_.item_types.LEG_PROTECTOR]:d.BOOTS,[_.item_types.RING]:d.RING,[_.item_types.UNDERWEAR]:d.UNDERWEAR};class u extends o.Player{constructor(t,e,i,s,n,a,_,h,l,u,p,m,g,y,w,f,b,v,E,x,T,A,S,I,k,N,R,P,O,j,M,L,D,C){super(t,_),this.info=e,this.sprite_base=i,this.walk_speed=s,this.dash_speed=n,this.climb_speed=a,this.starting_level=w,this.level=this.starting_level,this.class_table=f,this.battle_scale=b,this.exp_curve=y,this.current_exp=this.exp_curve[this.level-1],this.venus_level_base=v,this.mercury_level_base=E,this.mars_level_base=x,this.jupiter_level_base=T,this.venus_power_base=A,this.mercury_power_base=S,this.mars_power_base=I,this.jupiter_power_base=k,this.venus_resist_base=N,this.mercury_resist_base=R,this.mars_resist_base=P,this.jupiter_resist_base=O,this.element_afinity=c.maxBy([{element:r.elements.VENUS,level:this.venus_level_base},{element:r.elements.MERCURY,level:this.mercury_level_base},{element:r.elements.MARS,level:this.mars_level_base},{element:r.elements.JUPITER,level:this.jupiter_level_base}],t=>t.level).element,this.venus_djinni=[],this.mercury_djinni=[],this.mars_djinni=[],this.jupiter_djinni=[],this.init_djinni(L),this.update_class(),this.hp_curve=h,this.pp_curve=l,this.atk_curve=u,this.def_curve=p,this.agi_curve=m,this.luk_curve=g,this.hp_extra=0,this.pp_extra=0,this.atk_extra=0,this.def_extra=0,this.agi_extra=0,this.luk_extra=0,this.hp_recovery=0,this.pp_recovery=0,this.items=D,this.equip_slots={[d.WEAPON]:null,[d.HEAD]:null,[d.CHEST]:null,[d.BODY]:null,[d.RING]:null,[d.BOOTS]:null,[d.UNDERWEAR]:null},this.equipped_abilities=[],this.innate_abilities=j,this.init_items(),this.update_attributes(),this.update_elemental_attributes(),this.in_party=M,this.abilities=[],this.update_abilities(),this.turns=1,this.fighter_type=o.fighter_types.ALLY,this.battle_animations_variations=Object.assign({},C)}get djinni(){return this.venus_djinni.concat(this.mercury_djinni,this.mars_djinni,this.jupiter_djinni).sort((t,e)=>this.info.djinni_list[t].index-this.info.djinni_list[e].index)}update_class(){this.class=s.choose_right_class(this.info.classes_list,this.class_table,this.element_afinity,this.venus_level_current,this.mercury_level_current,this.mars_level_current,this.jupiter_level_current)}add_exp(t){let e={before:{level:this.level,abilities:this.abilities.slice(),stats:[{max_hp:this.max_hp},{max_pp:this.max_pp},{atk:this.atk},{def:this.def},{agi:this.agi},{luk:this.luk}]},after:null};return this.current_exp+=t,this.level=c.findIndex(this.exp_curve,t=>t>this.current_exp),this.update_all(),e.after={level:this.level,abilities:this.abilities.slice(),stats:[{max_hp:this.max_hp},{max_pp:this.max_pp},{atk:this.atk},{def:this.def},{agi:this.agi},{luk:this.luk}]},e}init_items(){this.items.forEach((t,e)=>{t.index=e,t.equipped&&this.equip_item(e,!0)})}add_item(t,e,i){let s=!1;this.info.items_list[t].type===_.item_types.GENERAL_ITEM&&this.items.forEach(i=>{i.key_name===t&&(s=!0,i.quantity+=e)}),s||(this.items.push({key_name:t,quantity:e,equipped:!1,index:this.items.length}),i&&this.equip_item(this.items.length-1))}remove_item(t,e){let i=!1;this.items=this.items.filter((s,n)=>t.key_name===s.key_name?(s.equipped&&this.unequip_item(n),s.quantity-e>=1?(s.quantity=s.quantity-e,!0):(i=!0,!1)):(i&&--s.index,!0))}equip_item(t,i=!1){const s=this.items[t];if(s.equipped&&!i)return;const n=this.info.items_list[s.key_name];n.type in e.item_equip_slot&&null!==this.equip_slots[e.item_equip_slot[n.type]]&&this.unequip_item(this.equip_slots[e.item_equip_slot[n.type]].index),n.type in e.item_equip_slot&&(this.equip_slots[e.item_equip_slot[n.type]]=s),s.equipped=!0;for(let t=0;t<n.effects.length;++t)this.add_effect(n.effects[t],n);this.update_attributes(),this.update_elemental_attributes(),n.type===_.item_types.ABILITY_GRANTOR&&(this.equipped_abilities.push(n.granted_ability),this.update_abilities())}unequip_item(t){const i=this.items[t];if(!i.equipped)return;const s=this.info.items_list[i.key_name];s.type in e.item_equip_slot&&null!==this.equip_slots[e.item_equip_slot[s.type]]&&(this.equip_slots[e.item_equip_slot[s.type]]=null),i.equipped=!1,this.effects.forEach(t=>{t.effect_owner_instance===s&&this.remove_effect(t)}),this.update_attributes(),this.update_elemental_attributes(),s.type===_.item_types.ABILITY_GRANTOR&&(this.equipped_abilities=this.equipped_abilities.filter(t=>t!==s.granted_ability),this.update_abilities())}init_djinni(t){for(let e=0;e<t.length;++e){const i=this.info.djinni_list[t[e]];switch(i.element){case r.elements.VENUS:this.venus_djinni.push(i.key_name);break;case r.elements.MERCURY:this.mercury_djinni.push(i.key_name);break;case r.elements.MARS:this.mars_djinni.push(i.key_name);break;case r.elements.JUPITER:this.jupiter_djinni.push(i.key_name)}}this.update_elemental_attributes()}add_djinn(t){const e=this.info.djinni_list[t];switch(e.element){case r.elements.VENUS:this.venus_djinni.push(e.key_name);break;case r.elements.MERCURY:this.mercury_djinni.push(e.key_name);break;case r.elements.MARS:this.mars_djinni.push(e.key_name);break;case r.elements.JUPITER:this.jupiter_djinni.push(e.key_name)}this.update_all()}remove_djinn(t){let e;switch(this.info.djinni_list[t].element){case r.elements.VENUS:e=this.venus_djinni;break;case r.elements.MERCURY:e=this.mercury_djinni;break;case r.elements.MARS:e=this.mars_djinni;break;case r.elements.JUPITER:e=this.jupiter_djinni}const i=e.indexOf(t);-1!==i&&e.splice(i,1),this.update_all()}replace_djinn(t,e){this.remove_djinn(t),this.add_djinn(e)}preview_djinn_change(t,e,i,a){const _=this.class;let o=this.venus_level_current,h=this.mercury_level_current,c=this.mars_level_current,l=this.jupiter_level_current;for(let t=0;t<e.length;++t){const s=this.info.djinni_list[e[t]];let a;switch(i[t]){case n.djinn_status.SET:a=u.ELEM_LV_DELTA;break;case n.djinn_status.RECOVERY:case n.djinn_status.ANY:a=0;break;default:a=-u.ELEM_LV_DELTA}switch(s.element){case r.elements.VENUS:o+=a;break;case r.elements.MERCURY:h+=a;break;case r.elements.MARS:c+=a;break;case r.elements.JUPITER:l+=a}}this.class=s.choose_right_class(this.info.classes_list,this.class_table,this.element_afinity,o,h,c,l);let d={class_name:this.class.name,class_key_name:this.class.key_name,abilities:null};return d.abilities=this.innate_abilities.concat(this.class.ability_level_pairs.filter(t=>t.level<=this.level&&!this.innate_abilities.includes(t.ability)).map(t=>t.ability),this.equipped_abilities),i=i.map(t=>t===n.djinn_status.ANY?n.djinn_status.STANDBY:t),t.forEach(t=>{d[t]=this.preview_stats_by_djinn(t,e,i,a)}),this.class=_,d}preview_stats_by_djinn(t,e,i,s){const n={djinni_key_name:e,djinni_next_status:i,action:s};return this.set_max_stat(t,!0,n)}preview_stats_by_effect(t,e,i){const s={effect_obj:e,item_key_name:i};return this.set_max_stat(o.effect_type_stat[t],!0,s)}preview_stat_without_abilities_effect(t){return this.set_max_stat(t,!0,{ignore_ability_effect:!0})}set_max_stat(t,e=!1,i={}){const s=[o.main_stats.MAX_HP,o.main_stats.MAX_PP].includes(t)?t.split("_")[1]:t,_=t,r=s+"_boost",h=s+"_curve",c=s+"_extra",d=this[_];this[_]=this[h][this.level]*this.class[r]+this[c]|0;let u=this.djinni;if(e)if("Trade"===i.action){const t=u.indexOf(i.djinni_key_name[0]);t>=0?u[t]=i.djinni_key_name[1]:u[u.indexOf(i.djinni_key_name[1])]=i.djinni_key_name[0]}else"Give"===i.action&&u.push(i.djinni_key_name[0]);for(let t=0;t<u.length;++t){let s=u[t],a=this.info.djinni_list[s],o=a.status;e&&i.djinni_key_name&&i.djinni_key_name.includes(s)&&(o=i.djinni_next_status[i.djinni_key_name.indexOf(s)]),o===n.djinn_status.SET&&(this[_]+=a[r])}if(this.effects.forEach(s=>{if(e&&s.effect_owner_instance&&i.item_key_name===s.effect_owner_instance.key_name)return;if(e&&i.ignore_ability_effect&&s.effect_owner_instance instanceof l.Ability)return;let n;switch(t){case o.main_stats.MAX_HP:n=a.effect_types.MAX_HP;break;case o.main_stats.MAX_PP:n=a.effect_types.MAX_PP;break;case o.main_stats.ATTACK:n=a.effect_types.ATTACK;break;case o.main_stats.DEFENSE:n=a.effect_types.DEFENSE;break;case o.main_stats.AGILITY:n=a.effect_types.AGILITY;break;case o.main_stats.LUCK:n=a.effect_types.LUCK}s.type===n&&s.apply_effect()}),e){const t=i.effect_obj?a.Effect.preview_value_applied(i.effect_obj,this[_]):this[_];return this[_]=d,t}if([o.main_stats.MAX_HP,o.main_stats.MAX_PP].includes(t)){const e=t===o.main_stats.MAX_HP?o.main_stats.CURRENT_HP:o.main_stats.CURRENT_PP;void 0===this[e]?this[e]=this[_]:this[e]=Math.round(this[e]*this[_]/d)}}update_attributes(){this.set_max_stat(o.main_stats.MAX_HP),this.set_max_stat(o.main_stats.MAX_PP),this.set_max_stat(o.main_stats.ATTACK),this.set_max_stat(o.main_stats.DEFENSE),this.set_max_stat(o.main_stats.AGILITY),this.set_max_stat(o.main_stats.LUCK)}add_extra_max_hp(t){this.hp_extra+=t}add_extra_max_pp(t){this.pp_extra+=t}add_extra_max_atk(t){this.atk_extra+=t}add_extra_max_def(t){this.def_extra+=t}add_extra_max_agi(t){this.agi_extra+=t}add_extra_max_luk(t){this.luk_extra+=t}preview_elemental_stats_without_abilities_effect(){return this.update_elemental_attributes(!0,!0)}update_elemental_attributes(t=!1,e=!1){const i={};r.ordered_elements.forEach(e=>{t&&(i[e]={power:this[e+"_power_current"],resist:this[e+"_resist_current"],level:this[e+"_level_current"]}),this[e+"_power_current"]=this[e+"_power_base"],this[e+"_resist_current"]=this[e+"_resist_base"],this[e+"_level_current"]=this[e+"_level_base"]});for(let t=0;t<this.djinni.length;++t){let e=this.info.djinni_list[this.djinni[t]];e.status===n.djinn_status.SET&&(this[e.element+"_power_current"]+=u.ELEM_POWER_DELTA,this[e.element+"_resist_current"]+=u.ELEM_RESIST_DELTA,this[e.element+"_level_current"]+=u.ELEM_LV_DELTA)}this.effects.forEach(t=>{if(t.type===a.effect_types.POWER||t.type===a.effect_types.RESIST){if(e&&t.effect_owner_instance instanceof l.Ability)return;t.apply_effect()}});for(let t=0;t<r.ordered_elements.length;++t){const e=r.ordered_elements[t],i=e+"_power_current",s=e+"_resist_current";this[i]=c.clamp(this[i],h.ELEM_ATTR_MIN,h.ELEM_ATTR_MAX),this[s]=c.clamp(this[s],h.ELEM_ATTR_MIN,h.ELEM_ATTR_MAX)}if(t){return Object.fromEntries(r.ordered_elements.map(t=>{const e=[t,{power:this[t+"_power_current"],resist:this[t+"_resist_current"],level:this[t+"_level_current"]}];return this[t+"_power_current"]=i[t].power,this[t+"_resist_current"]=i[t].resist,this[t+"_level_current"]=i[t].level,e}))}return null}update_abilities(){this.abilities=this.innate_abilities.concat(this.class.ability_level_pairs.filter(t=>t.level<=this.level&&!this.innate_abilities.includes(t.ability)).map(t=>t.ability),this.equipped_abilities)}update_all(){this.update_elemental_attributes(),this.update_class(),this.update_attributes(),this.update_abilities()}static get_active_players(t,e){return t.members.slice(0,e).filter(t=>!t.has_permanent_status(o.permanent_status.DOWNED))}static add_item_to_party(t,e,i){for(let s=0;s<t.members.length;++s){const n=t.members[s];if(n.items.length<u.MAX_ITEMS_PER_CHAR)return n.add_item(e.key_name,i,!1),!0}return!1}}e.MainChar=u,u.ELEM_LV_DELTA=1,u.ELEM_POWER_DELTA=5,u.ELEM_RESIST_DELTA=5,u.MAX_ITEMS_PER_CHAR=30},function(t,e,i){"use strict";var s,n;Object.defineProperty(e,"__esModule",{value:!0}),e.Ability=e.diminishing_ratios=e.ability_categories=e.ability_target_types=e.ability_msg_types=e.ability_types=void 0,function(t){t.HEALING="healing",t.EFFECT_ONLY="effect_only",t.ADDED_DAMAGE="added_damage",t.MULTIPLIER="multiplier",t.BASE_DAMAGE="base_damage",t.SUMMON="summon",t.UTILITY="utility",t.DIRECT_DAMAGE="direct_damage"}(s=e.ability_types||(e.ability_types={})),function(t){t.CAST="cast",t.ATTACK="attack",t.USE="use",t.SUMMON="summon",t.UNLEASH="unleash",t.DEFEND="defend",t.ITEM_UNLEASH="item_unleash",t.SET_DJINN="set_djinn",t.NO_MSG="no_msg"}(n=e.ability_msg_types||(e.ability_msg_types={})),function(t){t.NO_TARGET="no_target",t.ALLY="ally",t.ENEMY="enemy",t.USER="user"}(e.ability_target_types||(e.ability_target_types={})),function(t){t.PSYNERGY="psynergy",t.DJINN="djinn",t.SUMMON="summon",t.ITEM="item",t.WEAPON_UNLEASH="weapon_unleash",t.NORMAL="normal"}(e.ability_categories||(e.ability_categories={})),e.diminishing_ratios={STANDARD:{11:.1,9:.2,7:.4,5:.6,3:.8,1:1},SUMMON:{11:.1,9:.2,7:.3,5:.4,3:.7,1:1},DIMINISH:{11:.1,9:.1,7:.1,5:.3,3:.5,1:1},STATUS:{11:.3,9:.3,7:.3,5:.3,3:.6,1:1}};e.Ability=class{constructor(t,e,i,s,a,_,o,r,h,c,l,d,u,p,m,g,y,w,f,b,v,E,x,T){this.key_name=t,this.name=e,this.description=i,this.type=s,this.element=a,this.battle_target=_,this.range=o,this.pp_cost=r,this.ability_power=h,this.effects_outside_battle=c,this.is_battle_ability=l,this.is_field_psynergy=d,this.effects=u,this.ability_category=p,this.battle_animation_key=m,this.priority_move=g||!1,this.has_critical=y||!1,this.crit_mult_factor=void 0!==w?w:1,this.can_switch_to_unleash=f||!1,this.can_be_evaded=b||!1,this.use_diminishing_ratio=v||!1,this.msg_type=void 0===E?n.CAST:E,this.affects_pp=void 0!==x&&x,this.has_animation_variation=void 0!==T&&T}static get_diminishing_ratios(t,i){if(i)return e.diminishing_ratios.DIMINISH;switch(t){case s.SUMMON:return e.diminishing_ratios.SUMMON;default:return e.diminishing_ratios.STANDARD}}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SpriteBase=void 0;e.SpriteBase=class{constructor(t,e){this.key_name=t,this.actions={},this.animations={};for(let t=0;t<e.length;++t)this.actions[e[t]]={}}setActionDirections(t,e,i){this.actions[t].directions=new Array(e.length),this.actions[t].frame_counts=new Array(e.length);const s=Array.isArray(i);for(let n=0;n<e.length;++n){const a=s?i[n]:i;this.actions[t].directions[n]=e[n],this.actions[t].frame_counts[n]=a}}setActionFrameRate(t,e){this.actions[t].frame_rate={};for(let i=0;i<this.actions[t].directions.length;++i){const s=this.actions[t].directions[i];let n;n=Array.isArray(e)?1===e.length?e[0]:e[i]:e,this.actions[t].frame_rate[s]=n}}setActionLoop(t,e){this.actions[t].loop=e}setActionSpritesheet(t,e,i){this.actions[t].spritesheet={spritesheet_image_url:e,spritesheet_json_url:i}}loadSpritesheets(t,e,i){for(let s in this.actions){const n=this.actions[s].spritesheet,a=this.getActionKey(s);let _=t.load.atlasJSONHash(a,n.spritesheet_image_url,n.spritesheet_json_url);e&&(_.onLoadComplete.addOnce(i,this),t.load.start())}}generateFrameNames(t,e,i,s,n,a){t in this.animations||(this.animations[t]={}),this.animations[t][e]=Phaser.Animation.generateFrameNames(`${t}/${e}/`,i,s,n,a)}setAnimation(t,e){const i=this.actions[e].directions,s=void 0===this.actions[e].loop||this.actions[e].loop;for(let n=0;n<i.length;++n){const a=i[n],_=this.actions[e].frame_rate[a],o=this.getAnimationKey(e,a);t.animations.add(o,this.animations[e][a],_,Array.isArray(s)?s[n]:s,!1)}}generateAllFrames(){for(let t in this.actions){const e=this.actions[t].directions,i=this.actions[t].frame_counts;for(let s=0;s<e.length;++s){const n=e[s];this.generateFrameNames(t,n,0,i[s]-1,"",2)}}}getFrameName(t,e,i){return`${t}/${e}/${i.toLocaleString("en-US",{minimumIntegerDigits:2,useGrouping:!1})}`}getActionKey(t){return this.key_name+"_"+t}getAnimationKey(t,e){return t+"_"+e}getSpriteAction(t){return t.key.split("_")[1]}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CharsMenu=e.CharsMenuModes=void 0;const s=i(2),n=i(0),a=i(4);var _;!function(t){t[t.SHOP=0]="SHOP",t[t.MENU=1]="MENU"}(_=e.CharsMenuModes||(e.CharsMenuModes={}));const o=Phaser.Timer.QUARTER>>1;e.CharsMenu=class{constructor(t,e,i){this.game=t,this.data=e,this.on_change=i,this.window=new s.Window(this.game,0,112,100,20),this.char_group=this.game.add.group(),this.char_group.x=0,this.char_group.y=96,this.char_group.alpha=1,this.arrow_group=this.game.add.group(),this.arrow_group.x=96,this.arrow_group.y=100,this.up_arrow=this.arrow_group.create(16,20,"green_arrow"),this.up_arrow.rotation=Math.PI,this.down_arrow=this.arrow_group.create(0,24,"green_arrow"),this.up_arrow.alpha=0,this.down_arrow.alpha=0,this.arrow_tweens=[],this.lines=[],this.char_sprites=[],this.current_line=0,this.selected_index=null,this.is_active=!1,this.is_open=!1,this.mode=null}check_mode(){this.mode===_.SHOP?(this.window.update_size({width:100,height:20}),this.window.update_position({x:0,y:112}),this.char_group.x=0+this.game.camera.x,this.char_group.y=96+this.game.camera.y,this.arrow_group.x=96+this.game.camera.x,this.arrow_group.y=100+this.game.camera.y):this.mode===_.MENU&&(this.window.update_size({width:100,height:36}),this.window.update_position({x:0,y:0}),this.char_group.x=0+this.game.camera.x,this.char_group.y=-4+this.game.camera.y,this.arrow_group.x=92+this.game.camera.x,this.arrow_group.y=-4+this.game.camera.y,this.window.draw_separator(4,27,100,27,!1))}set_arrows(t=!1,e=!1){this.up_arrow.x=16,this.up_arrow.y=20,this.down_arrow.x=0,this.down_arrow.y=24,this.up_arrow.alpha=t?1:0,this.down_arrow.alpha=e?1:0}check_arrows(){let t=!1,e=!1;this.current_line<this.lines.length-1&&(e=!0),this.current_line>0&&(t=!0),this.set_arrows(t,e),this.init_arrow_tweens(),this.game.world.bringToTop(this.arrow_group)}init_arrow_tweens(){let t=this.game.add.tween(this.up_arrow).to({y:12},o,Phaser.Easing.Linear.None).to({y:20},o,Phaser.Easing.Linear.None).loop();this.arrow_tweens.push(t);let e=this.game.add.tween(this.down_arrow).to({y:32},o,Phaser.Easing.Linear.None).to({y:24},o,Phaser.Easing.Linear.None).loop();this.arrow_tweens.push(e),t.start(),e.start()}clear_arrow_tweens(){for(let t=0;t<this.arrow_tweens.length;t++)this.game.tweens.remove(this.arrow_tweens.pop())}set_chars(){this.char_sprites=[];for(let t=0;t<this.lines[this.current_line].length;++t){let e=this.lines[this.current_line][t],i=null,s=this.char_group.children.filter(t=>!1===t.alive&&t.key===e.sprite_base.getActionKey(n.base_actions.IDLE));i=s.length>0?s[0].reset(24*t,0):this.char_group.create(24*t,0,e.sprite_base.getActionKey(n.base_actions.IDLE)),e.sprite_base.setAnimation(i,n.base_actions.IDLE),i.animations.play(e.sprite_base.getAnimationKey(n.base_actions.IDLE,n.reverse_directions[n.directions.down])),this.char_sprites.push(i)}}make_lines(){let t=this.data.info.party_data.members.length,e=t%4==0?t/4|0:1+(t/4|0);for(let t=0;t<e;t++){let e=[];for(let i=4*t;i<4*(t+1)&&this.data.info.party_data.members[i];i++)e.push(this.data.info.party_data.members[i]);this.lines[t]=e}}change_line(t,e,i){this.data.info.party_data.members.length<4*t||(this.clear_arrow_tweens(),this.unset_character(this.selected_index),this.current_line=t,void 0!==e?this.selected_index=e:null!==this.selected_index&&this.selected_index>=this.lines[this.current_line].length&&(this.selected_index=this.lines[this.current_line].length-1),n.kill_all_sprites(this.char_group),this.set_chars(),this.check_arrows(),this.select_char(this.selected_index,i))}next_line(t,e){if(1===this.lines.length||this.current_line+1===this.lines.length)return;let i=this.current_line+1;this.change_line(i,t,e)}previous_line(t,e){if(1===this.lines.length||this.current_line-1<0)return;let i=this.current_line-1;this.change_line(i,t,e)}set_character(t){this.mode===_.SHOP||this.mode===_.MENU&&(this.char_sprites[t].y=4)}unset_character(t){null!=t&&(this.mode===_.SHOP||this.mode===_.MENU&&(this.char_sprites[t].y=0))}select_char(t,e,i){void 0===t&&(t=this.selected_index);const s=()=>{if(this.unset_character(this.selected_index),this.selected_index=t,this.set_character(this.selected_index),this.on_change&&!i){let t=this.data.info.party_data.members[4*this.current_line+this.selected_index];this.on_change(t.key_name)}};e?s():this.move_cursor(t,s)}next_char(t){1===this.lines[this.current_line].length&&1===this.lines.length||(this.data.audio.play_se("menu_se","menu_move"),this.selected_index+1===this.lines[this.current_line].length?this.current_line+1===this.lines.length?1===this.lines.length?this.select_char(0,t):this.change_line(0,0,t):this.next_line(0,t):this.select_char(this.selected_index+1,t))}previous_char(t){1===this.lines[this.current_line].length&&1===this.lines.length||(this.data.audio.play_se("menu_se","menu_move"),this.selected_index-1<0?this.current_line-1<0?1===this.lines.length?this.select_char(this.lines[this.current_line].length-1,t):this.change_line(this.lines.length-1,this.lines[this.lines.length-1].length-1,t):this.previous_line(this.lines[this.current_line-1].length-1,t):this.select_char(this.selected_index-1,t))}swap_next(){if(this.selected_index===this.lines[this.current_line].length-1&&this.current_line===this.lines.length-1)return;this.data.audio.play_se("menu_se","menu_positive");const t=this.selected_index+4*this.current_line,e=this.data.info.party_data.members[t];this.data.info.party_data.members[t]=this.data.info.party_data.members[t+1],this.data.info.party_data.members[t+1]=e;const i=(this.selected_index+1)%4,s=this.current_line+(0===i?1:0);this.make_lines(),this.change_line(s,i)}swap_previous(){if(0===this.selected_index&&0===this.current_line)return;this.data.audio.play_se("menu_se","menu_positive");const t=this.selected_index+4*this.current_line,e=this.data.info.party_data.members[t];this.data.info.party_data.members[t]=this.data.info.party_data.members[t-1],this.data.info.party_data.members[t-1]=e;const i=(this.selected_index+4-1)%4,s=this.current_line-(i>this.selected_index?1:0);this.make_lines(),this.change_line(s,i)}grant_control(t,e,i){const s=[{key:this.data.gamepad.LEFT,on_down:this.previous_char.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.next_char.bind(this)},{key:this.data.gamepad.UP,on_down:this.previous_line.bind(this)},{key:this.data.gamepad.DOWN,on_down:this.next_line.bind(this)},{key:this.data.gamepad.A,on_down:()=>{e&&(this.data.audio.play_se("menu_se","menu_positive"),e())},params:{reset_control:!0}},{key:this.data.gamepad.B,on_down:()=>{t&&(this.data.audio.play_se("menu_se","menu_negative"),t())},params:{reset_control:!0}}];i&&s.push({key:this.data.gamepad.L,on_down:this.swap_previous.bind(this)},{key:this.data.gamepad.R,on_down:this.swap_next.bind(this)}),this.data.control_manager.set_control(s,{loop_configs:{horizontal:!0}})}move_cursor(t,e){void 0===t&&(t=this.selected_index);let i=0,s=0,n={type:null,variant:null};this.mode===_.SHOP?(i=0+24*t,s=118,n.type=a.CursorManager.CursorTweens.WIGGLE):this.mode===_.MENU&&(i=0+24*t,s=22,n.type=a.CursorManager.CursorTweens.POINT,n.variant=a.PointVariants.NORMAL),this.data.cursor_manager.move_to({x:i,y:s},{animate:!1,tween_config:n},e)}activate(){this.move_cursor(),this.is_active=!0}deactivate(){this.data.cursor_manager.clear_tweens(),this.is_active=!1}open(t=0,e=_.SHOP,i,s){this.current_line=0,this.mode=e,this.make_lines(),this.check_mode(),this.check_arrows(),this.set_chars(),this.select_char(t,void 0,s),this.char_group.alpha=1,this.is_open=!0,this.activate(),this.window.show(i,!1)}close(t,e=!1){this.is_open=!1,this.deactivate(),n.kill_all_sprites(this.char_group,e),this.lines=[],this.char_sprites=[],this.current_line=0,this.selected_index=null,this.is_active=!1,this.is_open=!1,this.char_group.alpha=0,this.mode=null,this.set_arrows(!1,!1),this.window.clear_separators(),this.window.close(t,!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.JumpEvent=void 0;const s=i(6),n=i(1),a=i(0);class _ extends s.TileEvent{constructor(t,e,i,n,a,_,o,r,h){super(t,e,s.event_types.JUMP,i,n,a,_,o,r,null),this.is_set=h}fire(){if(!this.data.hero.stop_by_colliding||!this.check_position()||!this.data.hero_movement_allowed(!1))return;let t,e,i=30,n={x:this.x,y:this.y},o={x:this.x,y:this.y};if(this.data.hero.current_direction===a.directions.left?(i=-i,t="x",n.x-=2,o.x-=1,e=a.directions.left):this.data.hero.current_direction===a.directions.right?(t="x",n.x+=2,o.x+=1,e=a.directions.right):this.data.hero.current_direction===a.directions.up?(i=-i,t="y",n.y-=2,o.y-=1,e=a.directions.up):this.data.hero.current_direction===a.directions.down&&(t="y",n.y+=2,o.y+=1,e=a.directions.down),void 0===e)return;let r=s.TileEvent.get_location_key(o.x,o.y);if(r in this.data.map.events)for(let t=0;t<this.data.map.events[r].length;++t){const e=this.data.map.events[r][t];let i=!1;for(let t=0;t<this.data.map.interactable_objects.length;++t){const s=this.data.map.interactable_objects[t];if(this.data.map.collision_layer===s.base_collision_layer&&(e.x===s.current_x&&e.y===s.current_y)){i=!0;break}}if(!i&&(e.type===s.event_types.JUMP&&e.is_set&&e.activation_collision_layers.includes(this.data.map.collision_layer)))return}let h=s.TileEvent.get_location_key(n.x,n.y);for(let t=0;t<this.data.map.interactable_objects.length;++t){const e=this.data.map.interactable_objects[t];if(e.current_x===n.x&&e.current_y===n.y&&this.data.map.collision_layer===e.base_collision_layer)return}if(h in this.data.map.events){let t=!1;for(let i=0;i<this.data.map.events[h].length;++i){const n=this.data.map.events[h][i];if(n.type===s.event_types.JUMP&&n.is_active(a.get_opposite_direction(e))&&n.is_set&&n.activation_collision_layers.includes(this.data.map.collision_layer)){if(t=!0,n.dynamic){_.set_jump_collision(this.game,this.data);break}this.dynamic&&_.unset_set_jump_collision(this.data)}}if(!t)return}else if(this.dynamic)return;this.data.hero.jumping=!0,this.data.audio.play_se("actions_se","jump"),this.data.tile_event_manager.on_event=!0;let c={};c[t]=this.data.hero.sprite[t]+i;const l=this.data.map.sprite.tileWidth*(n.x+.5),d=this.data.map.sprite.tileHeight*(n.y+.5);"x"===t?c.y=[d-8,d-16,d-8,d]:c.x=l,this.game.physics.p2.pause(),this.data.hero.play(a.base_actions.JUMP,a.reverse_directions[e]),this.data.hero.sprite.animations.currentAnim.onComplete.addOnce(()=>{this.data.hero.shadow.visible=!1,this.game.add.tween(this.data.hero.sprite.body).to(c,150,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.data.hero.shadow.x=l,this.data.hero.shadow.y=d,this.data.hero.shadow.visible=!0,this.data.hero.sprite.animations.currentAnim.reverseOnce(),this.data.hero.play(a.base_actions.JUMP,a.reverse_directions[e]),this.data.hero.sprite.animations.currentAnim.onComplete.addOnce(()=>{this.game.physics.p2.resume(),this.data.hero.jumping=!1,this.data.tile_event_manager.on_event=!1})},this)})}jump_near_collision(){const t=s.TileEvent.get_location_key(this.data.hero.tile_x_pos,this.data.hero.tile_y_pos);let e={x:this.data.hero.tile_x_pos,y:this.data.hero.tile_y_pos},i=a.get_surroundings(e.x,e.y,!0),_=!1,o=a.split_direction(this.data.hero.current_direction);for(let t=0;t<o.length;++t)_=_||this.activation_directions.includes(o[t]);let r=()=>{this.data.hero.sprite.body.collides(this.data.collision.map_collision_group),this.data.map.collision_sprite.body.collides(this.data.collision.hero_collision_group);for(let t=0;t<this.data.collision.dynamic_jump_events_bodies.length;++t)this.data.collision.dynamic_jump_events_bodies[t].destroy();this.data.collision.dynamic_jump_events_bodies=[]},h=t,c=[],l=!1;for(let t=0;t<i.length;++t){const e=s.TileEvent.get_location_key(i[t].x,i[t].y);if(e in this.data.map.events)for(let n=0;n<this.data.map.events[e].length;++n){const o=this.data.map.events[e][n];if(o.type===s.event_types.JUMP&&_&&o.is_set&&o.activation_collision_layers.includes(this.data.map.collision_layer)){!o.dynamic&&!this.dynamic||i[t].diag||(l=!0);const s=a.get_surroundings(i[t].x,i[t].y,!1);c.push(s),h+="-"+e}}}if(!this.data.tile_event_manager.walking_on_pillars_tiles.has(h)&&l){this.data.tile_event_manager.walking_on_pillars_tiles.clear(),r(),this.data.tile_event_manager.walking_on_pillars_tiles.add(h);let t=new Set(i.concat(...c).map(t=>t.x+"_"+t.y));h.split("-").forEach(e=>{t.delete(e)}),this.data.hero.sprite.body.removeCollisionGroup(this.data.collision.map_collision_group,!0),this.data.map.collision_sprite.body.removeCollisionGroup(this.data.collision.hero_collision_group,!0),t.forEach(t=>{const e=t.split("_"),i=(parseInt(e[0])+.5)*this.data.map.sprite.tileWidth,s=(parseInt(e[1])+.5)*this.data.map.sprite.tileHeight;let a=this.game.physics.p2.createBody(i,s,0,!0);a.clearShapes(),a.setRectangle(this.data.map.sprite.tileWidth,this.data.map.sprite.tileHeight,0,0),a.setCollisionGroup(this.data.collision.dynamic_events_collision_group),a.damping=n.MAP_DAMPING,a.angularDamping=n.MAP_DAMPING,a.setZeroRotation(),a.fixedRotation=!0,a.dynamic=!1,a.static=!0,a.debug=this.data.hero.sprite.body.debug,a.collides(this.data.collision.hero_collision_group),this.data.collision.dynamic_jump_events_bodies.push(a)})}this.dynamic||_||!this.data.tile_event_manager.walking_on_pillars_tiles.size||(this.data.tile_event_manager.walking_on_pillars_tiles.clear(),r())}static set_jump_collision(t,e){for(let t=0;t<e.collision.dynamic_jump_events_bodies.length;++t)e.collision.dynamic_jump_events_bodies[t].destroy();e.collision.dynamic_jump_events_bodies=[],e.tile_event_manager.walking_on_pillars_tiles.clear(),e.hero.sprite.body.removeCollisionGroup(e.collision.map_collision_group,!0),e.map.collision_sprite.body.removeCollisionGroup(e.collision.hero_collision_group,!0);for(let i in e.map.events)for(let a=0;a<e.map.events[i].length;++a){const _=e.map.events[i][a];if(_.type===s.event_types.JUMP&&_.dynamic&&_.is_set&&_.activation_collision_layers.includes(e.map.collision_layer)){let i=[{x:_.x-1,y:_.y},{x:_.x+1,y:_.y},{x:_.x,y:_.y-1},{x:_.x,y:_.y+1}];for(let a=0;a<i.length;++a){const _=s.TileEvent.get_location_key(i[a].x,i[a].y);if(_ in e.map.events){let t=!1;for(let i=0;i<e.map.events[_].length;++i){const n=e.map.events[_][i];if(n.dynamic&&n.type===s.event_types.JUMP&&n.is_set&&n.activation_collision_layers.includes(e.map.collision_layer)){t=!0;break}}if(t)continue}let o=(i[a].x+.5)*e.map.sprite.tileWidth,r=(i[a].y+.5)*e.map.sprite.tileHeight,h=t.physics.p2.createBody(o,r,0,!0);h.clearShapes(),h.setRectangle(e.map.sprite.tileWidth,e.map.sprite.tileHeight,0,0),h.setCollisionGroup(e.collision.dynamic_events_collision_group),h.damping=n.MAP_DAMPING,h.angularDamping=n.MAP_DAMPING,h.setZeroRotation(),h.fixedRotation=!0,h.dynamic=!1,h.static=!0,h.debug=e.hero.sprite.body.debug,h.collides(e.collision.hero_collision_group),e.collision.dynamic_jump_events_bodies.push(h)}}}}static unset_set_jump_collision(t){t.hero.sprite.body.collides(t.collision.map_collision_group),t.map.collision_sprite.body.collides(t.collision.hero_collision_group);for(let e=0;e<t.collision.dynamic_jump_events_bodies.length;++e)t.collision.dynamic_jump_events_bodies[e].destroy();t.collision.dynamic_jump_events_bodies=[]}static active_jump_surroundings(t,e,i){for(let n=0;n<e.length;++n){const _=e[n],o=s.TileEvent.get_location_key(_.x,_.y);if(o in t.map.events)for(let e=0;e<t.map.events[o].length;++e){const n=t.map.events[o][e];n.type===s.event_types.JUMP&&n.activation_collision_layers.includes(i)&&!1===n.dynamic&&n.is_set&&n.activate_at(a.get_opposite_direction(_.direction))}}}}e.JumpEvent=_},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function _(t){try{r(s.next(t))}catch(t){a(t)}}function o(t){try{r(s.throw(t))}catch(t){a(t)}}function r(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(_,o)}r((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.Battle=void 0;const n=i(5),a=i(25),_=i(46),o=i(47),r=i(60),h=i(13),c=i(61),l=i(62),d=i(63),u=i(9),p=i(0),m=i(7),g=i(12),y=i(64),w=i(3),f=i(8);var b;!function(t){t[t.NONE=0]="NONE",t[t.START=1]="START",t[t.MENU=2]="MENU",t[t.ROUND_START=3]="ROUND_START",t[t.COMBAT=4]="COMBAT",t[t.ROUND_END=5]="ROUND_END",t[t.END=6]="END"}(b||(b={}));class v{constructor(t,e,i,s){this.game=t,this.data=e,this.allies_info=this.data.info.party_data.members.slice(0,v.MAX_CHARS_IN_BATTLE).map(t=>(t.init_effect_turns_count(),{sprite_key:t.sprite_base.getActionKey(p.base_actions.BATTLE),scale:t.battle_scale,instance:t,entered_in_battle:!0}));const n=this.data.dbs.enemies_parties_db[s];this.enemies_party_name=n.name,this.enemies_info=[],this.this_enemies_list={};let h={},l=0;n.members.forEach(t=>{const e=w.random(t.min,t.max);for(let i=0;i<e;++i){this.enemies_info.push({sprite_key:t.key+"_battle"}),this.enemies_info[l].sprite_key in h?h[this.enemies_info[l].sprite_key]+=1:h[this.enemies_info[l].sprite_key]=1;let e="",i="";h[this.enemies_info[l].sprite_key]>1&&(e="_"+h[this.enemies_info[l].sprite_key].toString(),i=" "+h[this.enemies_info[l].sprite_key].toString()),this.enemies_info[l].instance=r.get_enemy_instance(this.data.info.enemies_list[t.key].data,i),this.enemies_info[l].scale=this.enemies_info[l].instance.battle_scale,this.enemies_info[l].battle_key=this.enemies_info[l].sprite_key+e,this.this_enemies_list[this.enemies_info[l].battle_key]=this.enemies_info[l].instance,++l}}),this.battle_stage=new a.BattleStage(this.game,this.data,i,this.allies_info,this.enemies_info),this.battle_log=new _.BattleLog(this.game),this.battle_menu=new o.MainBattleMenu(this.game,this.data,this.on_abilities_choose.bind(this),this.choose_targets.bind(this)),this.target_window=new c.ChoosingTargetWindow(this.game,this.data),this.animation_manager=new y.BattleAnimationManager(this.game,this.data),this.battle_phase=b.NONE,this.on_going_effects=[],this.allies_defeated=!1,this.enemies_defeated=!1,this.battle_finishing=!1}start_battle(){this.check_phases()}on_abilities_choose(t){this.allies_abilities=t,this.battle_menu.close_menu(),this.battle_stage.reset_positions(),this.battle_stage.choosing_actions=!1,this.battle_phase=b.ROUND_START,this.check_phases()}choose_targets(t,e,i,s,n){const a=this.data.info.abilities_list[t];let _;"psynergy"===e&&(_=[a.pp_cost]),"defend"!==e&&this.target_window.open(e,a.name,a.element,t,_,n),this.battle_stage.choose_targets(a.range,a.battle_target,a.type,s,t=>{this.target_window.window_open&&this.target_window.close(),i(t)})}check_parties(){this.allies_defeated=this.allies_info.every(t=>t.instance.has_permanent_status(n.permanent_status.DOWNED)),this.enemies_defeated=this.enemies_info.every(t=>t.instance.has_permanent_status(n.permanent_status.DOWNED)),(this.allies_defeated||this.enemies_defeated)&&(this.battle_phase=b.END)}check_phases(){switch(this.check_parties(),this.battle_phase){case b.NONE:this.battle_phase_none();break;case b.START:case b.MENU:this.battle_phase_menu();break;case b.ROUND_START:this.battle_phase_round_start();break;case b.COMBAT:this.battle_phase_combat();break;case b.ROUND_END:this.battle_phase_round_end();break;case b.END:this.battle_phase_end()}}battle_phase_none(){this.game.physics.p2.pause(),this.data.audio.stop_bgm(),this.battle_phase=b.START,this.data.in_battle=!0,this.data.battle_instance=this,this.advance_log_control_key=this.data.control_manager.simple_input(()=>{this.advance_log_resolve&&(this.advance_log_resolve(),this.advance_log_resolve=null)},{persist:!0}),this.battle_log.add(this.enemies_party_name+" appeared!"),this.battle_stage.initialize_stage(()=>{this.allies_map_sprite=w.mapValues(w.keyBy(this.allies_info,"instance.key_name"),t=>t.sprite),this.enemies_map_sprite=w.mapValues(w.keyBy(this.enemies_info,"instance.key_name"),t=>t.sprite),this.data.control_manager.simple_input(()=>{this.battle_log.clear(),this.battle_phase=b.MENU,this.check_phases()})})}battle_phase_menu(){this.battle_stage.set_choosing_action_position(),this.battle_menu.open_menu()}battle_phase_round_start(){return s(this,void 0,void 0,(function*(){const t=this.enemies_info.map(t=>t.instance);this.enemies_abilities=Object.fromEntries(t.map((e,i)=>{let s=new Array(e.turns);for(let i=0;i<e.turns;++i)s[i]=l.EnemyAI.roll_action(e,this.data.info.party_data.members,t);return[this.enemies_info[i].battle_key,s]}));for(let t in this.allies_abilities){const e=this.data.info.main_char_list[t];for(let i=0;i<this.allies_abilities[t].length;++i){const s=this.data.info.abilities_list[this.allies_abilities[t][i].key_name],n=void 0!==s&&s.priority_move;this.allies_abilities[t][i].speed=d.BattleFormulas.player_turn_speed(e.agi,n,i>0),this.allies_abilities[t][i].caster=e}}for(let t in this.enemies_abilities){const e=this.this_enemies_list[t];for(let i=0;i<this.enemies_abilities[t].length;++i){const s=this.data.info.abilities_list[this.enemies_abilities[t][i].key_name],n=void 0!==s&&s.priority_move;this.enemies_abilities[t][i].speed=d.BattleFormulas.enemy_turn_speed(e.agi,i+1,e.turns,n),this.enemies_abilities[t][i].caster=e}}this.turns_actions=w.sortBy(Object.values(this.allies_abilities).flat().concat(Object.values(this.enemies_abilities).flat()),t=>t.speed);for(let t=0;t<this.turns_actions.length;++t){const e=this.turns_actions[t],i=this.data.info.abilities_list[e.key_name];let s=this.data.info.abilities_list[e.key_name].battle_animation_key;i.has_animation_variation&&e.key_name in e.caster.battle_animations_variations&&(s=e.caster.battle_animations_variations[e.key_name]),e.battle_animation_key=s,yield this.animation_manager.load_animation(s)}this.battle_phase=b.COMBAT,this.check_phases()}))}wait_for_key(){return new Promise(t=>{this.advance_log_resolve=t})}check_downed(t){return s(this,void 0,void 0,(function*(){0===t.current_hp&&(t.add_permanent_status(n.permanent_status.DOWNED),yield this.battle_log.add(n.on_catch_status_msg[n.permanent_status.DOWNED](t)),yield this.wait_for_key())}))}battle_phase_combat(){return s(this,void 0,void 0,(function*(){if(!this.turns_actions.length)return this.battle_phase=b.ROUND_END,void this.check_phases();const t=this.turns_actions.pop();if(t.caster.has_permanent_status(n.permanent_status.DOWNED))return void this.check_phases();if(t.caster.is_paralyzed())return t.caster.temporary_status.has(n.temporary_status.SLEEP)?yield this.battle_log.add(t.caster.name+" is asleep!"):t.caster.temporary_status.has(n.temporary_status.STUN)&&(yield this.battle_log.add(t.caster.name+" is paralyzed and cannot move!")),yield this.wait_for_key(),void this.check_phases();t.caster.fighter_type!==n.fighter_types.ENEMY||this.data.info.abilities_list[t.key_name].priority_move||Object.assign(t,l.EnemyAI.roll_action(t.caster,this.data.info.party_data.members,this.enemies_info.map(t=>t.instance)));let e=this.data.info.abilities_list[t.key_name],i=t.item_slot?this.data.info.items_list[t.item_slot.key_name].name:"";if(t.caster.fighter_type===n.fighter_types.ALLY&&void 0!==e&&e.can_switch_to_unleash){const s=t.caster;if(s.equip_slots.weapon&&this.data.info.items_list[s.equip_slots.weapon.key_name].unleash_ability){const n=this.data.info.items_list[s.equip_slots.weapon.key_name];Math.random()<n.unleash_rate&&(i=n.name,t.key_name=n.unleash_ability,e=this.data.info.abilities_list[n.unleash_ability])}}if(void 0===e)return yield this.battle_log.add(t.key_name+" ability key not registered."),yield this.wait_for_key(),void this.check_phases();if(t.caster.has_temporary_status(n.temporary_status.SEAL)&&e.ability_category===h.ability_categories.PSYNERGY)return yield this.battle_log.add("But the Psynergy was blocked!"),yield this.wait_for_key(),void this.check_phases();if(e.pp_cost>t.caster.current_pp)return yield this.battle_log.add("... But doesn't have enough PP!"),yield this.wait_for_key(),void this.check_phases();t.caster.current_pp-=e.pp_cost;const s=t.djinn_key_name?this.data.info.djinni_list[t.djinn_key_name].name:void 0;if(yield this.battle_log.add_ability(t.caster,e,i,s,void 0!==t.item_slot),e.ability_category===h.ability_categories.DJINN)e.effects.some(t=>t.type===u.effect_types.SET_DJINN)?this.data.info.djinni_list[t.djinn_key_name].set_status(m.djinn_status.SET,t.caster):this.data.info.djinni_list[t.key_name].set_status(m.djinn_status.STANDBY,t.caster);else if(e.ability_category===h.ability_categories.SUMMON){const i=this.data.info.summons_list[e.key_name].requirements,s=m.Djinn.get_standby_djinni(this.data.info.djinni_list,g.MainChar.get_active_players(this.data.info.party_data,v.MAX_CHARS_IN_BATTLE));if(!w.every(i,(t,e)=>s[e]>=t))return yield this.battle_log.add(`${t.caster.name} summons ${e.name} but`),yield this.battle_log.add("doesn't have enough standby Djinn!"),yield this.wait_for_key(),void this.check_phases();m.Djinn.set_to_recovery(this.data.info.djinni_list,g.MainChar.get_active_players(this.data.info.party_data,v.MAX_CHARS_IN_BATTLE),i)}if(t.item_slot&&t.item_slot.broken)return yield this.battle_log.add(`But ${i} is broken...`),yield this.wait_for_key(),void this.check_phases();if(this.battle_menu.chars_status_window.update_chars_info(),e.type===h.ability_types.UTILITY&&(yield this.wait_for_key()),this.animation_manager.animation_available(t.battle_animation_key)){const e=t.caster.fighter_type===n.fighter_types.ALLY?this.allies_map_sprite[t.caster.key_name]:this.enemies_map_sprite[t.caster.key_name],i=t.targets.flatMap(t=>t.magnitude?[t.target.sprite]:[]),s=t.caster.fighter_type===n.fighter_types.ALLY?this.battle_stage.group_allies:this.battle_stage.group_enemies,a=t.caster.fighter_type===n.fighter_types.ALLY?this.battle_stage.group_enemies:this.battle_stage.group_allies;yield this.animation_manager.play(t.battle_animation_key,e,i,s,a,this.battle_stage),this.battle_stage.prevent_camera_angle_overflow()}else yield this.battle_log.add(`Animation for ${e.name} not available...`),yield this.wait_for_key();[h.ability_types.UTILITY,h.ability_types.EFFECT_ONLY].includes(e.type)||(yield this.apply_damage(t,e));for(let i=0;i<e.effects.length;++i){const s=e.effects[i];if(!u.effect_usages.ON_USE)continue;if(yield this.apply_effects(t,e,s))return this.battle_phase=b.ROUND_END,void this.check_phases()}if(yield this.battle_stage.set_stage_default_position(),e.ability_category===h.ability_categories.SUMMON){const i=this.data.info.summons_list[e.key_name].requirements;for(let s=0;s<p.ordered_elements.length;++s){const n=p.ordered_elements[s],a=d.BattleFormulas.summon_power(i[n]);a>0&&(t.caster.add_effect({type:"power",quantity:a,operator:"plus",attribute:n},e,!0),yield this.battle_log.add(`${t.caster.name}'s ${p.element_names[n]} Power rises by ${a.toString()}!`),yield this.wait_for_key())}}if(t.item_slot){const e=this.data.info.items_list[t.item_slot.key_name];e.use_type===f.use_types.SINGLE_USE?--t.item_slot.quantity:e.use_type===f.use_types.BREAKS_WHEN_USE&&Math.random()<f.Item.BREAKS_CHANCE&&(t.item_slot.broken=!0,yield this.battle_log.add(e.name+" broke..."),yield this.wait_for_key())}const a=t.caster.is_poisoned();if(a){let e=d.BattleFormulas.battle_poison_damage(t.caster,a);e>t.caster.current_hp&&(e=t.caster.current_hp),t.caster.current_hp=w.clamp(t.caster.current_hp-e,0,t.caster.max_hp);const i=a===n.permanent_status.POISON?"poison":"venom";yield this.battle_log.add(`The ${i} does ${e.toString()} damage to ${t.caster.name}!`),this.battle_menu.chars_status_window.update_chars_info(),yield this.wait_for_key(),yield this.check_downed(t.caster)}if(t.caster.has_temporary_status(n.temporary_status.DEATH_CURSE)){const e=w.find(t.caster.effects,{status_key_name:n.temporary_status.DEATH_CURSE});1===t.caster.get_effect_turns_count(e)&&(t.caster.current_hp=0,t.caster.add_permanent_status(n.permanent_status.DOWNED),yield this.battle_log.add("The Grim Reaper calls out to "+t.caster.name),yield this.wait_for_key())}this.check_phases()}))}apply_damage(t,e){return s(this,void 0,void 0,(function*(){let i;e.has_critical&&(i=t.caster.effects.filter(t=>t.type===u.effect_types.CRITICALS).reduce((t,e)=>u.Effect.apply_operator(t,e.quantity,e.operator),0));for(let s=0;s<t.targets.length;++s){const a=t.targets[s];if(null===a.magnitude)continue;const _=a.target.instance;if(_.has_permanent_status(n.permanent_status.DOWNED))continue;if(e.can_be_evaded&&(Math.random()<d.EVASION_CHANCE||t.caster.temporary_status.has(n.temporary_status.DELUSION)&&Math.random()<d.DELUSION_MISS_CHANCE))return yield this.battle_log.add(_.name+" nimbly dodges the blow!"),this.wait_for_key();let o=0;if(e.has_critical&&(Math.random()<d.CRITICAL_CHANCE||Math.random()<i/2)){const i=void 0===e.crit_mult_factor?1.25:e.crit_mult_factor,s=6+_.level/5;o=d.BattleFormulas.physical_attack(t.caster,_,i,s,e.element)}else switch(e.type){case h.ability_types.ADDED_DAMAGE:o=d.BattleFormulas.physical_attack(t.caster,_,1,e.ability_power,e.element);break;case h.ability_types.MULTIPLIER:o=d.BattleFormulas.physical_attack(t.caster,_,e.ability_power/10,0,e.element);break;case h.ability_types.BASE_DAMAGE:o=d.BattleFormulas.psynergy_damage(t.caster,_,e.ability_power,e.element);break;case h.ability_types.HEALING:o=-d.BattleFormulas.heal_ability(t.caster,e.ability_power,e.element);break;case h.ability_types.SUMMON:const i=w.sum(w.values(this.data.info.summons_list[e.key_name].requirements));o=d.BattleFormulas.summon_damage(_,e.ability_power,i);break;case h.ability_types.DIRECT_DAMAGE:o=e.ability_power}const r=h.Ability.get_diminishing_ratios(e.type,e.use_diminishing_ratio);o=o*r[a.magnitude]|0,o+=p.variation(),o>=0&&_.effects.forEach(t=>{t.type===u.effect_types.DAMAGE_MODIFIER&&(o=t.apply_effect(o).after)}),yield this.battle_log.add_damage(o,_,e.affects_pp);const c=e.affects_pp?n.main_stats.CURRENT_PP:n.main_stats.CURRENT_HP,l=e.affects_pp?n.main_stats.MAX_PP:n.main_stats.MAX_HP;_.current_hp=w.clamp(_[c]-o,0,_[l]),this.battle_menu.chars_status_window.update_chars_info(),yield this.wait_for_key(),yield this.check_downed(_);for(let i=0;i<e.effects.length;++i){const s=e.effects[i];if(s.type===u.effect_types.DAMAGE_INPUT){const i=s.on_caster?t.caster:_,n=i.add_effect(s,e).effect,a=n.apply_effect(o);if([u.effect_types.CURRENT_HP,u.effect_types.CURRENT_PP].includes(n.sub_effect.type)){const t=a.before-a.after;0!==t&&(n.effect_msg?yield this.battle_log.add(u.effect_msg[n.effect_msg](_)):yield this.battle_log.add_damage(t,i,n.sub_effect.type===u.effect_types.CURRENT_PP),this.battle_menu.chars_status_window.update_chars_info(),yield this.wait_for_key()),yield this.check_downed(i)}i.remove_effect(n)}}}}))}apply_effects(t,e,i){return s(this,void 0,void 0,(function*(){let s;for(let a=0;a<t.targets.length;++a){const _=t.targets[a];if(null===_.magnitude)continue;const o=_.target.instance;if(!o.has_permanent_status(n.permanent_status.DOWNED))switch(i.type){case u.effect_types.PERMANENT_STATUS:if(i.add_status){if(o.has_permanent_status(i.status_key_name))break;if(i.status_key_name===n.permanent_status.POISON&&o.has_permanent_status(n.permanent_status.VENOM))break}case u.effect_types.TEMPORARY_STATUS:if(i.add_status){let s=w.find(o.class.vulnerabilities,{status_key_name:i.status_key_name});s=void 0===s?0:s.chance;const a=h.diminishing_ratios.STATUS[_.magnitude];if(d.BattleFormulas.ailment_success(t.caster,o,i.chance,a,e.element,s)){const t=o.add_effect(i,e,!0).effect;if(t.type===u.effect_types.TEMPORARY_STATUS)o.has_temporary_status(t.status_key_name)||this.on_going_effects.push(t),t.status_key_name===n.temporary_status.DEATH_CURSE&&o.has_temporary_status(n.temporary_status.DEATH_CURSE)?o.set_effect_turns_count(t):o.set_effect_turns_count(t,t.turn_count,!1);else if(t.status_key_name===n.permanent_status.VENOM&&o.has_permanent_status(n.permanent_status.POISON)){const t=w.find(o.effects,{status_key_name:n.permanent_status.POISON});o.remove_effect(t,!0)}yield this.battle_log.add(n.on_catch_status_msg[i.status_key_name](o))}else yield this.battle_log.add(`But it has no effect on ${o.name}!`);yield this.wait_for_key()}else if(Math.random()<i.chance){let t=!1;for(;;){const t=w.find(o.effects,{status_key_name:i.status_key_name});if(!t)break;o.remove_effect(t,!0),t.status_key_name===n.permanent_status.DOWNED&&o.init_effect_turns_count(),t.type===u.effect_types.TEMPORARY_STATUS&&(this.on_going_effects=this.on_going_effects.filter(e=>e!==t))}t&&(this.battle_log.add_recover_effect(i),yield this.wait_for_key())}break;case u.effect_types.CURRENT_HP:if(s=o.add_effect(i,e,!0),s.effect.show_msg){const t=s.changes.before-s.changes.after;yield this.battle_log.add_damage(t,o),this.battle_menu.chars_status_window.update_chars_info(),yield this.wait_for_key()}yield this.check_downed(o),void 0!==s.effect.turns_quantity?this.on_going_effects.push(s.effect):o.remove_effect(s.effect);break;case u.effect_types.MAX_HP:case u.effect_types.MAX_PP:case u.effect_types.ATTACK:case u.effect_types.DEFENSE:case u.effect_types.AGILITY:case u.effect_types.LUCK:case u.effect_types.POWER:case u.effect_types.RESIST:if(s=o.add_effect(i,e,!0),this.on_going_effects.push(s.effect),o.set_effect_turns_count(s.effect,s.effect.turn_count,!1),s.effect.show_msg){const t=s.changes.after-s.changes.before,e=t>=0?"rises":"drops";let n="";[u.effect_types.POWER,u.effect_types.RESIST].includes(i.type)&&(n=p.element_names[s.effect.attribute]+" "),yield this.battle_log.add(`${o.name}'s ${n}${u.effect_names[i.type]} ${e} by ${Math.abs(t)}!`),this.battle_menu.chars_status_window.update_chars_info(),yield this.wait_for_key()}break;case u.effect_types.END_THE_ROUND:return yield this.battle_log.add("Everybody is resting!"),yield this.wait_for_key(),!0;case u.effect_types.TURNS:yield this.battle_log.add(t.caster.name+" readies for action!"),yield this.wait_for_key(),this.on_going_effects.push(o.add_effect(i,e,!0).effect);break;case u.effect_types.DAMAGE_MODIFIER:yield this.battle_log.add(u.effect_msg[i.effect_msg](o)),yield this.wait_for_key(),this.on_going_effects.push(o.add_effect(i,e,!0).effect);break;case u.effect_types.COUNTER_STRIKE:case u.effect_types.FLEE:break;default:this.on_going_effects.push(o.add_effect(i,e,!0).effect)}}return!1}))}battle_phase_round_end(){return s(this,void 0,void 0,(function*(){let t=[],e={};for(let i=0;i<this.on_going_effects.length;++i){const s=this.on_going_effects[i];if(s.char.has_permanent_status(n.permanent_status.DOWNED)){s.char.remove_effect(s),s.char.update_all(),t.push(i);continue}let a=!1;void 0!==s.turn_count&&(null!==s.char.get_effect_turns_count(s)?(s.char.key_name in e&&s.char.get_effect_turns_key(s)in e[s.char.key_name]||s.char.set_effect_turns_count(s),s.turn_count=s.char.get_effect_turns_count(s),e[s.char.key_name]?e[s.char.key_name][s.char.get_effect_turns_key(s)]=s:e[s.char.key_name]={[s.char.get_effect_turns_key(s)]:s},a=!0):--s.turn_count,0===s.turn_count&&(s.char.remove_effect(s),s.char.update_all(),t.push(i),a||(this.battle_log.add_recover_effect(s),yield this.wait_for_key())))}for(let t in e)for(let i in e[t]){const s=e[t][i];0===s.turn_count&&(this.battle_log.add_recover_effect(s),yield this.wait_for_key())}this.on_going_effects=this.on_going_effects.filter((e,i)=>!t.includes(i));for(let t=0;t<v.MAX_CHARS_IN_BATTLE;++t){const e=this.data.info.party_data.members[t];if(void 0===e)continue;const i=e.djinni;for(let t=0;t<i.length;++t){const s=i[t],n=this.data.info.djinni_list[s];n.status===m.djinn_status.RECOVERY&&(0===n.recovery_turn?(n.set_status(m.djinn_status.SET,e),yield this.battle_log.add(`${n.name} is set to ${e.name}!`),yield this.wait_for_key()):--n.recovery_turn)}}this.battle_log.clear(),this.battle_phase=b.MENU,this.check_phases()}))}battle_phase_end(){return s(this,void 0,void 0,(function*(){for(let t=0;t<this.on_going_effects.length;++t){const e=this.on_going_effects[t];e.type!==u.effect_types.PERMANENT_STATUS&&(e.char.remove_effect(e),e.char.update_all())}if(this.allies_defeated)this.battle_log.add(this.allies_info[0].instance.name+"' party has been defeated!");else{this.battle_log.add(this.enemies_party_name+" has been defeated!"),yield this.wait_for_key();const t=this.enemies_info.map(t=>t.instance.exp_reward).reduce((t,e)=>t+e,0);this.battle_log.add(`You got ${t.toString()} experience points.`),yield this.wait_for_key();for(let e=0;e<this.allies_info.length;++e){const i=this.allies_info[e],s=i.instance;if(!s.has_permanent_status(n.permanent_status.DOWNED)){const e=s.add_exp(i.entered_in_battle?t:t>>1);if(e.before.level!==e.after.level){this.battle_log.add(`${s.name} is now a level ${s.level} ${s.class.name}!`),yield this.wait_for_key();const t=w.difference(e.after.abilities,e.before.abilities);for(let e=0;e<t.length;++e){const i=this.data.info.abilities_list[t[e]];this.battle_log.add(`Mastered the ${s.class.name}'s ${i.name}!`),yield this.wait_for_key()}for(let t=0;t<e.before.stats.length;++t){const i=Object.keys(e.before.stats[t])[0],s=e.after.stats[t][i]-e.before.stats[t][i];if(0!==s){let t;switch(i){case n.main_stats.MAX_HP:t="Maximum HP";break;case n.main_stats.MAX_PP:t="Maximum PP";break;case n.main_stats.ATTACK:t="Attack";break;case n.main_stats.DEFENSE:t="Defense";break;case n.main_stats.AGILITY:t="Agility";break;case n.main_stats.LUCK:t="Luck"}this.battle_log.add(`${t} rises by ${s.toString()}!`),yield this.wait_for_key()}}}}}const e=this.enemies_info.map(t=>t.instance.coins_reward).reduce((t,e)=>t+e,0);this.battle_log.add(`You got ${e.toString()} coins.`),yield this.wait_for_key();for(let t=0;t<this.enemies_info.length;++t){const e=this.enemies_info[t].instance;if(e.item_reward&&Math.random()<e.item_reward_chance){const t=this.data.info.items_list[e.item_reward];void 0!==t?g.MainChar.add_item_to_party(this.data.info.party_data,t,1)&&(this.battle_log.add(`You got a ${t.name}.`),yield this.wait_for_key()):(this.battle_log.add(e.item_reward+" not registered..."),yield this.wait_for_key())}}}this.unset_battle()}))}unset_battle(){this.battle_finishing=!0,this.battle_stage.unset_stage(()=>{this.data.control_manager.reset(),this.data.control_manager.detach_bindings(this.advance_log_control_key),this.battle_log.destroy(),this.battle_menu.destroy_menu(),this.target_window.destroy(),this.animation_manager.destroy()},()=>{this.data.in_battle=!1,this.data.battle_instance=void 0,this.game.physics.p2.resume(),this.data.audio.play_bgm()})}update(){this.battle_finishing||(this.battle_stage.update_stage(),this.animation_manager.render())}}e.Battle=v,v.MAX_CHARS_IN_BATTLE=4},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.HorizontalMenu=void 0;const s=i(0),n=i(1),a=i(2),_=i(3),o=n.GAME_HEIGHT-24,r=24-n.OUTSIDE_BORDER_WIDTH-n.INSIDE_BORDER_WIDTH;e.HorizontalMenu=class{constructor(t,e,i,h,c,l,d=!1){this.game=t,this.data=e,this.buttons_keys=i,this.titles=h,this.on_cancel=()=>{this.on_cancel&&(this.data.audio.play_se("menu_se","menu_negative"),c.on_cancel())},this.on_press=()=>{this.on_press&&(this.data.audio.play_se("menu_se","menu_positive"),c.on_press())},this.buttons_number=i.length;const u=s.get_text_width(this.game,_.maxBy(h,t=>t.length));this.title_window_width=void 0!==l?l:u+2*(n.WINDOW_PADDING_H+n.INSIDE_BORDER_WIDTH);const p=24*this.buttons_number+this.title_window_width+2*n.OUTSIDE_BORDER_WIDTH+2;this.dock_right=d,this.custom_scale=null,this.selected_button_index=0,this.menu_open=!1,this.menu_active=!1,this.selected_button_tween=null,this.x=n.GAME_WIDTH-p,this.dock_right||(this.x=this.x>>1),this.y=o,this.title_window=new a.Window(this.game,this.x+24*this.buttons_number,this.y,this.title_window_width,r),this.group=t.add.group(),this.group.alpha=0,this.group.width=0,this.group.height=0,this.mount_buttons()}set_control(){let t=[{key:this.data.gamepad.LEFT,on_down:this.previous_button.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.next_button.bind(this)},{key:this.data.gamepad.A,on_down:this.on_press.bind(this)},{key:this.data.gamepad.B,on_down:this.on_cancel.bind(this)}];this.data.control_manager.set_control(t,{loop_configs:{horizontal:!0}})}mount_buttons(t=[]){const e=this.buttons_keys.filter(e=>!t.includes(e));this.buttons_number=e.length;const i=24*this.buttons_number+this.title_window_width+(n.OUTSIDE_BORDER_WIDTH<<1)+2;this.x=n.GAME_WIDTH-i,this.dock_right||(this.x=this.x>>1),this.title_window.update_position({x:this.x+24*this.buttons_number}),this.buttons&&this.buttons.forEach(t=>{t.sprite.destroy()}),this.buttons=new Array(this.buttons_number);for(let t=0;t<this.buttons_number;++t)this.buttons[t]={sprite:this.group.create(0,0,"buttons",e[t]),title:this.titles[t]},this.buttons[t].sprite.anchor.setTo(.5,1),this.buttons[t].sprite.centerX=24*(t+.5)|0,this.buttons[t].sprite.centerY=12}change_button(t){this.reset_button(),this.data.audio.play_se("menu_se","menu_move"),this.selected_button_index=(this.selected_button_index+t)%this.buttons_number,this.selected_button_index<0&&(this.selected_button_index=this.buttons_number-1),this.title_window.set_text([[this.buttons[this.selected_button_index].title]]),this.set_button()}next_button(){this.change_button(1)}previous_button(){this.change_button(-1)}set_to_position(t){this.reset_button(),this.selected_button_index=t,this.title_window.set_text([[this.buttons[this.selected_button_index].title]]),this.set_button()}set_button(){let t=1.15,e=1.25;this.custom_scale&&(t=this.custom_scale.active_default,e=this.custom_scale.max_scale),this.buttons[this.selected_button_index].sprite.scale.setTo(t,t),this.buttons[this.selected_button_index].sprite.bringToTop(),this.selected_button_tween=this.game.add.tween(this.buttons[this.selected_button_index].sprite.scale).to({x:e,y:e},Phaser.Timer.QUARTER>>1,Phaser.Easing.Linear.None,!0,0,-1,!0)}reset_button(){this.buttons[this.selected_button_index]&&this.buttons[this.selected_button_index].sprite.scale.setTo(1,1),this.selected_button_tween&&this.selected_button_tween.stop()}update_position(){this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y,this.title_window.update(!0)}open(t,e=0,i=!0,s){let n;this.reset_button(),s&&(this.custom_scale=s),this.menu_active=i,this.group.alpha=1,this.selected_button_index=e,this.update_position(),this.title_window.set_text([[this.buttons[this.selected_button_index].title]]);let a,_=new Promise(t=>{n=t});this.title_window.show(n);let o=new Promise(t=>{a=t});this.game.add.tween(this.group).to({width:24*this.buttons_number,height:24},Phaser.Timer.QUARTER>>2,Phaser.Easing.Linear.None,!0).onComplete.addOnce(a),Promise.all([_,o]).then(()=>{this.set_button(),this.menu_open=!0,t&&t(),this.set_control(),this.game.world.bringToTop(this.group)})}close(t,e=!0){if(this.reset_button(),this.data.control_manager.reset(),this.menu_open=!1,this.group.alpha=0,e){let e,i=new Promise(t=>{e=t});this.title_window.close(e);const s=Phaser.Timer.QUARTER>>2;let n,a=new Promise(t=>{n=t});this.game.add.tween(this.group).to({width:0,height:0},s,Phaser.Easing.Linear.None,!0).onComplete.addOnce(n),Promise.all([i,a]).then(void 0!==t?t:()=>{})}else this.title_window.close(void 0,!1),this.group.width=this.group.height=0,t&&t()}activate(){this.menu_active=!0,this.buttons.forEach(t=>{t.sprite.alpha=1}),this.title_window.open||this.title_window.show(void 0,!1),this.title_window.set_text([[this.buttons[this.selected_button_index].title]]),this.set_button(),this.set_control()}deactivate(t=!1){this.data.control_manager.reset(),this.reset_button(),this.menu_active=!1,t&&(this.buttons.forEach(t=>{t.sprite.alpha=0}),this.title_window.close(void 0,!1))}destroy(){this.title_window.destroy(!1),this.group.destroy()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GameEvent=e.event_types=void 0,function(t){t.BATTLE="battle"}(e.event_types||(e.event_types={}));class s{constructor(t,e,i){this.game=t,this.data=e,this.type=i,this.id=s.id_incrementer++,s.events[this.id]=this}static get_event(t){return s.events[t]}static reset(){s.id_incrementer=0,s.events={}}}e.GameEvent=s,s.reset()},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FieldAbilities=void 0;const s=i(71),n=i(0),a=i(28),_=i(72);e.FieldAbilities=class{constructor(t,e,i,s,n,a){this.game=t,this.ability_key_name=i,this.data=e,this.target_max_range=s,this.action_key_name=n,this.need_target=a,this.bootstrap_method=()=>{},this.cast_finisher=()=>{},this.controllable_char=null,this.target_found=!1,this.target_object=null,this.stop_casting=null,this.field_psynergy_window=new _.FieldPsynergyWindow(this.game,this.data)}get_cast_direction(t){return t%2==0?t:++t===n.directions_count?n.directions.right:t}set_hero_cast_anim(){this.controllable_char.play(this.action_key_name,n.reverse_directions[this.cast_direction])}unset_hero_cast_anim(){this.controllable_char.sprite.animations.currentAnim.reverseOnce(),this.controllable_char.sprite.animations.currentAnim.onComplete.addOnce(()=>{this.controllable_char.play(n.base_actions.IDLE,n.reverse_directions[this.cast_direction])}),this.controllable_char.play(this.action_key_name,n.reverse_directions[this.cast_direction])}set_bootstrap_method(t){this.bootstrap_method=t}set_cast_finisher_method(t){this.cast_finisher=t}search_for_target(){let t,e,i,s;this.target_found=!1,this.cast_direction===n.directions.up||this.cast_direction===n.directions.down?(t=this.controllable_char.sprite.x-this.controllable_char.body_radius,e=this.controllable_char.sprite.x+this.controllable_char.body_radius,this.cast_direction===n.directions.up?(i=this.controllable_char.sprite.y-this.controllable_char.body_radius-this.target_max_range,s=this.controllable_char.sprite.y-this.controllable_char.body_radius):(i=this.controllable_char.sprite.y+this.controllable_char.body_radius,s=this.controllable_char.sprite.y+this.controllable_char.body_radius+this.target_max_range)):(i=this.controllable_char.sprite.y-this.controllable_char.body_radius,s=this.controllable_char.sprite.y+this.controllable_char.body_radius,this.cast_direction===n.directions.left?(t=this.controllable_char.sprite.x-this.controllable_char.body_radius-this.target_max_range,e=this.controllable_char.sprite.x-this.controllable_char.body_radius):(t=this.controllable_char.sprite.x+this.controllable_char.body_radius,e=this.controllable_char.sprite.x+this.controllable_char.body_radius+this.target_max_range));let a=1/0;for(let n=0;n<this.data.map.interactable_objects.length;++n){let _=this.data.map.interactable_objects[n];if(!(this.ability_key_name in this.data.dbs.interactable_objects_db[_.key_name].psynergy_keys))continue;const o=_.current_x*this.data.map.sprite.tileWidth+(this.data.map.sprite.tileWidth>>1),r=_.current_y*this.data.map.sprite.tileHeight+(this.data.map.sprite.tileHeight>>1),h=r>=i&&r<=s;if(o>=t&&o<=e&&h&&this.data.map.collision_layer===_.base_collision_layer){let t=Math.pow(o-this.controllable_char.sprite.x,2)+Math.pow(r-this.controllable_char.sprite.y,2);t<a&&(a=t,this.target_found=!0,this.target_object=_)}}}set_target_casted(){if(this.target_object){if(this.data.dbs.interactable_objects_db[this.target_object.key_name].psynergy_keys[this.ability_key_name].interaction_type===a.interactable_object_interaction_types.ONCE){const t=this.ability_key_name+"_casted";this.target_object.custom_data[t]?(this.target_found=!1,this.target_object=null):this.target_found&&(this.target_object.custom_data[t]=!0)}}}cast(t,e){if(this.controllable_char=t,this.controllable_char.casting_psynergy)return;if(void 0!==e&&e in this.data.info.main_char_list){const t=this.data.info.main_char_list[e],i=this.data.info.abilities_list[this.ability_key_name];if(t.current_pp<i.pp_cost||!t.abilities.includes(this.ability_key_name))return;t.current_pp-=i.pp_cost}let i;this.field_psynergy_window.window.send_to_front(),this.field_psynergy_window.open(this.ability_key_name),this.controllable_char.casting_psynergy=!0,this.data.audio.play_se("psynergy_se","psynergy_4"),this.game.physics.p2.pause(),this.controllable_char.stop_char(!1),this.cast_direction=this.get_cast_direction(this.controllable_char.current_direction),this.controllable_char.set_direction(this.cast_direction),this.need_target&&(this.search_for_target(),this.set_target_casted()),this.set_hero_cast_anim(),this.stop_casting=s.init_cast_aura(this.game,this.controllable_char.sprite,this.data.npc_group,this.controllable_char.color_filter,()=>{i=s.tint_map_layers(this.game,this.data.map,this.data.map.color_filter),this.bootstrap_method()},()=>{this.game.physics.p2.resume(),this.controllable_char.casting_psynergy=!1,this.target_object=null},()=>{this.cast_finisher(),i()})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ControllableChar=void 0;const s=i(1),n=i(0),a=i(42);class _{constructor(t,e,i,s,n,_,o,r,h,c,l){this.game=t,this.data=e,this.key_name=i,this.x_speed=0,this.y_speed=0,this.extra_speed=0,this.walk_speed=h,this.dash_speed=c,this.climb_speed=l,this.stop_by_colliding=!1,this.force_direction=!1,this.dashing=!1,this.climbing=!1,this.pushing=!1,this.jumping=!1,this.sliding=!1,this.casting_psynergy=!1,this.teleporting=!1,this.idle_climbing=!1,this.sprite_info=null,this.sprite=null,this.shadow=null,this.body_radius=0,this.tile_x_pos=s,this.tile_y_pos=n,this.current_action=_,this.current_direction=o,this.required_direction=0,this.desired_direction=o,this.color_filter=this.game.add.filter("ColorFilters"),this.trying_to_push=!1,this.trying_to_push_direction=null,this.push_timer=null,this.enable_footsteps=void 0!==r&&r,this.footsteps=new a.Footsteps(this.game,this.data),this.crop_texture=!1,this.shadow_following=!0}in_action(t=!1){return this.casting_psynergy||this.pushing||this.climbing&&!t||this.jumping||this.teleporting||this.sliding}set_sprite(t,e,i,n,a,o,r=!1){a=void 0===a?_.default_anchor.x:a,o=void 0===o?_.default_anchor.y:o,this.sprite_info=e;const h=this.sprite_info.getActionKey(this.current_action);this.sprite=t.create(0,0,h),this.sprite.anchor.setTo(a,o),this.sprite.x=(this.tile_x_pos+.5)*i.tileWidth|0,this.sprite.y=(this.tile_y_pos+.5)*i.tileHeight|0,this.sprite.base_collision_layer=n,this.sprite.roundPx=!0;const c=r?s.WORLD_MAP_SPRITE_SCALE_X:1,l=r?s.WORLD_MAP_SPRITE_SCALE_Y:1;this.sprite.scale.setTo(c,l)}reset_anchor(t){void 0!==t&&["x","y"].includes(t)?this.sprite.anchor[t]=_.default_anchor[t]:(this.sprite.anchor.x=_.default_anchor.x,this.sprite.anchor.y=_.default_anchor.y)}set_shadow(t,e,i,n,a,o=!1){t=void 0===t?_.DEFAULT_SHADOW_KEYNAME:t,n=void 0===n?_.DEFAULT_SHADOW_ANCHOR_X:n,a=void 0===a?_.DEFAULT_SHADOW_ANCHOR_Y:a,this.shadow=e.create(0,0,t),this.shadow.blendMode=PIXI.blendModes.MULTIPLY,this.shadow.disableRoundPx=!0,this.shadow.anchor.setTo(n,a),this.shadow.base_collision_layer=i;const r=o?s.WORLD_MAP_SPRITE_SCALE_X:1,h=o?s.WORLD_MAP_SPRITE_SCALE_Y:1;this.shadow.scale.setTo(r,h)}camera_follow(){this.game.camera.follow(this.sprite,Phaser.Camera.FOLLOW_LOCKON,s.CAMERA_LERP,s.CAMERA_LERP),this.game.camera.focusOn(this.sprite)}set_collision_layer(t){this.sprite.base_collision_layer=t,this.shadow.base_collision_layer=t}play(t,e,i=!0){if(t=void 0===t?this.current_action:t,e=void 0===e?n.reverse_directions[this.current_direction]:e,this.sprite_info.getSpriteAction(this.sprite)!==t){const e=this.sprite_info.getActionKey(t);this.sprite.loadTexture(e)}const s=this.sprite_info.getAnimationKey(t,e);this.sprite.animations.getAnimation(s)||this.sprite_info.setAnimation(this.sprite,t);const a=this.sprite.animations.getAnimation(s);return i?this.sprite.animations.play(s):a.stop(!0),a}set_frame(t,e=0){const i=this.sprite_info.getFrameName(this.current_action,n.reverse_directions[t],e);this.sprite.frameName=i}update_shadow(){this.shadow&&this.shadow_following&&(this.sprite.body?(this.shadow.x=this.sprite.body.x,this.shadow.y=this.sprite.body.y):(this.shadow.x=this.sprite.x,this.shadow.y=this.sprite.y))}create_half_crop_mask(t=!1){t&&(this.sprite.mask=this.game.add.graphics(this.sprite.centerX-(this.sprite.width>>1),this.sprite.centerY-(this.sprite.height>>1)),this.sprite.mask.beginFill(16777215,1),this.sprite.mask.drawRect(0,0,this.sprite.width,this.sprite.height),this.sprite.mask.endFill())}set_half_crop_mask(t,e=!1){!t||this.crop_texture&&!e?t||!this.crop_texture&&!e||(this.sprite.mask.clear(),this.sprite.mask.beginFill(16777215,1),this.sprite.mask.drawRect(0,0,this.sprite.width,this.sprite.height),this.sprite.mask.endFill(),this.crop_texture=!1,this.shadow.visible=!0):(this.sprite.mask.clear(),this.sprite.mask.beginFill(16777215,1),this.sprite.mask.drawRect(0,0,this.sprite.width,(3*this.sprite.height|0)>>2),this.sprite.mask.endFill(),this.shadow.visible=!1,this.crop_texture=!0)}check_half_crop_tile(t=!1){const e=this.data.map.get_current_tile(this);for(let i=0;i<e.length;++i){if(e[i].properties.half_crop)return void this.set_half_crop_mask(!0,t)}this.set_half_crop_mask(!1,t)}update_half_crop(t=!1){this.sprite.mask&&(t&&(this.sprite.update(),this.sprite.postUpdate()),this.sprite.mask.x=this.sprite.centerX-(this.sprite.width>>1),this.sprite.mask.y=this.sprite.centerY-(this.sprite.height>>1),this.data.map.is_world_map&&this.check_half_crop_tile(t))}stop_char(t=!0){this.sprite.body&&(this.sprite.body.velocity.y=this.sprite.body.velocity.x=0),t&&(this.current_action=n.base_actions.IDLE,this.set_action())}set_direction(t){this.current_direction=this.desired_direction=t}set_action(t=!1){if(t&&this.data.tile_event_manager.on_event)return;let e=this.current_action,i=this.idle_climbing;!this.stop_by_colliding||this.pushing||this.climbing?this.stop_by_colliding&&!this.pushing&&this.climbing&&(i=!0):e=n.base_actions.IDLE;const s=i?n.base_actions.IDLE:n.reverse_directions[this.desired_direction];this.play(e,s)}tile_able_to_show_footprint(){const t=this.data.map.get_current_tile(this);for(let e=0;e<t.length;++e){const i=t[e];if(i.properties.hasOwnProperty("disable_footprint")){if(i.properties.disable_footprint.split(",").map(t=>parseInt(t)).includes(this.data.map.collision_layer))return!1}}return!0}set_current_action(){if(!this.data.tile_event_manager.on_event)if(null!==this.required_direction||this.current_action===n.base_actions.IDLE||this.climbing){if(null!==this.required_direction&&!this.climbing&&!this.pushing){const t=this.enable_footsteps&&this.data.map.show_footsteps&&this.tile_able_to_show_footprint();this.footsteps.can_make_footprint&&t&&this.footsteps.create_step(this.current_direction,this.current_action),this.dashing&&this.current_action!==n.base_actions.DASH?this.current_action=n.base_actions.DASH:this.dashing||this.current_action===n.base_actions.WALK||(this.current_action=n.base_actions.WALK)}}else this.current_action=n.base_actions.IDLE}update_tile_position(t){this.tile_x_pos=this.sprite.x/t.tileWidth|0,this.tile_y_pos=this.sprite.y/t.tileHeight|0}calculate_speed(){const t=this.game.time.elapsedMS/s.DELTA_TIME_FACTOR;if(this.current_action===n.base_actions.DASH){const e=this.dash_speed+this.extra_speed+(this.data.map.is_world_map?s.WORLD_MAP_SPEED_DASH_REDUCE:0);this.sprite.body.velocity.temp_x=t*this.x_speed*e|0,this.sprite.body.velocity.temp_y=t*this.y_speed*e|0}else if(this.current_action===n.base_actions.WALK){const e=this.walk_speed+this.extra_speed+(this.data.map.is_world_map?s.WORLD_MAP_SPEED_WALK_REDUCE:0);this.sprite.body.velocity.temp_x=t*this.x_speed*e|0,this.sprite.body.velocity.temp_y=t*this.y_speed*e|0}else this.current_action===n.base_actions.CLIMB?(this.sprite.body.velocity.temp_x=t*this.x_speed*this.climb_speed|0,this.sprite.body.velocity.temp_y=t*this.y_speed*this.climb_speed|0):this.current_action===n.base_actions.IDLE&&(this.sprite.body.velocity.y=this.sprite.body.velocity.x=0)}apply_speed(){[n.base_actions.WALK,n.base_actions.DASH,n.base_actions.CLIMB].includes(this.current_action)&&(this.sprite.body.velocity.x=this.sprite.body.velocity.temp_x,this.sprite.body.velocity.y=this.sprite.body.velocity.temp_y)}set_speed(t,e){this.x_speed=void 0===t?this.x_speed:t,this.y_speed=void 0===e?this.y_speed:e,this.calculate_speed(),this.apply_speed()}}e.ControllableChar=_,_.DEFAULT_SHADOW_KEYNAME="shadow",_.DEFAULT_SHADOW_ANCHOR_X=.45,_.DEFAULT_SHADOW_ANCHOR_Y=.05,_.DEFAULT_SPRITE_ANCHOR_X=.5,_.DEFAULT_SPRITE_ANCHOR_Y=.8,_.default_anchor={x:_.DEFAULT_SPRITE_ANCHOR_X,y:_.DEFAULT_SPRITE_ANCHOR_Y}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.fire_push_movement=e.target_only_push=e.normal_push=void 0;const s=i(1),n=i(6),a=i(0),_=i(16);function o(t,e,i,n,_,o=!1,c=!0,l){let d;if(!o){let t=e.hero.sprite.x+(-i.sprite.y-i.sprite.x),s=-e.hero.sprite.x+(-i.sprite.y+i.sprite.x);-e.hero.sprite.y>=t&&-e.hero.sprite.y>=s?d=a.directions.down:-e.hero.sprite.y<=t&&-e.hero.sprite.y>=s?d=a.directions.left:-e.hero.sprite.y<=t&&-e.hero.sprite.y<=s?d=a.directions.up:-e.hero.sprite.y>=t&&-e.hero.sprite.y<=s&&(d=a.directions.right)}if(o||d===e.hero.trying_to_push_direction){o?e.audio.play_se("menu_se","menu_positive_4"):(e.hero.pushing=!0,e.audio.play_se("actions_se","push"),e.hero.current_action=a.base_actions.PUSH,e.hero.set_action()),t.physics.p2.pause();let d=0,u=0,p=0,m=0;switch(e.hero.trying_to_push_direction){case a.directions.up:m=-1,u=-16;break;case a.directions.down:m=1,u=16;break;case a.directions.left:p=-1,d=-16;break;case a.directions.right:p=1,d=16}r(e,i,p,m);let g=[i.sprite.body];o||g.push(e.hero.shadow,e.hero.sprite.body);const y=i.current_x,w=i.current_y;i.current_x+=p,i.current_y+=m;let f=[];void 0!==_&&_(d,u),i.custom_data.blocking_stair_block&&(i.custom_data.blocking_stair_block.x+=d,i.custom_data.blocking_stair_block.y+=u);for(let n=0;n<g.length;++n){let _,o=g[n],c=o.x+d,b=o.y+u;o!==e.hero.shadow&&o!==e.hero.sprite.body||(0===d?c=e.map.sprite.tileWidth*(y+p+.5):0===u&&(b=e.map.sprite.tileHeight*(w+m+.5))),f.push(new Promise(t=>{_=t}));const v=t.add.tween(o).to({x:c,y:b},s.PUSH_TIME,Phaser.Easing.Linear.None,!0);l&&v.onUpdateCallback(l),v.onComplete.addOnce(()=>{let s=!1;n===g.length-1&&i.object_drop_tiles.forEach(n=>{if(n.x===i.current_x&&n.y===i.current_y){s=!0;const o=(n.dest_y-i.current_y)*e.map.sprite.tileHeight;return r(e,i,0,n.dest_y-i.current_y),i.current_y=n.dest_y,i.change_collider_layer(e,n.destination_collider_layer),void t.add.tween(i.sprite.body).to({y:i.sprite.body.y+o},n.animation_duration,Phaser.Easing.Quadratic.In,!0).onComplete.addOnce(()=>{e.audio.play_se("misc_se","rock_drop"),n.dust_animation?(e.hero.current_action=a.base_actions.IDLE,e.hero.play(e.hero.current_action,a.reverse_directions[e.hero.current_direction]),h(t,e,i,_)):_()})}}),s||_()})}Promise.all(f).then(()=>{e.hero.pushing=!1,c&&t.physics.p2.resume(),void 0!==n&&n()})}}function r(t,e,i,s){let o=e.get_events();for(let r=0;r<o.length;++r){let h=o[r];t.map.events[h.location_key]=t.map.events[h.location_key].filter(t=>t.id!==h.id),0===t.map.events[h.location_key].length&&delete t.map.events[h.location_key];let c=h.x,l=h.y,d=c+i,u=l+s;const p=n.TileEvent.get_location_key(d,u);h.x=d,h.y=u,h.location_key=p,p in t.map.events||(t.map.events[p]=[]),t.map.events[p].push(h);const m=a.get_surroundings(d,u,!1,2);_.JumpEvent.active_jump_surroundings(t,m,e.collider_layer_shift+e.base_collision_layer);const g=a.get_surroundings(c,l,!1,2);for(let i=0;i<g.length;++i){const s=g[i],_=n.TileEvent.get_location_key(s.x,s.y);if(_ in t.map.events)for(let i=0;i<t.map.events[_].length;++i){const o=t.map.events[_][i];if(o.type===n.event_types.JUMP){const t=e.collider_layer_shift+e.base_collision_layer;o.activation_collision_layers.includes(t)&&!1===o.dynamic&&o.deactivate_at(a.get_opposite_direction(s.direction))}}}}}function h(t,e,i,n){let a=new Array(7),_=new Array(7);const o=(i.current_x+.5)*e.map.sprite.tileWidth,r=(i.current_y+.5)*e.map.sprite.tileHeight,h=e.info.misc_sprite_base_list.dust;for(let n=0;n<7;++n){const c=(Math.PI+s.degree60)*n/6-s.degree30,l=o+18*Math.cos(c),d=r+18*Math.sin(c);let u=e.npc_group.create(o,r,"dust");(c<0||c>Math.PI)&&e.npc_group.setChildIndex(u,e.npc_group.getChildIndex(i.sprite)),u.anchor.setTo(.5,.5),t.add.tween(u).to({x:l,y:d},400,Phaser.Easing.Linear.None,!0),_[n]=u,h.setAnimation(u,"dust");const p=h.getAnimationKey("dust","spread");let m;a[n]=new Promise(t=>{m=t}),u.animations.getAnimation(p).onComplete.addOnce(m),u.animations.play(p)}Promise.all(a).then(()=>{_.forEach(t=>{e.npc_group.remove(t,!0)}),n()})}e.normal_push=function(t,e,i){!e.hero.trying_to_push||![a.directions.up,a.directions.down,a.directions.left,a.directions.right].includes(e.hero.trying_to_push_direction)||e.hero.trying_to_push_direction!==e.hero.current_direction||e.hero.casting_psynergy||e.hero.jumping||e.in_battle||o(t,e,i),e.hero.trying_to_push=!1,e.hero.push_timer=null},e.target_only_push=function(t,e,i,s,n,a=!0,_){o(t,e,i,n,s,!0,a,_)},e.fire_push_movement=o},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DialogManager=void 0;const s=i(1),n=i(0),a=i(2);e.DialogManager=class{constructor(t,e,i=!0){this.game=t,this.data=e,this.italic_font=i,this.parts=null,this.step=0,this.finished=!1,this.avatar=null,this.window=null,this.avatar_window=null,this.hero_direction=n.directions.down,this.dialog_crystal_sprite_base=this.data.info.misc_sprite_base_list.dialog_crystal;const s=this.dialog_crystal_sprite_base.getActionKey("dialog_crystal");this.dialog_crystal=this.game.add.sprite(0,0,s),this.dialog_crystal_sprite_base.setAnimation(this.dialog_crystal,"dialog_crystal"),this.dialog_crystal_anim_key=this.dialog_crystal_sprite_base.getAnimationKey("dialog_crystal","rotate"),this.dialog_crystal.visible=!1,this.dialog_crystal_tween=null,this.show_crystal=!1}update_position(){this.avatar&&this.avatar_window.update(!0),this.window.update(!0)}get_dialog_window_position(t,e){const i=s.GAME_WIDTH-t>>1;let a=s.MAX_DIAG_WIN_HEIGHT-e>>1;return[n.directions.up,n.directions.up_left,n.directions.up_right].includes(this.hero_direction)||(a=s.GAME_HEIGHT-(s.MAX_DIAG_WIN_HEIGHT+4)+a),{x:i,y:a}}get_avatar_position(t){const e=(this.parts[this.step].width>>2)+t.x|0;let i;return i=t.y>=s.GAME_HEIGHT>>1?t.y-s.AVATAR_SIZE-8:t.y+this.parts[this.step].height+4,{x:e,y:i}}set_avatar(t){this.avatar=t}set_hero_direction(t){void 0!==t&&(this.hero_direction=t)}next(t,e,i){if(this.avatar_window&&(this.avatar_window.destroy(!1),this.avatar_window=null),this.step>=this.parts.length)return this.finished=!0,this.window.destroy(!0,t.bind(this,this.finished)),void this.dialog_crystal.destroy();this.window&&(this.window.destroy(!1),this.window=null),this.mount_window(t,e,i),++this.step}mount_window(t,e,i){this.dialog_crystal.visible=!1;let n=this.get_dialog_window_position(this.parts[this.step].width,this.parts[this.step].height);if(e&&void 0!==e.x&&(n.x=e.x),e&&void 0!==e.y&&(n.y=e.y),this.window=new a.Window(this.game,n.x,n.y,this.parts[this.step].width,this.parts[this.step].height,!1),this.window.show(((t,e,i)=>{this.window.set_text(this.parts[t].lines,void 0,void 0,void 0,e,!0).then(()=>{if(t<this.parts.length-1||this.show_crystal){this.dialog_crystal.visible=!0,this.dialog_crystal.x=this.window.real_x+this.parts[t].width-this.dialog_crystal.width,this.dialog_crystal.y=this.window.real_y+this.parts[t].height;const e=this.dialog_crystal.parent;e.setChildIndex(this.dialog_crystal,e.getChildIndex(this.window.group)),this.dialog_crystal.play(this.dialog_crystal_anim_key);const i=[this.dialog_crystal.y-(this.dialog_crystal.height>>1),this.dialog_crystal.y];this.dialog_crystal_tween&&this.dialog_crystal_tween.isRunning&&this.dialog_crystal_tween.stop(),this.dialog_crystal_tween=this.game.tweens.create(this.dialog_crystal).to({y:i},1400,Phaser.Easing.Quadratic.InOut,!0,0,-1)}else this.dialog_crystal_tween&&this.dialog_crystal_tween.isRunning&&this.dialog_crystal_tween.stop();i&&i(this.finished)})}).bind(this,this.step,this.italic_font,t)),this.avatar){let t=this.get_avatar_position(n);i&&void 0!==i.x&&(t.x=i.x),i&&void 0!==i.y&&(t.y=i.y);const e=s.AVATAR_SIZE+4;this.avatar_window=new a.Window(this.game,t.x,t.y,e,e),this.avatar_window.create_at_group(4,4,"avatars",void 0,this.avatar),this.avatar_window.show()}}set_dialog(t,e,i){this.set_avatar(e),this.set_hero_direction(i);const a=s.MAX_DIAG_WIN_WIDTH-2*s.WINDOW_PADDING_H-s.INSIDE_BORDER_WIDTH;let _=t.split(" "),o=[],r=[],h=[],c=0,l=0;for(let t=0;t<_.length;++t){const e=_[t];if(c=n.get_text_width(this.game,h.join(" ")+e,this.italic_font),c>=a){const t=h.join(" ");r.push(t),l=Math.max(l,n.get_text_width(this.game,t,this.italic_font)),h=[],h.push(e),c=n.get_text_width(this.game,e,this.italic_font),r.length===s.MAX_LINES_PER_DIAG_WIN&&(o.push({lines:r.slice(),width:l+2*s.WINDOW_PADDING_H+s.INSIDE_BORDER_WIDTH,height:s.WINDOW_PADDING_TOP+s.WINDOW_PADDING_BOTTOM+r.length*(s.FONT_SIZE+s.SPACE_BETWEEN_LINES)-s.SPACE_BETWEEN_LINES}),l=0,r=[])}else h.push(e)}h.length&&(l=Math.max(l,n.get_text_width(this.game,h.join(" "),this.italic_font)),r.push(h.join(" ")),o.push({lines:r.slice(),width:l+2*s.WINDOW_PADDING_H+s.INSIDE_BORDER_WIDTH+2,height:s.WINDOW_PADDING_TOP+s.WINDOW_PADDING_BOTTOM+r.length*(s.FONT_SIZE+s.SPACE_BETWEEN_LINES)-s.SPACE_BETWEEN_LINES})),this.parts=o}quick_next(t,e,i,s,n,a,_=!1){this.parts=null,this.step=0,this.window&&(this.window.destroy(!1),this.window=null),this.avatar_window&&(this.avatar_window.destroy(!1),this.avatar_window=null),this.show_crystal=_,this.set_dialog(t,i,s),this.mount_window(e,n,a)}kill_dialog(t,e=!1,i=!1){e||this.avatar_window&&this.avatar_window.destroy(!1),this.window&&(this.finished=!0,this.window.destroy(!0,t),i&&this.dialog_crystal.destroy())}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.NPC=e.npc_types=e.npc_movement_types=void 0;const s=i(19),n=i(0),a=i(21),_=i(45);var o;!function(t){t.IDLE="idle",t.WALK_AROUND="walk_around"}(o=e.npc_movement_types||(e.npc_movement_types={})),function(t){t.NORMAL="normal",t.INN="inn",t.SHOP="shop",t.SPRITE="sprite"}(e.npc_types||(e.npc_types={}));class r extends a.ControllableChar{constructor(t,e,i,s,n,a,_,o,h,c,l,d,u,p,m,g,y,w,f,b,v){super(t,e,i,s,n,a,_,o,h,c,l),this.npc_type=d,this.movement_type=u,this.message=p,this.thought_message=m,this.avatar=g,this.shop_key=y,this.base_collision_layer=w,this.talk_range_factor=void 0===f?r.NPC_TALK_RANGE:f,this.no_shadow=void 0!==v&&v,this.events=[],this.set_events(b)}set_sprite_as_npc(){this.sprite.is_npc=!0}set_events(t){for(let e=0;e<t.length;++e){const i=t[e];switch(i.type){case s.event_types.BATTLE:this.events.push(new _.BattleEvent(this.game,this.data,i.background_key,i.enemy_party_key))}}}update(){this.movement_type===o.IDLE&&this.stop_char(!1),this.update_shadow()}config_body(t){this.game.physics.p2.enable(this.sprite,!1),void 0!==this.data.dbs.npc_db[this.key_name].anchor_x?this.sprite.anchor.x=this.data.dbs.npc_db[this.key_name].anchor_x:this.reset_anchor("x"),void 0!==this.data.dbs.npc_db[this.key_name].anchor_y?this.sprite.anchor.y=this.data.dbs.npc_db[this.key_name].anchor_y:this.reset_anchor("y"),this.sprite.body.clearShapes(),this.body_radius=this.data.dbs.npc_db[this.key_name].body_radius;const e=this.body_radius<<1,i=n.mount_collision_polygon(e,-(e>>1),this.data.dbs.npc_db[this.key_name].collision_body_bevel);this.sprite.body.addPolygon({optimalDecomp:!1,skipSimpleCheck:!0,removeCollinearPoints:!1},i),this.sprite.body.setCollisionGroup(t.npc_collision_groups[this.base_collision_layer]),this.sprite.body.damping=1,this.sprite.body.angularDamping=1,this.sprite.body.setZeroRotation(),this.sprite.body.fixedRotation=!0,this.sprite.body.dynamic=!1,this.sprite.body.static=!0}}e.NPC=r,r.NPC_TALK_RANGE=3},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function _(t){try{r(s.next(t))}catch(t){a(t)}}function o(t){try{r(s.throw(t))}catch(t){a(t)}}function r(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(_,o)}r((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.BattleStage=e.DEFAULT_POS_ANGLE=void 0;const n=i(1),a=i(0),_=i(13),o=i(5),r=i(3),h=n.GAME_WIDTH>>1,c=n.GAME_HEIGHT-35,l=.009*Math.PI,d=n.GAME_WIDTH/2-50,u=n.GAME_HEIGHT/50;e.DEFAULT_POS_ANGLE=.7551327;const p=[11,9,7,5,3,1,3,5,7,9,11],m=[.1,.2,.3,.4,.6,1,.6,.4,.3,.2,.1];class g{constructor(t,e,i,s,n){this.game=t,this.data=e,this.camera_angle={rad:-2.120575,spining:!1,update:this.update_sprite_properties.bind(this)},this.background_key=i,this.old_camera_angle=this.camera_angle.rad,this.battle_group=this.game.add.group(),this.crop_group=this.game.add.group(),this.group_enemies=this.game.add.group(),this.group_allies=this.game.add.group(),this.allies_info=s,this.enemies_info=n,this.allies_count=s.length,this.enemies_count=n.length,this.shift_from_middle_enemy=35*this.enemies_count*.5,this.shift_from_middle_ally=35*this.allies_count*.5,this.sprites=[],this.x=this.game.camera.x,this.y=this.game.camera.y,this.battle_group.x=this.x,this.battle_group.y=this.y,this.battle_group.scale.setTo(1.2,1.2),this.crop_group.x=this.x,this.crop_group.y=this.y}set_targets(){let t,e;switch(this.target_type){case _.ability_target_types.ALLY:t=this.allies_count,e=this.allies_info;break;case _.ability_target_types.ENEMY:t=this.enemies_count,e=this.enemies_info;break;case _.ability_target_types.USER:t=this.ability_caster.fighter_type===o.fighter_types.ALLY?this.allies_count:this.enemies_count,e=this.ability_caster.fighter_type===o.fighter_types.ENEMY?this.allies_info:this.enemies_info}const i=r.zipWith(p.slice(this.range_cursor_position-(t>>1),this.range_cursor_position+(t>>1)+1).reverse(),e,(t,e)=>({magnitude:t>this.ability_range?null:t,target:e}));this.target_type===_.ability_target_types.USER?this.choosing_targets_callback(i):this.choosing_targets_finished(i)}next_target(){this.change_target(-1)}previous_target(){this.change_target(1)}change_target(t,e=!0){this.target_type===_.ability_target_types.ENEMY&&(t*=-1);const i=this.target_type===_.ability_target_types.ALLY?this.allies_info:this.enemies_info,s=i.length,n=s%2?s>>1:(s>>1)-1;let a;do{this.range_cursor_position+=t,0===t&&(t=-1);a=n+(this.range_cursor_position-(p.length>>1)),a>=s?(this.range_cursor_position=(p.length>>1)-n,a=0):a<0&&(this.range_cursor_position=(p.length>>1)+n+ +!(s%2),a=s-1)}while(i[a].instance.has_permanent_status(o.permanent_status.DOWNED));this.set_battle_cursors_position(e)}initialize_sprites(){this.black_bg=this.game.add.graphics(0,0),this.battle_group.add(this.black_bg),this.black_bg.beginFill(0,1),this.black_bg.drawRect(0,0,n.GAME_WIDTH,n.GAME_HEIGHT),this.black_bg.endFill(),this.battle_bg=this.game.add.tileSprite(0,17,n.GAME_WIDTH,120,"battle_backgrounds",this.background_key),this.battle_bg2=this.game.add.tileSprite(0,17,n.GAME_WIDTH,120,"battle_backgrounds",this.background_key),this.bg_height=this.battle_bg.height,this.battle_bg.scale.setTo(1,1),this.battle_bg2.scale.setTo(1,1);const t=(t,e,i,s,n)=>{const a=t.create(0,0,e.sprite_key);return a.anchor.setTo(.5,1),a.scale.setTo(e.scale,e.scale),a.ellipses_semi_major=d,a.ellipses_semi_minor=u,a.data.is_Ally=i,n.setAnimation(a,"battle"),a.animations.play(s),this.sprites.push(a),a};this.allies_info.forEach(e=>{const i=t(this.group_allies,e,!0,"battle_back",this.data.info.main_char_list[e.instance.key_name].sprite_base);e.sprite=i}),this.enemies_info.forEach(e=>{const i=t(this.group_enemies,e,!1,"battle_front",this.data.info.enemies_list[e.instance.key_name].sprite_base);e.sprite=i}),this.first_ally_char=this.group_allies.children[0],this.last_ally_char=this.group_allies.children[this.allies_count-1],this.first_enemy_char=this.group_enemies.children[0],this.last_enemy_char=this.group_enemies.children[this.enemies_count-1]}intialize_crop_rectangles(){this.upper_rect=this.game.add.graphics(0,0),this.crop_group.add(this.upper_rect),this.upper_rect.beginFill(0,1),this.upper_rect.drawRect(0,0,n.GAME_WIDTH,n.GAME_HEIGHT>>1),this.upper_rect.endFill();const t=17+(this.bg_height>>1)+2;this.lower_rect=this.game.add.graphics(0,t),this.crop_group.add(this.lower_rect),this.lower_rect.beginFill(0,1),this.lower_rect.drawRect(0,0,n.GAME_WIDTH,2+(n.GAME_HEIGHT>>1)),this.lower_rect.endFill()}initialize_stage(t){this.choosing_actions=!1,this.choosing_targets=!1,this.initialize_sprites(),this.intialize_crop_rectangles(),this.battle_group.add(this.battle_bg),this.battle_group.add(this.battle_bg2),this.battle_group.add(this.group_enemies),this.battle_group.add(this.group_allies),this.game.add.tween(this.upper_rect).to({height:17},1500,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.lower_rect).to({y:17+this.bg_height-1,height:n.GAME_HEIGHT-this.bg_height-17+1},1500,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.camera_angle).to({rad:e.DEFAULT_POS_ANGLE},1500,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{t&&t()}),this.game.add.tween(this.battle_group.scale).to({x:1,y:1},1500,Phaser.Easing.Linear.None,!0)}set_stage_default_position(){return s(this,void 0,void 0,(function*(){let t;const i=new Promise(e=>{t=e});this.game.add.tween(this.camera_angle).to({rad:e.DEFAULT_POS_ANGLE},300,Phaser.Easing.Linear.None,!0).onComplete.addOnce(t),yield i}))}set_choosing_action_position(){this.choosing_actions=!0,this.battle_bg2.x=0,this.battle_bg2.scale.setTo(2,2),this.battle_bg2.y=1*-this.battle_bg.height+17- -3;for(let t=0;t<this.sprites.length;++t){const e=this.sprites[t],i=e.data.is_Ally?t:this.enemies_count-1-(t-this.allies_count),s=(e.data.is_Ally?88:106-40*(this.enemies_count>>1))+40*i,n=e.data.is_Ally?160:98;e.x=s,e.y=n;const a=e.scale.x+.2*Math.sign(e.scale.x),_=e.scale.y+.2*Math.sign(e.scale.y);e.scale.setTo(a,_)}}reset_positions(){this.battle_bg2.scale.setTo(1,1),this.battle_bg2.y=17;for(let t=0;t<this.sprites.length;++t){const e=this.sprites[t],i=e.scale.x-.2*Math.sign(e.scale.x),s=e.scale.y-.2*Math.sign(e.scale.y);e.scale.setTo(i,s)}}set_battle_cursors_position(t=!0){const e=this.target_type===_.ability_target_types.ALLY?this.allies_info:this.enemies_info,i=e.length%2?e.length>>1:(e.length>>1)-1,s=this.range_cursor_position-(p.length>>1);this.cursors.forEach((n,a)=>{let _=a-((this.cursors.length>>1)-i)+s;const r=e[_];if(r&&!r.instance.has_permanent_status(o.permanent_status.DOWNED)){const e=r.sprite,i=m[this.range_cursor_position-s-(this.cursors.length>>1)+a];n.scale.setTo(i,i),n.alpha=1,this.cursors_tweens[a]&&this.cursors_tweens[a].stop();const _=e.x,o=e.y-e.height-5;t?this.game.add.tween(n).to({centerX:_,y:o},85,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.cursors_tweens[a]=this.game.add.tween(n).to({y:n.y-4},100,Phaser.Easing.Linear.None,!0,0,-1,!0)}):(n.centerX=_,n.y=o,this.cursors_tweens[a]=this.game.add.tween(n).to({y:n.y-4},100,Phaser.Easing.Linear.None,!0,0,-1,!0))}else{n.alpha=0,_=_<0?0:e.length-1;const t=e[_].sprite;n.centerX=t.x,n.y=t.y-t.height}})}unset_battle_cursors(){this.cursors.forEach((t,e)=>{t.destroy(),this.cursors_tweens[e]&&this.cursors_tweens[e].stop()})}choose_targets(t,e,i,s,n){this.choosing_targets_callback=n,this.range_cursor_position=p.length>>1,this.ability_range="all"===t?p[0]:t,this.ability_type=i,this.ability_caster=s,this.target_type=e,this.target_type===_.ability_target_types.USER?this.set_targets():this.game.add.tween(this.battle_group).to({y:this.battle_group.y+(this.target_type===_.ability_target_types.ALLY?-3:15)},150,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{const t=this.ability_range;this.cursors=new Array(t),this.cursors_tweens=new Array(t).fill(null);for(let e=0;e<t;++e)this.cursors[e]=this.battle_group.create(0,0,"battle_cursor"),this.cursors[e].animations.add("anim"),this.cursors[e].animations.play("anim",40,!0);this.choosing_targets=!0,this.change_target(0,!1);let e=[{key:this.data.gamepad.LEFT,on_down:this.next_target.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.previous_target.bind(this)},{key:this.data.gamepad.A,on_down:this.set_targets.bind(this)},{key:this.data.gamepad.B,on_down:this.choosing_targets_finished.bind(this,null)}];this.data.control_manager.set_control(e,{loop_configs:{horizontal:!0}})})}choosing_targets_finished(t){this.choosing_targets=!1,this.game.add.tween(this.battle_group).to({y:this.battle_group.y-(this.target_type===_.ability_target_types.ALLY?-3:15)},150,Phaser.Easing.Linear.None,!0),this.unset_battle_cursors(),this.choosing_targets_callback(t)}prevent_camera_angle_overflow(){this.camera_angle.rad=a.range_360(this.camera_angle.rad)}update_stage(){if(!this.choosing_actions){if(!this.game.input.keyboard.isDown(this.data.gamepad.DEBUG_CAM_PLUS)&&this.game.input.keyboard.isDown(this.data.gamepad.DEBUG_CAM_MINUS))this.camera_angle.rad-=l,this.battle_bg.x-=2.4;else if(this.game.input.keyboard.isDown(this.data.gamepad.DEBUG_CAM_PLUS)&&!this.game.input.keyboard.isDown(this.data.gamepad.DEBUG_CAM_MINUS))this.camera_angle.rad+=l,this.battle_bg.x+=2.4;else{const t=a.range_360(this.camera_angle.rad)-a.range_360(this.old_camera_angle);this.battle_bg.x+=.4*this.battle_bg.width*t}this.old_camera_angle=this.camera_angle.rad,(this.battle_bg.x>this.battle_bg.width||this.battle_bg.x<-this.battle_bg.width)&&(this.battle_bg.x=this.battle_bg2.x),this.battle_bg.x>0?this.battle_bg2.x=this.battle_bg.x-this.battle_bg.width:this.battle_bg.x<0&&(this.battle_bg2.x=this.battle_bg.x+this.battle_bg.width),(Math.sin(this.camera_angle.rad)>0&&this.battle_group.getChildIndex(this.group_allies)<this.battle_group.getChildIndex(this.group_enemies)||Math.sin(this.camera_angle.rad)<0&&this.battle_group.getChildIndex(this.group_allies)>this.battle_group.getChildIndex(this.group_enemies))&&this.battle_group.swapChildren(this.group_enemies,this.group_allies),(Math.cos(this.camera_angle.rad)<0&&this.first_ally_char.z>this.last_ally_char.z||Math.cos(this.camera_angle.rad)>0&&this.first_ally_char.z<this.last_ally_char.z)&&this.group_allies.reverse(),(Math.cos(this.camera_angle.rad)<0&&this.first_enemy_char.z<this.last_enemy_char.z||Math.cos(this.camera_angle.rad)>0&&this.first_enemy_char.z>this.last_enemy_char.z)&&this.group_enemies.reverse(),this.update_sprite_properties()}}update_sprite_properties(){for(let t=0;t<this.sprites.length;++t){const e=this.sprites[t],i=e.data.is_Ally?this.camera_angle.rad:this.camera_angle.rad+Math.PI,s=g.get_angle(i),n=g.ellipse_position(e,s,!0),a=g.ellipse_position(e,s,!1),_=e.data.is_Ally?this.shift_from_middle_ally:this.shift_from_middle_enemy,o=e.data.is_Ally?t:t-this.allies_count;e.x=n+(35*o-_+17)*Math.sin(i),e.y=a;const r=e.data.is_Ally?this.allies_info[o]:this.enemies_info[o],h=g.get_scale(r.scale,i);e.scale.setTo(h,h),Math.sin(i)>0&&!e.animations.currentAnim.name.endsWith("back")?e.animations.play(e.animations.currentAnim.name.replace("front","back")):Math.sin(i)<=0&&!e.animations.currentAnim.name.endsWith("front")&&e.animations.play(e.animations.currentAnim.name.replace("back","front")),Math.cos(i)>0&&e.scale.x<0?e.scale.setTo(e.scale.x,e.scale.y):Math.cos(i)<=0&&e.scale.x>0&&e.scale.setTo(-e.scale.x,e.scale.y)}}unset_stage(t,e){this.game.camera.fade(),this.game.camera.onFadeComplete.addOnce(()=>{t&&t(),this.battle_group.destroy(),this.upper_rect.height=this.lower_rect.height=n.GAME_HEIGHT>>1,this.upper_rect.y=0,this.lower_rect.y=n.GAME_HEIGHT>>1;this.game.camera.resetFX(),this.game.add.tween(this.upper_rect).to({height:0},300,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{e&&e(),this.crop_group.destroy()}),this.game.add.tween(this.lower_rect).to({height:0,y:n.GAME_HEIGHT},300,Phaser.Easing.Linear.None,!0)},this)}static ellipse(t,e,i){return(e=void 0===e?d:e)*(i=void 0===i?u:i)/Math.sqrt(Math.pow(i*Math.cos(t),2)+Math.pow(e*Math.sin(t),2))}static ellipse_position(t,e,i){if(i){const i=t.ellipses_semi_major;return h+g.ellipse(e,i,u)*Math.cos(e)}{const i=t.ellipses_semi_minor;return c+g.ellipse(e,d,i)*Math.sin(e)}}static get_angle(t){return t+Math.atan((u-d)*Math.tan(t)/(d+u*Math.pow(Math.tan(t),2)))}static get_scale(t,e){return(Math.sin(e)/7+.8334)*t}}e.BattleStage=g},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CharsStatusWindow=void 0;const s=i(2),n=i(0),a=i(1),_=i(7),o=i(12),r=i(3),h=a.BLUE_FONT_COLOR,c=a.RED_FONT_COLOR,l=[0,16],d=[0,8],u=[21,37],p=[8,16];e.CharsStatusWindow=class{constructor(t,e,i=!1,_=!1){this.game=t,this.data=e,this.djinni_info=i,this.compact=_,this.name_y=8,this.compact&&(this.name_y=0),this.status_win_height=35,this.compact&&(this.status_win_height=24);const o=r.clamp(this.data.info.party_data.members.length,4);if(this.status_win_width=48*o+4,this.status_win_x=a.GAME_WIDTH-this.status_win_width-a.INSIDE_BORDER_WIDTH-a.OUTSIDE_BORDER_WIDTH,this.status_window=new s.Window(this.game,this.status_win_x,0,this.status_win_width,this.status_win_height,!1),this.info_sprites={},this.set_chars_info(),this.djinni_info){this.standby_count_text={},this.stars_group=this.game.add.group();for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t],i=t%2,s=+(t>1);this.stars_group.create(l[i],d[s],e+"_star"),this.standby_count_text[e]=this.status_window.set_text_in_position("",u[i],p[s],!0)}this.status_window.add_sprite_to_group(this.stars_group)}}update_position(t=!1){this.status_window.update(t)}set_chars_info(){const t=this.data.info.party_data.members.slice(0,4);for(let e=0;e<t.length;++e){let i={group:null,name:null,hp_bar_graphics:null,hp_bar_damage_graphics:null,hp_header:null,hp:null,pp_bar_graphics:null,pp_bar_damage_graphics:null,pp_header:null,pp:null};const s=t[e],n=48*e+8,_=s.key_name+"_status";i.group=this.status_window.define_internal_group(_),i.name=this.status_window.set_text_in_position(s.name,n,this.name_y,!1,!1,this.status_window.font_color,this.compact,_);let o=this.name_y+a.FONT_SIZE,r=o+a.FONT_SIZE-3;i.hp_bar_graphics=this.game.add.graphics(n,r),i.hp_bar_graphics.beginFill(h,1),i.hp_bar_graphics.drawRect(0,0,40,3),i.hp_bar_graphics.endFill(),i.group.add(i.hp_bar_graphics),i.hp_bar_damage_graphics=this.game.add.graphics(0,0),i.hp_bar_damage_graphics.data.default_y=r,i.group.add(i.hp_bar_damage_graphics);const c=n+26;i.hp_header=this.status_window.set_text_in_position("HP",n,o,!1,!1,this.status_window.font_color,!1,_),i.hp=this.status_window.set_text_in_position(s.current_hp.toString(),c,o,!0,!1,this.status_window.font_color,!1,_),o=this.name_y+2*a.FONT_SIZE,r=o+a.FONT_SIZE-3,i.pp_bar_graphics=this.game.add.graphics(n,r),i.pp_bar_graphics.beginFill(h,1),i.pp_bar_graphics.drawRect(0,0,40,3),i.pp_bar_graphics.endFill(),i.group.add(i.pp_bar_graphics),i.pp_bar_damage_graphics=this.game.add.graphics(0,0),i.pp_bar_damage_graphics.data.default_y=r,i.group.add(i.pp_bar_damage_graphics),i.pp_header=this.status_window.set_text_in_position("PP",n,o,!1,!1,this.status_window.font_color,!1,_),i.pp=this.status_window.set_text_in_position(s.current_pp.toString(),c,o,!0,!1,this.status_window.font_color,!1,_),this.info_sprites[s.key_name]=i}}update_chars_info(){let t=!1;if(this.djinni_info)if(this.standby_djinni=_.Djinn.get_standby_djinni(this.data.info.djinni_list,o.MainChar.get_active_players(this.data.info.party_data,4)),t=r.some(this.standby_djinni,Boolean),t){this.stars_group.alpha=1,this.stars_group.x=9,this.stars_group.y=9;for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t],i=e in this.standby_djinni?this.standby_djinni[e].toString():"0";this.status_window.update_text(i,this.standby_count_text[e],void 0,this.name_y+p[+(t>1)])}}else{for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t];this.status_window.update_text("",this.standby_count_text[e])}this.stars_group.alpha=0}const e=r.clamp(this.data.info.party_data.members.length,4);this.status_win_width=48*e+4+(t?40:0),this.status_win_x=a.GAME_WIDTH-this.status_win_width-a.INSIDE_BORDER_WIDTH-a.OUTSIDE_BORDER_WIDTH,this.status_window.update_size({width:this.status_win_width}),this.status_window.update_position({x:this.status_win_x}),this.status_window.clear_separators();let i=[];for(let s=0;s<e;++s){let e=this.data.info.party_data.members[s];i.push(e.key_name);let n=this.info_sprites[e.key_name];n.group.visible=!0;const a=48*s+8+(t?40:0),_=a+26;this.status_window.update_text(e.name,n.name,a),this.status_window.update_text(e.current_hp,n.hp,_),this.status_window.update_text(e.current_pp,n.pp,_);let o=n.hp.text.textWidth;n.hp.text.x+=o/2,n.hp.shadow.x+=o/2;let r=n.pp.text.textWidth;n.pp.text.x+=r/2,n.pp.shadow.x+=r/2,this.status_window.update_text_position({x:a},n.hp_header),this.status_window.update_text_position({x:a},n.pp_header),n.hp_bar_graphics.x=a,n.pp_bar_graphics.x=a;const h=40*(1-e.current_hp/e.max_hp)|0,l=a+40-h;n.hp_bar_damage_graphics.clear(),n.hp_bar_damage_graphics.beginFill(c,1),n.hp_bar_damage_graphics.drawRect(l,n.hp_bar_damage_graphics.data.default_y,h,3),n.hp_bar_damage_graphics.endFill();const d=40*(1-e.current_pp/e.max_pp)|0,u=a+40-d;n.pp_bar_damage_graphics.clear(),n.pp_bar_damage_graphics.beginFill(c,1),n.pp_bar_damage_graphics.drawRect(u,n.pp_bar_damage_graphics.data.default_y,d,3),n.pp_bar_damage_graphics.endFill(),(0!==s||t)&&this.status_window.draw_separator(a-5,3,a-5,this.status_win_height-1)}for(let t in this.info_sprites){if(i.includes(t))continue;this.info_sprites[t].group.visible=!1}}show(){this.status_window.show()}close(t){this.status_window.close(t)}destroy(){this.status_window.destroy(!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.choose_right_class=e.Classes=void 0;const s=i(0),n=i(3);e.Classes=class{constructor(t,e,i,s,n,a,_,o,r,h,c,l,d,u,p){this.key_name=t,this.name=e,this.required_venus_level=i,this.required_mercury_level=s,this.required_mars_level=n,this.required_jupiter_level=a,this.hp_boost=_,this.pp_boost=o,this.atk_boost=r,this.def_boost=h,this.agi_boost=c,this.luk_boost=l,this.ability_level_pairs=d,this.class_type=u,this.vulnerabilities=void 0===p?[]:p}},e.choose_right_class=function(t,e,i,a,_,o,r){let h,c=[...i!==s.elements.VENUS?[{element:s.elements.VENUS,level:a}]:[],...i!==s.elements.MERCURY?[{element:s.elements.MERCURY,level:_}]:[],...i!==s.elements.MARS?[{element:s.elements.MARS,level:o}]:[],...i!==s.elements.JUPITER?[{element:s.elements.JUPITER,level:r}]:[]];h=c.every(t=>0===t.level)?i:n.maxBy(c,t=>t.level).element;const l=e[i][h];let d=Object.values(t).filter(t=>t.class_type===l);return d=d.filter(t=>t.required_venus_level<=a&&t.required_mercury_level<=_&&t.required_mars_level<=o&&t.required_jupiter_level<=r),n.sortBy(d,[t=>t.required_venus_level+t.required_mercury_level+t.required_mars_level+t.required_jupiter_level]).reverse()[0]}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.InteractableObjects=e.interactable_object_event_types=e.interactable_object_interaction_types=void 0;const s=i(6),n=i(1),a=i(0),_=i(16),o=i(29);var r;!function(t){t.ONCE="once",t.INFINITE="infinite"}(e.interactable_object_interaction_types||(e.interactable_object_interaction_types={})),function(t){t.JUMP="jump",t.JUMP_AROUND="jump_around",t.CLIMB="climb"}(r=e.interactable_object_event_types||(e.interactable_object_event_types={}));e.InteractableObjects=class{constructor(t,e,i,s,n,a,_,o,r,h,c){this.game=t,this.data=e,this.key_name=i,this.x=s,this.y=n,this.sprite_info=null,this.allowed_tiles=a,this.base_collision_layer=_,this.collider_layer_shift=o,this.intermediate_collider_layer_shift=void 0===c?0:c,this.not_allowed_tiles=void 0===r?[]:r,this.object_drop_tiles=void 0===h?[]:h,this.events=new Set,this.events_info={},this.current_x=s,this.current_y=n,this.custom_data={collision_tiles_bodies:[]},this.collision_change_functions=[],this.color_filter=this.game.add.filter("ColorFilters")}set_sprite(t){this.sprite=t}position_allowed(t,e){if(this.data.map.interactable_objects.filter(i=>i.current_x===t&&i.current_y===e).length)return!1;for(let i=0;i<this.allowed_tiles.length;++i){const s=this.allowed_tiles[i];if(s.x===t&&s.y===e&&s.collision_layer===this.data.map.collision_layer)return!0}return!1}get_current_position(t){return{x:this.sprite.x/t.sprite.tileWidth|0,y:this.sprite.y/t.sprite.tileHeight|0}}change_collider_layer(t,e){this.sprite.body.removeCollisionGroup(t.collision.interactable_objs_collision_groups[this.base_collision_layer]),this.sprite.body.setCollisionGroup(t.collision.interactable_objs_collision_groups[e]),this.base_collision_layer=e,this.sprite.base_collision_layer=e,this.collision_change_functions.forEach(t=>{t()})}insert_event(t){this.events.add(t)}get_events(){return[...this.events].map(t=>s.TileEvent.get_event(t))}remove_event(t){this.events.delete(t)}creating_blocking_stair_block(t){const e=this.base_collision_layer+this.custom_data.block_stair_collider_layer_shift,i=(this.current_x+.5)*this.data.map.sprite.tileWidth,s=(this.current_y+1.5)*this.data.map.sprite.tileHeight-4;let a=this.game.physics.p2.createBody(i,s,0,!0);a.clearShapes();const _=2*this.data.dbs.interactable_objects_db[this.key_name].body_radius;a.setRectangle(_,_,0,0),e in this.data.collision.interactable_objs_collision_groups||(this.data.collision.interactable_objs_collision_groups[e]=this.game.physics.p2.createCollisionGroup()),a.setCollisionGroup(this.data.collision.interactable_objs_collision_groups[e]),a.damping=n.MAP_DAMPING,a.angularDamping=n.MAP_DAMPING,a.setZeroRotation(),a.fixedRotation=!0,a.dynamic=!1,a.static=!0,a.debug=this.data.hero.sprite.body.debug,a.collides(t.hero_collision_group),this.custom_data.blocking_stair_block=a}initial_config(t){const e=this.data.npc_group.create(0,0,this.key_name+"_"+this.key_name);this.set_sprite(e),this.sprite.is_interactable_object=!0,this.sprite.roundPx=!0,this.sprite.base_collision_layer=this.base_collision_layer,this.sprite.interactable_object=this,void 0!==this.data.dbs.interactable_objects_db[this.key_name].send_to_back&&(this.sprite.send_to_back=this.data.dbs.interactable_objects_db[this.key_name].send_to_back),void 0!==this.data.dbs.interactable_objects_db[this.key_name].anchor_x&&(this.sprite.anchor.x=this.data.dbs.interactable_objects_db[this.key_name].anchor_x),this.sprite.anchor.y=this.data.dbs.interactable_objects_db[this.key_name].anchor_y;const i=void 0!==this.data.dbs.interactable_objects_db[this.key_name].shift_x?this.data.dbs.interactable_objects_db[this.key_name].shift_x:0,s=void 0!==this.data.dbs.interactable_objects_db[this.key_name].shift_y?this.data.dbs.interactable_objects_db[this.key_name].shift_y:0;this.sprite.centerX=(this.x+1)*t.tileWidth+i;const n=this.data.dbs.interactable_objects_db[this.key_name].anchor_y*t.tileWidth*.5;this.sprite.centerY=this.y*t.tileWidth-n+s,this.sprite_info.setAnimation(this.sprite,this.key_name);const a=this.data.dbs.interactable_objects_db[this.key_name].initial_animation;this.sprite.animations.play(this.key_name+"_"+a)}initialize_related_events(t,e){const i=this.get_current_position(e);let s=i.x,n=i.y;for(let e=0;e<this.data.dbs.interactable_objects_db[this.key_name].events.length;++e){const i=this.data.dbs.interactable_objects_db[this.key_name].events[e];s+=void 0!==i.x_shift?i.x_shift:0,n+=void 0!==i.y_shift?i.y_shift:0;let a=void 0!==i.collider_layer_shift?i.collider_layer_shift:0;a=void 0!==this.collider_layer_shift?this.collider_layer_shift:a,this.collider_layer_shift=a;const _=void 0===i.active||i.active,o=this.base_collision_layer+a;switch(i.type){case r.JUMP:this.set_jump_type_event(i,s,n,_,o,t);break;case r.JUMP_AROUND:this.set_jump_around_event(i,s,n,_,o,t);break;case r.CLIMB:this.set_stair_event(i,s,n,_,o,t)}}}not_allowed_tile_test(t,e){for(let i=0;i<this.not_allowed_tiles.length;++i){const s=this.not_allowed_tiles[i];if(s.x===t&&s.y===e)return!0}return!1}set_jump_type_event(t,e,i,n,o,r){if(this.not_allowed_tile_test(e,i))return;const h=s.TileEvent.get_location_key(e,i);h in r||(r[h]=[]);const c=new _.JumpEvent(this.game,this.data,e,i,[a.directions.up,a.directions.down,a.directions.right,a.directions.left],[o],t.dynamic,n,void 0===t.is_set||t.is_set);r[h].push(c),this.insert_event(c.id),this.events_info[t.type]=t,this.collision_change_functions.push(()=>{c.activation_collision_layers=[this.base_collision_layer+this.collider_layer_shift]})}set_jump_around_event(t,e,i,n,o,r){let h=void 0===t.is_set||t.is_set;a.get_surroundings(e,i).forEach((e,i)=>{if(this.not_allowed_tile_test(e.x,e.y))return;const c=s.TileEvent.get_location_key(e.x,e.y);if(c in r)for(let t=0;t<r[c].length;++t){const e=r[c][t];e.type===s.event_types.JUMP&&e.is_set&&e.activation_collision_layers.includes(o)&&(h=!1)}else r[c]=[];const l=new _.JumpEvent(this.game,this.data,e.x,e.y,[a.directions.right,a.directions.left,a.directions.down,a.directions.up][i],[this.base_collision_layer],t.dynamic,n,h);r[c].push(l),this.insert_event(l.id),this.collision_change_functions.push(()=>{l.activation_collision_layers=[this.base_collision_layer]})}),this.events_info[t.type]=t}set_stair_event(t,e,i,n,_,r){[{x:e,y:i+1,activation_directions:[a.directions.up],activation_collision_layers:[this.base_collision_layer],change_to_collision_layer:this.base_collision_layer+this.intermediate_collider_layer_shift,climbing_only:!1,collision_change_function:t=>{t.activation_collision_layers=[this.base_collision_layer],t.change_to_collision_layer=this.base_collision_layer+this.intermediate_collider_layer_shift}},{x:e,y:i,activation_directions:[a.directions.down],activation_collision_layers:[this.base_collision_layer+this.intermediate_collider_layer_shift],change_to_collision_layer:this.base_collision_layer,climbing_only:!0,collision_change_function:t=>{t.activation_collision_layers=[this.base_collision_layer+this.intermediate_collider_layer_shift],t.change_to_collision_layer=this.base_collision_layer}},{x:e,y:i+t.last_y_shift+1,activation_directions:[a.directions.up],activation_collision_layers:[this.base_collision_layer+this.intermediate_collider_layer_shift],change_to_collision_layer:_,climbing_only:!0,collision_change_function:t=>{t.activation_collision_layers=[this.base_collision_layer+this.intermediate_collider_layer_shift],t.change_to_collision_layer=this.base_collision_layer+this.collider_layer_shift}},{x:e,y:i+t.last_y_shift,activation_directions:[a.directions.down],activation_collision_layers:[_],change_to_collision_layer:this.base_collision_layer+this.intermediate_collider_layer_shift,climbing_only:!1,collision_change_function:t=>{t.activation_collision_layers=[this.base_collision_layer+this.collider_layer_shift],t.change_to_collision_layer=this.base_collision_layer+this.intermediate_collider_layer_shift}}].forEach(e=>{const i=s.TileEvent.get_location_key(e.x,e.y);i in r||(r[i]=[]);const a=new o.ClimbEvent(this.game,this.data,e.x,e.y,e.activation_directions,e.activation_collision_layers,t.dynamic,n,e.change_to_collision_layer,t.is_set,this,e.climbing_only);r[i].push(a),this.insert_event(a.id),this.collision_change_functions.push(e.collision_change_function.bind(null,a))}),this.events_info[t.type]=t}config_body(t){if(0===this.data.dbs.interactable_objects_db[this.key_name].body_radius)return;const e=t.interactable_objs_collision_groups;this.game.physics.p2.enable(this.sprite,!1),this.sprite.anchor.y=this.data.dbs.interactable_objects_db[this.key_name].anchor_y,this.sprite.body.clearShapes();const i=this.data.dbs.interactable_objects_db[this.key_name].body_radius<<1,s=a.mount_collision_polygon(i,-(i>>1),this.data.dbs.interactable_objects_db[this.key_name].collision_body_bevel);this.sprite.body.addPolygon({optimalDecomp:!1,skipSimpleCheck:!0,removeCollinearPoints:!1},s),this.sprite.body.setCollisionGroup(e[this.base_collision_layer]),this.sprite.body.damping=1,this.sprite.body.angularDamping=1,this.sprite.body.setZeroRotation(),this.sprite.body.fixedRotation=!0,this.sprite.body.dynamic=!1,this.sprite.body.static=!0,void 0!==this.custom_data.block_stair_collider_layer_shift&&this.creating_blocking_stair_block(t)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ClimbEvent=void 0;const s=i(0),n=i(16),a=i(6),_=i(1);class o extends a.TileEvent{constructor(t,e,i,s,n,_,o,r,h,c,l,d){super(t,e,a.event_types.CLIMB,i,s,n,_,o,r,l),this.change_to_collision_layer=h,this.is_set=void 0===c||c,this.climbing_only=void 0!==d&&d}fire(t){this.data.hero.stop_by_colliding&&this.check_position()&&this.data.hero_movement_allowed()&&(this.data.hero.climbing||this.climbing_only?(this.data.hero.climbing&&!this.climbing_only||this.data.hero.climbing&&this.climbing_only)&&this.finish_climbing(t):this.start_climbing(t))}start_climbing(t){if(this.game.physics.p2.pause(),null!==this.change_to_collision_layer&&this.data.collision.change_map_body(this.data,this.change_to_collision_layer),this.data.tile_event_manager.on_event=!0,t===s.directions.down){this.data.hero.play(s.base_actions.CLIMB,"turn").onComplete.addOnce(()=>{this.data.hero.shadow.visible=!1;const t=this.data.map.sprite.tileWidth*(this.x+.5),e=this.data.hero.sprite.y+25;this.game.add.tween(this.data.hero.sprite.body).to({x:t,y:e},300,Phaser.Easing.Linear.None,!0);this.data.hero.play(s.base_actions.CLIMB,"start").onComplete.addOnce(()=>{this.data.hero.sprite.anchor.y-=.1,this.data.hero.play(s.base_actions.CLIMB,s.base_actions.IDLE),this.data.tile_event_manager.on_event=!1,this.data.hero.climbing=!0,this.data.hero.current_action=s.base_actions.CLIMB,this.dynamic&&this.create_climb_collision_bodies(),this.game.physics.p2.resume()})})}else if(t===s.directions.up){this.data.hero.play(s.base_actions.CLIMB,s.base_actions.IDLE);const t=Phaser.Timer.QUARTER/3,e=this.data.map.sprite.tileWidth*(this.x+.5),i=this.data.hero.sprite.y-15;this.dynamic&&this.create_climb_collision_bodies(),this.game.add.tween(this.data.hero.sprite.body).to({x:e,y:i},t,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.data.hero.sprite.anchor.y-=.1,this.game.physics.p2.resume(),this.data.tile_event_manager.on_event=!1,this.data.hero.climbing=!0}),this.data.hero.shadow.visible=!1,this.data.hero.current_action=s.base_actions.CLIMB,this.data.hero.idle_climbing=!0}}finish_climbing(t){if(this.game.physics.p2.pause(),t===s.directions.up){for(let t=0;t<this.data.map.interactable_objects.length;++t){const e=this.data.map.interactable_objects[t];if(e.current_x===this.x&&e.current_y===this.y-1&&this.change_to_collision_layer===e.base_collision_layer)return void this.game.physics.p2.resume()}null!==this.change_to_collision_layer&&this.data.collision.change_map_body(this.data,this.change_to_collision_layer),this.data.tile_event_manager.on_event=!0;const t=this.data.hero.play(s.base_actions.CLIMB,"end");this.data.hero.shadow.visible=!1,this.game.add.tween(this.data.hero.sprite.body).to({y:this.data.hero.sprite.y-17},170,Phaser.Easing.Linear.None,!0);const e=this.data.hero.sprite.y-17;this.game.time.events.add(170,()=>{this.data.hero.shadow.y=e,this.data.hero.shadow.visible=!0}),t.onComplete.addOnce(()=>{this.game.time.events.add(150,()=>{this.data.hero.sprite.anchor.y+=.1,this.data.hero.shadow.y=this.data.hero.sprite.y,this.data.hero.play(s.base_actions.IDLE,s.reverse_directions[s.directions.up]),this.dynamic&&this.remove_climb_collision_bodies(!1),this.game.time.events.add(50,()=>{this.data.tile_event_manager.on_event=!1,this.data.hero.climbing=!1,this.data.hero.current_action=s.base_actions.IDLE,this.data.hero.set_direction(s.directions.up),this.game.physics.p2.resume()},this)},this)})}else if(t===s.directions.down){null!==this.change_to_collision_layer&&this.data.collision.change_map_body(this.data,this.change_to_collision_layer),this.data.tile_event_manager.on_event=!0,this.data.hero.sprite.anchor.y+=.1,this.data.hero.play(s.base_actions.IDLE,s.reverse_directions[s.directions.up]);const t=Phaser.Timer.QUARTER>>1;this.game.add.tween(this.data.hero.sprite.body).to({y:[this.data.hero.sprite.y-4,this.data.hero.sprite.y+15]},t,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.game.time.events.add(50,()=>{this.data.tile_event_manager.on_event=!1,this.data.hero.climbing=!1,this.game.physics.p2.resume()},this)}),this.dynamic&&this.remove_climb_collision_bodies(),this.data.hero.shadow.y=this.data.hero.sprite.y+15,this.data.hero.shadow.visible=!0,this.data.hero.current_action=s.base_actions.IDLE,this.data.hero.set_direction(s.directions.up)}}create_climb_collision_bodies(){this.origin_interactable_object.sprite.send_to_back=!0;const t=this.origin_interactable_object.events_info.climb.collision_tiles.map(t=>({x:this.origin_interactable_object.current_x+t.x,y:this.origin_interactable_object.current_y+t.y}));n.JumpEvent.unset_set_jump_collision(this.data),this.data.hero.sprite.body.removeCollisionGroup(this.data.collision.map_collision_group,!0),this.data.map.collision_sprite.body.removeCollisionGroup(this.data.collision.hero_collision_group,!0);for(let t in this.data.collision.interactable_objs_collision_groups)this.data.hero.sprite.body.removeCollisionGroup(this.data.collision.interactable_objs_collision_groups[t],!0);for(let e=0;e<t.length;++e){const i=(t[e].x+.5)*this.data.map.sprite.tileWidth,s=(t[e].y+.5)*this.data.map.sprite.tileHeight;let n=this.game.physics.p2.createBody(i,s,0,!0);n.clearShapes(),n.setRectangle(this.data.map.sprite.tileWidth,this.data.map.sprite.tileHeight,0,0),n.setCollisionGroup(this.data.collision.dynamic_events_collision_group),n.damping=_.MAP_DAMPING,n.angularDamping=_.MAP_DAMPING,n.setZeroRotation(),n.fixedRotation=!0,n.dynamic=!1,n.static=!0,n.debug=this.data.hero.sprite.body.debug,n.collides(this.data.collision.hero_collision_group),this.origin_interactable_object.custom_data.collision_tiles_bodies.push(n)}}remove_climb_collision_bodies(t=!0){this.origin_interactable_object.sprite.send_to_back=!1,n.JumpEvent.set_jump_collision(this.game,this.data),t&&(this.data.hero.sprite.body.collides(this.data.collision.map_collision_group),this.data.map.collision_sprite.body.collides(this.data.collision.hero_collision_group));for(let t in this.data.collision.interactable_objs_collision_groups)this.data.hero.sprite.body.removeCollisionGroup(this.data.collision.interactable_objs_collision_groups[t],!0);this.data.map.collision_layer in this.data.collision.interactable_objs_collision_groups&&this.data.hero.sprite.body.collides(this.data.collision.interactable_objs_collision_groups[this.data.map.collision_layer]);let e=this.origin_interactable_object.custom_data.collision_tiles_bodies;for(let t=0;t<e.length;++t)e[t].destroy();e=[]}}e.ClimbEvent=o},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BasicInfoWindow=void 0;const s=i(2);e.BasicInfoWindow=class{constructor(t){this.game=t,this.char=null,this.window_open=!1,this.x=0,this.y=40,this.base_window=new s.Window(this.game,this.x,this.y,100,92),this.avatar_group=t.add.group(),this.avatar_group.alpha=0,this.x_avatar=this.x+8,this.y_avatar=this.y+8,this.avatar=null,this.base_window.set_text_in_position("Lv",48,24),this.base_window.set_text_in_position("HP",8,48),this.base_window.set_text_in_position("PP",8,56),this.base_window.set_text_in_position("/",56,49),this.base_window.set_text_in_position("/",56,56),this.base_window.set_text_in_position("Exp",8,73),this.name_text=this.base_window.set_text_in_position("0",40,8),this.lv_text=this.base_window.set_text_in_position("0",80,24),this.class_text=this.base_window.set_text_in_position("0",8,40),this.hp_text=this.base_window.set_text_in_position("0",51,48,!0),this.pp_text=this.base_window.set_text_in_position("0",51,56,!0),this.max_hp_text=this.base_window.set_text_in_position("0",94,48,!0),this.max_pp_text=this.base_window.set_text_in_position("0",94,56,!0),this.exp_text=this.base_window.set_text_in_position("0",94,80,!0)}update_position(){this.avatar_group.x=this.game.camera.x+this.x_avatar,this.avatar_group.y=this.game.camera.y+this.y_avatar}set_char(t){void 0!==t&&(this.char=t),this.base_window.update_text(this.char.name,this.name_text),this.base_window.update_text(this.char.level.toString(),this.lv_text),this.base_window.update_text(this.char.class.name,this.class_text),this.base_window.update_text(this.char.current_hp.toString(),this.hp_text),this.base_window.update_text(this.char.current_pp.toString(),this.pp_text),this.base_window.update_text(this.char.max_hp.toString(),this.max_hp_text),this.base_window.update_text(this.char.max_pp.toString(),this.max_pp_text),this.base_window.update_text(this.char.current_exp.toString(),this.exp_text),this.avatar&&this.avatar.destroy(),this.avatar=this.avatar_group.create(0,0,"avatars",this.char.key_name)}open(t,e){this.update_position(),this.avatar_group.alpha=1,this.set_char(t),this.base_window.show(()=>{this.window_open=!0,void 0!==e&&e()},!1)}close(t){this.avatar_group.alpha=0,this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ItemPsynergyChooseWindow=void 0;const s=i(2),n=i(1),a=i(4),_=n.FONT_SIZE;e.ItemPsynergyChooseWindow=class{constructor(t,e,i,a){this.game=t,this.data=e,this.is_psynergy_window=i,this.on_change=void 0===a?()=>{}:a,this.element_list=this.is_psynergy_window?this.data.info.abilities_list:this.data.info.items_list,this.element_sprite_key=this.is_psynergy_window?"abilities_icons":"items_icons",this.window=new s.Window(this.game,104,24,132,108),this.group=t.add.group(),this.group.alpha=0,this.window_open=!1,this.window_activated=!1,this.close_callback=void 0,this.char=null,this.char_select_controls_sprites=[this.window.create_at_group(9,97,"shift_keyboard",0),this.window.create_at_group(8,96,"shift_keyboard"),this.window.create_at_group(32,97,"tab_keyboard",0),this.window.create_at_group(31,96,"tab_keyboard")];const o=this.window.set_text_in_position(": Change Char",49,96);this.char_select_controls_sprites.push(o.text,o.shadow),this.page_index=0,this.page_number=0,this.text_sprites_in_window=[],this.icon_sprites_in_window=[],this.selected_element_index=0,this.elements=[],this.selected_element_tween=null,this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.window.color,1),this.highlight_bar.drawRect(8+(n.ICON_WIDTH>>1),0,114,_),this.highlight_bar.endFill(),this.is_psynergy_window&&this.window.set_text_in_position("PP",102,8)}next_page(){1!==this.page_number&&(this.page_index<this.page_number-1?this.page_change(this.page_index+1):this.page_change(0))}previous_page(){1!==this.page_number&&(this.page_index>0?this.page_change(this.page_index-1):this.page_change(this.page_number-1))}next_element(){1!==this.elements.length&&(this.selected_element_index<this.elements.length-1?this.element_change(this.selected_element_index+1):this.element_change(0))}previous_element(){1!==this.elements.length&&(this.selected_element_index>0?this.element_change(this.selected_element_index-1):this.element_change(this.elements.length-1))}get_element_key_name(t){return this.is_psynergy_window?this.elements[t]:this.elements[t].key_name}set_page_number(){let t;t=this.is_psynergy_window?this.char.abilities.filter(t=>t in this.element_list&&(this.element_list[t].is_field_psynergy||this.element_list[t].effects_outside_battle)).length:this.char.items.filter(t=>t.key_name in this.element_list).length,this.page_number=1+((t-1)/5|0),this.page_index>=this.page_number&&(this.page_index=this.page_number-1),this.window.page_indicator.initialize(this.page_number,this.page_index)}update_position(){this.group.x=this.game.camera.x+104,this.group.y=this.game.camera.y+24}set_elements(){this.clear_sprites(),this.item_objs=[],this.is_psynergy_window?this.elements=this.char.abilities.filter(t=>t in this.element_list&&(this.element_list[t].is_field_psynergy||this.element_list[t].effects_outside_battle)).slice(5*this.page_index,5*(this.page_index+1)):(this.elements=this.char.items.filter(t=>t.key_name in this.element_list&&(this.item_objs.push(t),!0)).slice(5*this.page_index,5*(this.page_index+1)),this.item_objs=this.item_objs.slice(5*this.page_index,5*(this.page_index+1))),this.selected_element_index>=this.elements.length&&(this.selected_element_index=this.elements.length-1,this.move_cursor(98,42+16*this.selected_element_index));for(let t=0;t<this.elements.length;++t){const e=this.get_element_key_name(t),i=8,s=12+t*(n.ICON_HEIGHT+1),a=i+(n.ICON_WIDTH>>1),_=s+(n.ICON_HEIGHT>>1),o=8+n.ICON_WIDTH+(this.is_psynergy_window?2:4);if(this.text_sprites_in_window.push(this.window.set_text_in_position(this.element_list[e].name,o,s+4)),this.is_psynergy_window)this.icon_sprites_in_window.push(this.window.create_at_group(a,_,this.element_sprite_key,void 0,e)),this.icon_sprites_in_window[t].anchor.setTo(.5,.5);else{let i=this.game.add.group();if(i.create(0,0,this.element_sprite_key,e).anchor.setTo(.5,.5),this.item_objs[t].equipped&&i.create(0,0,"equipped"),this.item_objs[t].quantity>1){let e=this.game.add.bitmapText(0,0,"gs-item-bmp-font",this.item_objs[t].quantity.toString());i.add(e)}this.window.add_sprite_to_group(i),i.x=a,i.y=_,this.icon_sprites_in_window.push(i)}if(this.is_psynergy_window){const t=125;this.text_sprites_in_window.push(this.window.set_text_in_position(this.element_list[e].pp_cost,t,s+4,!0))}}}set_highlight_bar(){this.highlight_bar.alpha=1,this.highlight_bar.y=12+this.selected_element_index*(n.ICON_HEIGHT+1)+4}unset_highlight_bar(){this.highlight_bar.alpha=0}set_element_tween(t){this.selected_element_tween=this.game.add.tween(this.icon_sprites_in_window[t].scale).to({x:1.6,y:1.6},Phaser.Timer.QUARTER,Phaser.Easing.Linear.None,!0,0,-1,!0)}unset_element_tween(t){this.icon_sprites_in_window[t]&&this.icon_sprites_in_window[t].scale.setTo(1,1),this.selected_element_tween&&(this.selected_element_tween.stop(),this.selected_element_tween=null)}element_change(t){this.unset_element_tween(this.selected_element_index),this.selected_element_index=t,this.set_element_tween(this.selected_element_index),this.set_highlight_bar(),this.on_change(this.element_list[this.get_element_key_name(t)],this.is_psynergy_window?void 0:this.item_objs[t]),this.move_cursor(98,42+16*this.selected_element_index)}page_change(t){this.page_index=t,this.set_elements(),this.set_element_tween(this.selected_element_index),this.set_highlight_bar(),this.on_change(this.element_list[this.get_element_key_name(this.selected_element_index)],this.is_psynergy_window?void 0:this.item_objs[this.selected_element_index]),this.window.page_indicator.select_page(this.page_index)}clear_sprites(){for(let t=0;t<this.icon_sprites_in_window.length;++t)this.window.remove_from_group(this.icon_sprites_in_window[t]);this.icon_sprites_in_window=[];for(let t=0;t<this.text_sprites_in_window.length;++t)this.window.remove_text(this.text_sprites_in_window[t]);this.text_sprites_in_window=[]}grant_control(t,e,i,s){let n=[{key:this.data.gamepad.LEFT,on_down:this.previous_page.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.next_page.bind(this)},{key:this.data.gamepad.UP,on_down:this.previous_element.bind(this)},{key:this.data.gamepad.DOWN,on_down:this.next_element.bind(this)},{key:this.data.gamepad.A,on_down:e},{key:this.data.gamepad.B,on_down:t},{key:this.data.gamepad.L,on_down:s},{key:this.data.gamepad.R,on_down:i}];this.data.control_manager.set_control(n,{loop_configs:{vertical:!0,horizontal:!0,shoulder:!0,horizontal_time:300,shoulder_time:200}})}move_cursor(t,e,i){let s={type:a.CursorManager.CursorTweens.POINT,variant:a.PointVariants.NORMAL};this.data.cursor_manager.move_to({x:t,y:e},{animate:!1,tween_config:s},i)}hide(){this.window.group.alpha=0}show(){this.window.group.alpha=1}open(t,e,i,s){this.update_position(),this.char_index=t,this.char=this.data.info.party_data.members[t],this.page_index=s?s.page:0,this.set_page_number(),this.group.alpha=1,this.close_callback=e,this.window.show(i,!1),this.selected_element_index=s?s.index:0,this.set_elements(),this.set_element_tween(this.selected_element_index),this.set_highlight_bar(),this.on_change(this.element_list[this.get_element_key_name(this.selected_element_index)],this.is_psynergy_window?void 0:this.item_objs[this.selected_element_index]),this.move_cursor(98,42+16*this.selected_element_index),this.window_open=!0,this.window_activated=!0}close(){this.window.close(this.close_callback,!1),this.group.alpha=1,this.clear_sprites(),this.window.page_indicator.terminante(),this.data.cursor_manager.hide(),this.unset_element_tween(this.selected_element_index),this.window_open=!1,this.window_activated=!1}activate(){this.set_page_number(),this.set_elements(),this.element_change(this.selected_element_index),this.window.page_indicator.initialize(this.page_number,this.page_index),this.set_element_tween(this.selected_element_index),this.set_highlight_bar(),this.window_activated=!0,this.char_select_controls_sprites.forEach(t=>{t.alpha=1})}deactivate(){this.clear_sprites(),this.window.page_indicator.terminante(),this.unset_element_tween(this.selected_element_index),this.unset_highlight_bar(),this.window_activated=!1,this.char_select_controls_sprites.forEach(t=>{t.alpha=0})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ItemQuantityManagerWindow=void 0;const s=i(2),n=i(1),a=i(33),_=i(4),o=16+n.FONT_SIZE,r=o+n.FONT_SIZE;e.ItemQuantityManagerWindow=class{constructor(t,e){this.game=t,this.data=e,this.item_obj=null,this.item=null,this.char=null,this.window_open=!1,this.window_active=!1,this.x=104,this.y=0,this.base_window=new s.Window(this.game,this.x,this.y,132,52),this.group=this.game.add.group(),this.group.alpha=0,this.base_window.set_text_in_position("How many?",40,8),this.choosen_quantity=1,this.item_counter=new a.ItemCounter(this.game,this.group,56,40,this.on_change.bind(this)),this.remaining_with_char_count=this.base_window.set_text_in_position("",37,r,!0),this.new_amount_with_dest_char_count=this.base_window.set_text_in_position("",94,r,!0),this.to_remove_count=this.base_window.set_text_in_position("",53,40,!0)}grant_control(t,e){let i=[{key:this.data.gamepad.LEFT,on_down:this.decrease_amount.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.increase_amount.bind(this)},{key:this.data.gamepad.A,on_down:e},{key:this.data.gamepad.B,on_down:t}];this.data.control_manager.set_control(i,{loop_configs:{horizontal:!0,horizontal_time:100}})}increase_amount(){this.item_counter.advance_step(1)}decrease_amount(){this.item_counter.advance_step(-1)}on_change(t){this.choosen_quantity=t,this.base_window.update_text(this.choosen_quantity.toString(),this.to_remove_count),this.base_window.update_text((this.item_obj.quantity-this.choosen_quantity).toString(),this.remaining_with_char_count),this.destination_char&&this.base_window.update_text((this.dest_item_obj.quantity+this.choosen_quantity).toString(),this.new_amount_with_dest_char_count)}set_header(){this.icon_sprite=this.base_window.create_at_group(8,8,"items_icons",void 0,this.item.key_name),this.char_name=this.base_window.set_text_in_position(this.char.name,27,o),this.destination_char&&(this.dest_char_name=this.base_window.set_text_in_position(this.destination_char.name,84,o)),this.item_name=this.base_window.set_text_in_position(this.item.name,27,16),this.equip_sprite=null,this.item_obj.equipped&&(this.equip_sprite=this.base_window.create_at_group(15,16,"equipped")),this.item_count_sprite=null,this.item_obj.quantity>1&&(this.item_count_sprite=this.game.add.bitmapText(15,16,"gs-item-bmp-font",this.item_obj.quantity.toString()),this.base_window.add_sprite_to_group(this.item_count_sprite))}unset_header(){this.base_window.remove_from_group(this.icon_sprite),this.base_window.remove_text(this.char_name),this.destination_char&&(this.base_window.remove_text(this.dest_char_name),this.base_window.update_text("",this.new_amount_with_dest_char_count)),this.base_window.remove_text(this.item_name),this.equip_sprite&&this.base_window.remove_from_group(this.equip_sprite),this.item_count_sprite&&this.base_window.remove_from_group(this.item_count_sprite)}update_position(){this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y}open(t,e,i,s,n,a){this.data.cursor_manager.move_to({x:138,y:46},{animate:!1,tween_config:{type:_.CursorManager.CursorTweens.POINT,variant:_.PointVariants.NORMAL}},()=>{if(this.item_obj=t,this.item=e,this.char=i,this.destination_char=n,this.destination_char){const e=this.destination_char.items.filter(e=>e.key_name===t.key_name);this.dest_item_obj=e.length?e[0]:{key_name:null,index:null,quantity:0}}this.choosen_quantity=1,this.close_callback=s,this.update_position(),this.set_header(),this.item_counter.config(this.item_obj.quantity,this.choosen_quantity),this.group.alpha=1,this.on_change(this.choosen_quantity),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0,void 0!==a&&a()},!1)})}close(t){this.data.cursor_manager.hide(),this.unset_header(),this.item_counter.deactivate(),this.group.alpha=0,this.choosen_quantity=0,this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_quantity)},!1)}activate(){this.set_header(),this.item_counter.activate(),this.on_change(this.choosen_quantity),this.window_active=!0}deactivate(){this.data.cursor_manager.hide(),this.unset_header(),this.item_counter.deactivate(),this.window_active=!1}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ItemCounter=void 0;e.ItemCounter=class{constructor(t,e,i,s,n){this.game=t,this.group=e,this.available_items_count=0,this.disabled_count=0,this.x=i,this.y=s,this.on_change=void 0===n?()=>{}:n,this.current_quantity=1,this.internal_group=this.game.add.group(),this.internal_group.x=this.x,this.internal_group.y=this.y,this.graphics=this.game.add.graphics(0,0),this.active_bar_graphics=this.game.add.graphics(0,0),this.inactive_bar_graphics=this.game.add.graphics(0,0),this.disabled_bar_graphics=this.game.add.graphics(0,0),this.internal_group.add(this.graphics),this.internal_group.add(this.active_bar_graphics),this.internal_group.add(this.inactive_bar_graphics),this.internal_group.add(this.disabled_bar_graphics),this.group.add(this.internal_group),this.active=!1,this.create_grid()}advance_step(t){this.current_quantity+=t,this.current_quantity>this.available_items_count?this.current_quantity=1:0===this.current_quantity&&(this.current_quantity=this.available_items_count),this.active_bar_graphics.clear();for(let t=this.disabled_count;t<this.disabled_count+this.current_quantity;++t){this.active_bar_graphics.lineStyle(1,16298096);const e=2*t+1;this.active_bar_graphics.moveTo(e,0),this.active_bar_graphics.lineTo(e,6)}this.on_change(this.current_quantity)}create_grid(){this.graphics.lineStyle(1,0),this.graphics.moveTo(0,0),this.graphics.lineTo(61,0),this.graphics.lineStyle(1,0),this.graphics.moveTo(60,0),this.graphics.lineTo(60,7),this.graphics.lineStyle(1,0),this.graphics.moveTo(60,7),this.graphics.lineTo(0,7),this.graphics.lineStyle(1,0),this.graphics.moveTo(0,7),this.graphics.lineTo(0,0);for(let t=0;t<29;++t){this.graphics.lineStyle(1,0);const e=2+2*t;this.graphics.moveTo(e,0),this.graphics.lineTo(e,6)}}create_inactive_bar(){for(let t=0;t<this.disabled_count;++t){this.disabled_bar_graphics.lineStyle(1,16711680);const e=2*t+1;this.disabled_bar_graphics.moveTo(e,0),this.disabled_bar_graphics.lineTo(e,6)}for(let t=30;t>this.available_items_count+this.disabled_count;--t){this.inactive_bar_graphics.lineStyle(1,10000536);const e=2*t-1;this.inactive_bar_graphics.moveTo(e,0),this.inactive_bar_graphics.lineTo(e,6)}}config(t,e,i=0){this.clear(),this.current_quantity=e,this.available_items_count=t,this.disabled_count=i,this.active=!0,this.create_inactive_bar(),this.advance_step(0)}clear(){this.active_bar_graphics.clear(),this.inactive_bar_graphics.clear(),this.disabled_bar_graphics.clear(),this.current_quantity=1,this.available_items_count=0,this.disabled_count=0}activate(){this.active=!0}deactivate(){this.active=!1}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainStatusMenu=e.MainStatusStates=void 0;const s=i(12),n=i(5),a=i(15),_=i(2),o=i(3),r=i(106),h=i(107),c=i(108),l=i(109);var d;!function(t){t[t.CHARACTERS=0]="CHARACTERS",t[t.DJINN=1]="DJINN",t[t.STATISTICS=2]="STATISTICS",t[t.PSYNERGY=3]="PSYNERGY",t[t.ITEMS=4]="ITEMS"}(d=e.MainStatusStates||(e.MainStatusStates={}));class u{constructor(t,e){this.game=t,this.data=e,this.chars_menu=new a.CharsMenu(this.game,this.data,this.on_character_change.bind(this)),this.main_window=new _.Window(this.game,u.MAIN_WIN.X,u.MAIN_WIN.Y,u.MAIN_WIN.WIDTH,u.MAIN_WIN.HEIGHT),this.guide_window=new _.Window(this.game,u.GUIDE_WIN.X,u.GUIDE_WIN.Y,u.GUIDE_WIN.WIDTH,u.GUIDE_WIN.HEIGHT),this.desc_window=new _.Window(this.game,u.DESC_WIN.X,u.DESC_WIN.Y,u.DESC_WIN.WIDTH,u.DESC_WIN.HEIGHT),this.equip_window=new _.Window(this.game,u.EQUIP_WIN.X,u.EQUIP_WIN.Y,u.EQUIP_WIN.WIDTH,u.EQUIP_WIN.HEIGHT),this.desc_window.define_internal_group(u.DESC_GUIDE_KEY),this.main_window.define_internal_group(u.GROUP_KEY),this.guide_window.define_internal_group(u.GROUP_KEY),this.equip_window.define_internal_group(u.GROUP_KEY),this.components=[new r.MainStatusStatistics(this.game,this.data,this.main_window,this),new c.MainStatusPsynergy(this.game,this.data,this.main_window,this),new h.MainStatusDjinn(this.game,this.data,this.main_window,this),new l.MainStatusItems(this.game,this.data,this.main_window,this)],this.eq_highlight=this.game.add.graphics(0,0),this.eq_highlight.blendMode=PIXI.blendModes.SCREEN,this.equip_window.add_to_internal_group(u.GROUP_KEY,this.eq_highlight),this.current_state=null,this.current_component=null,this.selected_char=null,this.menu_open=!1,this.active_sprites=[]}get selected_character(){return this.selected_char}get battle_effects_array(){return this.battle_effects}get state(){return this.current_state}get is_open(){return this.menu_open}set_battle_effects(){const t=[],e=o.sortBy([...this.data.info.main_char_list[this.selected_char.key_name].permanent_status],t=>n.ordered_status_menu.indexOf(t));for(let i in e){const s={key:null,properties:null};s.key=e[i],t.length<u.MAX_EFFECTS_DISPLAYED&&t.push(s)}this.battle_effects=t}update_description(t,e){if(!this.desc_window.open)return;const i=void 0!==e?e:"",s=this.desc_window.get_internal_group(u.DESC_GUIDE_KEY),n=[d.STATISTICS,d.PSYNERGY,d.ITEMS];if(""===i&&n.includes(this.current_state)){const t=u.AdvanceState[this.current_state];let e=d[t].toLowerCase();e=e.charAt(0).toUpperCase()+e.slice(1);const i=": "+e;this.desc_window.update_text(i,this.desc_guide_a_text),s.visible||(s.visible=!0)}else s.visible&&(s.visible=!1);let a=u.FONTS.NORMAL;this.current_state===d.STATISTICS&&(a=u.FONTS.ITALIC),this.desc_line1.text.font=a,this.desc_line1.shadow.font=a,this.desc_line2.text.font=a,this.desc_line2.shadow.font=a,this.desc_window.update_text(t,this.desc_line1),this.desc_window.update_text(i,this.desc_line2)}toggle_guide_win(){this.l_button.shadow.visible=!this.l_button.shadow.visible,this.r_button.shadow.visible=!this.r_button.shadow.visible,this.a_button.shadow.visible=!this.a_button.shadow.visible,this.l_button.sprite.visible=!this.l_button.sprite.visible,this.r_button.sprite.visible=!this.r_button.sprite.visible,this.a_button.sprite.visible=!this.a_button.sprite.visible,this.hifen.shadow.visible=!this.hifen.shadow.visible,this.lr_text.shadow.visible=!this.lr_text.shadow.visible,this.a_text.shadow.visible=!this.a_text.shadow.visible,this.hifen.text.visible=!this.hifen.text.visible,this.lr_text.text.visible=!this.lr_text.text.visible,this.a_text.text.visible=!this.a_text.text.visible;const t=": Return"===this.select_text.text.text?": Djinn  list":": Return";this.guide_window.update_text(t,this.select_text)}check_main_components(){if(this.current_state===d.DJINN)this.main_window.get_internal_group(u.GROUP_KEY).visible=!1;else{let t=0,e=0,i=0,s=0,n="";[d.CHARACTERS,d.STATISTICS].includes(this.current_state)?(t=u.LEVEL.LABEL_X1,e=u.LEVEL.LABEL_Y1,i=u.LEVEL.VALUE_END_X1,s=u.LEVEL.VALUE_Y1,n="Lv"):(t=u.LEVEL.LABEL_X2,e=u.LEVEL.LABEL_Y2,i=u.LEVEL.VALUE_END_X2,s=u.LEVEL.VALUE_Y2,n="L v"),this.main_window.update_text_position({x:t,y:e},this.level_label),this.main_window.update_text_position({x:i,y:s},this.level_value),this.main_window.update_text(n,this.level_label),this.main_window.get_internal_group(u.GROUP_KEY).visible=!0}}init_desc_guide(){let t=this.desc_window.create_at_group(u.DESC_GUIDE.L.X+1,u.DESC_GUIDE.L.Y+1,"l_button",0,void 0,u.DESC_GUIDE_KEY);this.active_sprites.push(t),t=this.desc_window.create_at_group(u.DESC_GUIDE.L.X,u.DESC_GUIDE.L.Y,"l_button",void 0,void 0,u.DESC_GUIDE_KEY),this.active_sprites.push(t),t=this.desc_window.create_at_group(u.DESC_GUIDE.R.X+1,u.DESC_GUIDE.R.Y+1,"r_button",0,void 0,u.DESC_GUIDE_KEY),this.active_sprites.push(t),t=this.desc_window.create_at_group(u.DESC_GUIDE.R.X,u.DESC_GUIDE.R.Y,"r_button",void 0,void 0,u.DESC_GUIDE_KEY),this.active_sprites.push(t),t=this.desc_window.create_at_group(u.DESC_GUIDE.A.X+1,u.DESC_GUIDE.A.Y+1,"a_button",0,void 0,u.DESC_GUIDE_KEY),this.active_sprites.push(t),t=this.desc_window.create_at_group(u.DESC_GUIDE.A.X,u.DESC_GUIDE.A.Y,"a_button",void 0,void 0,u.DESC_GUIDE_KEY),this.active_sprites.push(t);let e=this.desc_window.set_text_in_position("-",u.DESC_GUIDE.HIFEN.X,u.DESC_GUIDE.HIFEN.Y,!1,!1,void 0,!1,u.DESC_GUIDE_KEY);this.active_sprites.push(e.text,e.shadow),e=this.desc_window.set_text_in_position(": Switch  characters",u.DESC_GUIDE.LR_TEXT.X,u.DESC_GUIDE.LR_TEXT.Y,!1,!1,void 0,!1,u.DESC_GUIDE_KEY),this.active_sprites.push(e.text,e.shadow),e=this.desc_guide_a_text=this.desc_window.set_text_in_position("",u.DESC_GUIDE.A_TEXT.X,u.DESC_GUIDE.A_TEXT.Y,!1,!1,void 0,!1,u.DESC_GUIDE_KEY),this.active_sprites.push(e.text,e.shadow)}initialize(){this.avatar=this.main_window.create_at_group(u.AVATAR.X,u.AVATAR.Y,"avatars",void 0,this.selected_char.key_name,u.GROUP_KEY),this.active_sprites.push(this.avatar),this.name=this.main_window.set_text_in_position("",u.NAME.X,u.NAME.Y,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(this.name.text,this.name.shadow),this.level_label=this.main_window.set_text_in_position("Lv",u.LEVEL.LABEL_X1,u.LEVEL.LABEL_Y1,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(this.level_label.text,this.level_label.shadow),this.level_value=this.main_window.set_text_in_position("",u.LEVEL.VALUE_END_X1,u.LEVEL.VALUE_Y1,!0,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(this.level_value.text,this.level_value.shadow),this.class_name=this.main_window.set_text_in_position("",u.CLASS_NAME.X,u.CLASS_NAME.Y,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(this.class_name.text,this.class_name.shadow),this.l_button={shadow:this.guide_window.create_at_group(u.GUIDE.L.X+1,u.GUIDE.L.Y+1,"l_button",0,void 0,u.GROUP_KEY),sprite:this.guide_window.create_at_group(u.GUIDE.L.X,u.GUIDE.L.Y,"l_button",void 0,void 0,u.GROUP_KEY)},this.active_sprites.push(this.l_button.sprite,this.l_button.shadow),this.r_button={shadow:this.guide_window.create_at_group(u.GUIDE.R.X+1,u.GUIDE.R.Y+1,"r_button",0,void 0,u.GROUP_KEY),sprite:this.guide_window.create_at_group(u.GUIDE.R.X,u.GUIDE.R.Y,"r_button",void 0,void 0,u.GROUP_KEY)},this.active_sprites.push(this.r_button.sprite,this.r_button.shadow),this.a_button={shadow:this.guide_window.create_at_group(u.GUIDE.A.X+1,u.GUIDE.A.Y+1,"a_button",0,void 0,u.GROUP_KEY),sprite:this.guide_window.create_at_group(u.GUIDE.A.X,u.GUIDE.A.Y,"a_button",void 0,void 0,u.GROUP_KEY)},this.active_sprites.push(this.a_button.sprite,this.a_button.shadow),this.select_button={shadow:this.guide_window.create_at_group(u.GUIDE.SELECT.X+1,u.GUIDE.SELECT.Y+1,"select_button",0,void 0,u.GROUP_KEY),sprite:this.guide_window.create_at_group(u.GUIDE.SELECT.X,u.GUIDE.SELECT.Y,"select_button",void 0,void 0,u.GROUP_KEY)},this.active_sprites.push(this.select_button.sprite,this.select_button.shadow),this.hifen=this.guide_window.set_text_in_position("-",u.GUIDE.HIFEN.X,u.GUIDE.HIFEN.Y,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(this.hifen.text,this.hifen.shadow),this.lr_text=this.guide_window.set_text_in_position(": Rearrange",u.GUIDE.LR_TEXT.X,u.GUIDE.LR_TEXT.Y,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(this.lr_text.text,this.lr_text.shadow),this.a_text=this.guide_window.set_text_in_position(": Details",u.GUIDE.A_TEXT.X,u.GUIDE.A_TEXT.Y,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(this.a_text.text,this.a_text.shadow),this.select_text=this.guide_window.set_text_in_position(": Djinn  list",u.GUIDE.SELECT_TEXT.X,u.GUIDE.SELECT_TEXT.Y,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(this.select_text.text,this.select_text.shadow),this.desc_line1=this.desc_window.set_text_in_position("",u.DESC.LINE1.X,u.DESC.LINE1.Y,!1,!1,void 0,!1,u.GROUP_KEY,!0),this.active_sprites.push(this.desc_line1.text,this.desc_line1.shadow),this.desc_line2=this.desc_window.set_text_in_position("",u.DESC.LINE2.X,u.DESC.LINE2.Y,!1,!1,void 0,!1,u.GROUP_KEY,!0),this.active_sprites.push(this.desc_line2.text,this.desc_line2.shadow);let t=this.equip_window.set_text_in_position("Weapon",u.EQUIP_TEXT.LABEL.X,u.EQUIP_TEXT.LABEL.Y,!1,!1,void 0,!1,u.GROUP_KEY);this.active_sprites.push(t.text,t.shadow),this.eq_weapon_name=this.equip_window.set_text_in_position("",u.EQUIP_TEXT.NAME.X,u.EQUIP_TEXT.NAME.Y,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(this.eq_weapon_name.text,this.eq_weapon_name.shadow);let e=u.EQUIP_TEXT.SHIFT;t=this.equip_window.set_text_in_position("Head",u.EQUIP_TEXT.LABEL.X,u.EQUIP_TEXT.LABEL.Y+e,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(t.text,t.shadow),this.eq_head_name=this.equip_window.set_text_in_position("",u.EQUIP_TEXT.NAME.X,u.EQUIP_TEXT.NAME.Y+e,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(this.eq_head_name.text,this.eq_head_name.shadow),e+=u.EQUIP_TEXT.SHIFT,t=this.equip_window.set_text_in_position("Shield",u.EQUIP_TEXT.LABEL.X,u.EQUIP_TEXT.LABEL.Y+e,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(t.text,t.shadow),this.eq_shield_name=this.equip_window.set_text_in_position("",u.EQUIP_TEXT.NAME.X,u.EQUIP_TEXT.NAME.Y+e,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(this.eq_shield_name.text,this.eq_shield_name.shadow),e+=u.EQUIP_TEXT.SHIFT,t=this.equip_window.set_text_in_position("Chest",u.EQUIP_TEXT.LABEL.X,u.EQUIP_TEXT.LABEL.Y+e,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(t.text,t.shadow),this.eq_chest_name=this.equip_window.set_text_in_position("",u.EQUIP_TEXT.NAME.X,u.EQUIP_TEXT.NAME.Y+e,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(this.eq_chest_name.text,this.eq_chest_name.shadow),this.init_desc_guide()}update_info(){this.avatar&&this.avatar.destroy();const t=this.selected_char;this.set_battle_effects(),this.avatar=this.main_window.create_at_group(u.AVATAR.X,u.AVATAR.Y,"avatars",void 0,t.key_name,u.GROUP_KEY),this.main_window.update_text(t.name,this.name),this.main_window.update_text(t.level,this.level_value),this.main_window.update_text(t.class.name,this.class_name);const e={[s.equip_slots.WEAPON]:"",[s.equip_slots.HEAD]:"",[s.equip_slots.CHEST]:"",[s.equip_slots.BODY]:""};for(let i in e){const s=t.equip_slots[i];e[i]=s?this.data.info.items_list[s.key_name].name:""}this.equip_window.update_text(e[s.equip_slots.WEAPON],this.eq_weapon_name),this.equip_window.update_text(e[s.equip_slots.HEAD],this.eq_head_name),this.equip_window.update_text(e[s.equip_slots.CHEST],this.eq_shield_name),this.equip_window.update_text(e[s.equip_slots.BODY],this.eq_chest_name)}trigger_state_change(){this.change_state(u.AdvanceState[this.current_state],!0)}on_character_change(t){this.selected_char=t?"string"==typeof t?this.data.info.main_char_list[t]:t:this.chars_menu.lines[this.chars_menu.current_line][this.chars_menu.selected_index];let e=null;e=null===this.current_state||void 0===this.current_state?d.CHARACTERS:this.current_state,this.update_info(),this.change_state(e),this.data.cursor_manager.show()}inner_control(){const t=[{key:this.data.gamepad.LEFT,on_down:this.current_component.on_left.bind(this.current_component)},{key:this.data.gamepad.RIGHT,on_down:this.current_component.on_right.bind(this.current_component)},{key:this.data.gamepad.UP,on_down:this.current_component.on_up.bind(this.current_component)},{key:this.data.gamepad.DOWN,on_down:this.current_component.on_down.bind(this.current_component)}];this.current_state!==d.DJINN?t.push({key:this.data.gamepad.A,on_down:this.trigger_state_change.bind(this)},{key:this.data.gamepad.B,on_down:this.selecting_char.bind(this)},{key:this.data.gamepad.L,on_down:this.chars_menu.previous_char.bind(this.chars_menu,!0)},{key:this.data.gamepad.R,on_down:this.chars_menu.next_char.bind(this.chars_menu,!0)}):t.push({key:this.data.gamepad.A,on_down:this.selecting_char.bind(this)},{key:this.data.gamepad.B,on_down:this.selecting_char.bind(this)},{key:this.data.gamepad.SELECT,on_down:this.selecting_char.bind(this)}),this.data.control_manager.set_control(t,{loop_configs:{vertical:!0,horizontal:!0,shoulder:!0}})}change_state(t,e=!1){let i={line:0,col:0};t!==d.DJINN&&this.current_state!==d.DJINN||(this.toggle_guide_win(),t===d.DJINN?(this.chars_menu.unset_character(this.chars_menu.selected_index),this.chars_menu.arrow_group.visible=!1):(this.chars_menu.set_character(this.chars_menu.selected_index),this.chars_menu.arrow_group.visible=!0)),[d.CHARACTERS,d.DJINN].includes(t)||this.desc_window.open?t===d.CHARACTERS&&this.desc_window.open&&this.desc_window.close(void 0,!1):this.desc_window.show(void 0,!1),t!==d.ITEMS||this.equip_window.open?t!==d.ITEMS&&this.equip_window.open&&this.equip_window.close(void 0,!1):this.equip_window.show(void 0,!1),this.current_component&&(e||(i=this.current_component.current_pos),this.current_component.clear(),this.current_component=null),this.current_state=t,this.current_component=this.components[u.StateComponent[this.current_state]],this.current_state===d.DJINN?this.current_component.initialize():this.current_component.reset(i),this.current_state!==d.CHARACTERS&&this.inner_control(),this.check_main_components()}selecting_char(){this.update_info(),this.change_state(d.CHARACTERS),this.chars_menu.select_char(this.chars_menu.selected_index,!1,!0),this.chars_menu.grant_control(this.close_menu.bind(this,this.close_callback),this.trigger_state_change.bind(this),!0);const t=[{key:this.data.gamepad.SELECT,on_down:this.change_state.bind(this,d.DJINN)}];this.data.control_manager.set_control(t,{no_reset:!0}),this.data.cursor_manager.show()}open_menu(t,e){t&&(this.close_callback=t),this.selected_char=this.data.info.party_data.members[0],this.initialize(),this.guide_window.show(void 0,!1),this.main_window.show(void 0,!1),this.chars_menu.open(0,a.CharsMenuModes.MENU,void 0,!0),this.selecting_char(),this.main_window.group.bringToTop(this.main_window.get_internal_group(u.GROUP_KEY)),e&&e(),this.menu_open=!0}close_menu(t){this.menu_open=!1,this.data.cursor_manager.hide(),this.data.control_manager.reset(),this.current_component.clear(),this.current_component=null,this.current_state=null,t||(t=this.close_callback),this.chars_menu.close(),this.main_window.close(void 0,!1),this.guide_window.close(void 0,!1),this.desc_window.close(void 0,!1),this.equip_window.close(void 0,!1),this.active_sprites.forEach(t=>{t.destroy()}),this.active_sprites=[],t(),this.close_callback=null}update_eq_highlight(t){this.eq_highlight.clear(),this.eq_highlight.beginFill(this.equip_window.color,1),this.eq_highlight.drawRect(t.x,t.y,t.width,t.height),this.eq_highlight.endFill()}}e.MainStatusMenu=u,u.DESC_WIN={X:0,Y:0,WIDTH:236,HEIGHT:36},u.EQUIP_WIN={X:0,Y:80,WIDTH:116,HEIGHT:76},u.GUIDE_WIN={X:104,Y:0,WIDTH:132,HEIGHT:36},u.MAIN_WIN={X:0,Y:40,WIDTH:236,HEIGHT:116},u.NAME={X:48,Y:8},u.CLASS_NAME={X:8,Y:40},u.LEVEL={LABEL_X1:112,LABEL_Y1:8,VALUE_END_X1:149,VALUE_Y1:8,LABEL_X2:8,LABEL_Y2:56,VALUE_END_X2:45,VALUE_Y2:56},u.AVATAR={X:8,Y:8},u.GUIDE={L:{X:8,Y:8},HIFEN:{X:22,Y:8},R:{X:27,Y:8},LR_TEXT:{X:42,Y:8},A:{X:9,Y:16},A_TEXT:{X:19,Y:16},SELECT:{X:8,Y:24},SELECT_TEXT:{X:21,Y:24}},u.DESC={LINE1:{X:6,Y:7},LINE2:{X:6,Y:21}},u.DESC_GUIDE={L:{X:88,Y:24},HIFEN:{X:102,Y:24},R:{X:107,Y:24},LR_TEXT:{X:122,Y:24},A:{X:9,Y:24},A_TEXT:{X:19,Y:24}},u.EQUIP_TEXT={LABEL:{X:8,Y:8},NAME:{X:16,Y:16},SHIFT:16},u.StateComponent={[d.CHARACTERS]:0,[d.DJINN]:2,[d.STATISTICS]:0,[d.PSYNERGY]:1,[d.ITEMS]:3},u.AdvanceState={[d.CHARACTERS]:d.STATISTICS,[d.STATISTICS]:d.PSYNERGY,[d.PSYNERGY]:d.ITEMS,[d.ITEMS]:d.STATISTICS},u.FONTS={NORMAL:"gs-bmp-font",ITALIC:"gs-italic-bmp-font"},u.GROUP_KEY="main_status",u.DESC_GUIDE_KEY="desc_guide",u.MAX_EFFECTS_DISPLAYED=4},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function _(t){try{r(s.next(t))}catch(t){a(t)}}function o(t){try{r(s.throw(t))}catch(t){a(t)}}function r(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(_,o)}r((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.GoldenSun=void 0;const n=i(1),a=i(6),_=i(38),o=i(39),r=i(40),h=i(0),c=i(41),l=i(43),d=i(44),u=i(66),p=i(67),m=i(92),g=i(110),y=i(119),w=i(4),f=i(120),b=i(121);class v{constructor(){this.game=null,this.dbs={},this.info={},this.particle_manager=null,this.menu_open=!1,this.shop_open=!1,this.in_battle=!1,this.created=!1,this.force_stop_movement=!1,this.hero=null,this.collision=null,this.debug=null,this.main_menu=null,this.shop_menu=null,this.map=null,this.tile_event_manager=null,this.game_event_manager=null,this.battle_instance=null,this.audio=null,this.control_manager=null,this.cursor_manager=null,this.gamepad=null,this.fullscreen=!1,this.scale_factor=1,this.underlayer_group=null,this.npc_group=null,this.overlayer_group=null,this.game=new Phaser.Game(n.GAME_WIDTH,n.GAME_HEIGHT,Phaser.WEBGL,"game",{preload:this.preload.bind(this),create:this.create.bind(this),update:this.update.bind(this),render:this.render.bind(this),loadRender:this.loadRender.bind(this)},!1,!1)}preload(){o.load_all(this.game),this.game.time.advancedTiming=!0,this.game.stage.smoothed=!1,this.game.camera.roundPx=!0,this.game.renderer.renderSession.roundPixels=!0,this.game.camera.fade(0,1)}render_loading(){this.game.debug.text("Loading...",5,15,"#00ff00")}loadRender(){this.render_loading()}create(){return s(this,void 0,void 0,(function*(){u.load_databases(this.game,this.dbs),this.gamepad=new f.Gamepad(this),this.cursor_manager=new w.CursorManager(this.game),this.control_manager=new y.ControlManager(this.game,this.gamepad),this.scale_factor=this.dbs.init_db.initial_scale_factor,this.particle_manager=this.game.plugins.add(Phaser.ParticleStorm),this.debug=new _.Debug(this.game,this),this.debug.initialize_controls(),this.underlayer_group=this.game.add.group(),this.npc_group=this.game.add.group(),this.overlayer_group=this.game.add.group(),this.audio=new b.Audio(this.game,this),yield p.initialize_game_data(this.game,this),this.map=yield this.info.maps_list[this.dbs.init_db.map_key_name].mount_map(this.dbs.init_db.map_z_index);const t=this.dbs.init_db.hero_key_name;this.hero=new c.Hero(this.game,this,t,this.dbs.init_db.x_tile_position,this.dbs.init_db.y_tile_position,this.dbs.init_db.initial_action,h.directions[this.dbs.init_db.initial_direction],this.info.main_char_list[t].walk_speed,this.info.main_char_list[t].dash_speed,this.info.main_char_list[t].climb_speed);const e=this.info.main_char_list[t].sprite_base;this.hero.set_sprite(this.npc_group,e,this.map.sprite,this.map.collision_layer,void 0,void 0,this.map.is_world_map),this.hero.set_shadow("shadow",this.npc_group,this.map.collision_layer),this.hero.create_half_crop_mask(this.map.is_world_map),this.hero.camera_follow(),this.hero.play(),this.collision=new r.Collision(this.game,this.hero),this.hero.config_body(this.collision),this.collision.config_collision_groups(this.map),this.map.config_all_bodies(this.collision,this.map.collision_layer),this.collision.config_collisions(this.map,this.map.collision_layer,this.npc_group),this.game.physics.p2.updateBoundsCollisionGroup(),this.tile_event_manager=new l.TileEventManager(this.game,this,this.hero,this.collision),this.game_event_manager=new d.GameEventManager(this.game,this),this.initialize_utils_controls(),this.game.sound.mute=!0,this.created=!0,this.game.camera.resetFX()}))}initialize_utils_controls(){this.game.scale.setupScale(this.scale_factor*n.GAME_WIDTH,this.scale_factor*n.GAME_HEIGHT),window.dispatchEvent(new Event("resize")),this.game.scale.fullScreenScaleMode=Phaser.ScaleManager.SHOW_ALL,this.game.input.onTap.add((t,e)=>{e&&this.game.scale.startFullScreen(!0)}),this.game.scale.onFullScreenChange.add(()=>{this.fullscreen=!this.fullscreen,this.scale_factor=1,this.game.scale.setupScale(n.GAME_WIDTH,n.GAME_HEIGHT),window.dispatchEvent(new Event("resize"))}),this.shop_menu=new g.ShopMenu(this.game,this),this.main_menu=m.initialize_menu(this.game,this);let t=[{key:this.gamepad.ZOOM1,on_down:()=>{this.fullscreen||(this.scale_factor=1,this.game.scale.setupScale(n.GAME_WIDTH,n.GAME_HEIGHT),window.dispatchEvent(new Event("resize")))}},{key:this.gamepad.ZOOM2,on_down:()=>{this.fullscreen||(this.scale_factor=2,this.game.scale.setupScale(this.scale_factor*n.GAME_WIDTH,this.scale_factor*n.GAME_HEIGHT),window.dispatchEvent(new Event("resize")))}},{key:this.gamepad.ZOOM3,on_down:()=>{this.fullscreen||(this.scale_factor=3,this.game.scale.setupScale(this.scale_factor*n.GAME_WIDTH,this.scale_factor*n.GAME_HEIGHT),window.dispatchEvent(new Event("resize")))}},{key:this.gamepad.MUTE,on_down:()=>{this.game.sound.context.resume(),this.game.sound.mute=!this.game.sound.mute}},{key:this.gamepad.PSY1,on_down:()=>{this.hero.in_action()||this.menu_open||this.in_battle||this.shop_open||this.info.field_abilities_list.move.cast(this.hero,this.dbs.init_db.initial_shortcuts.move)}},{key:this.gamepad.PSY2,on_down:()=>{this.hero.in_action()||this.menu_open||this.in_battle||this.shop_open||this.info.field_abilities_list.frost.cast(this.hero,this.dbs.init_db.initial_shortcuts.frost)}},{key:this.gamepad.PSY3,on_down:()=>{this.hero.in_action()||this.menu_open||this.in_battle||this.shop_open||this.info.field_abilities_list.growth.cast(this.hero,this.dbs.init_db.initial_shortcuts.growth)}}];this.control_manager.set_control(t,{persist:!0})}hero_movement_allowed(t=!0){return!(this.hero.in_action(t)||this.menu_open||this.shop_open||this.in_battle||this.tile_event_manager.on_event||this.force_stop_movement)}update(){if(this.created){if(this.hero_movement_allowed()){this.hero.update_tile_position(this.map.sprite),this.tile_event_manager.fire_triggered_events();const t=a.TileEvent.get_location_key(this.hero.tile_x_pos,this.hero.tile_y_pos);t in this.map.events&&this.tile_event_manager.check_tile_events(t,this.map),this.hero.update(this.map),this.map.update()}else this.hero.stop_char(!1),this.menu_open&&this.main_menu.is_active?this.main_menu.update_position():this.shop_open&&this.shop_menu.horizontal_menu.menu_active?this.shop_menu.update_position():this.in_battle&&this.battle_instance.update();this.game.time.fps>60&&Math.abs(this.game.time.suggestedFps-this.game.time.desiredFps)>10&&(this.game.time.desiredFps=this.game.time.suggestedFps)}else this.render_loading()}render(){this.debug.set_debug_info(),this.game.time.frames%8==0&&this.debug.fill_key_debug_table(),this.game.time.frames%30==0&&this.debug.fill_stats_debug_table()}}e.GoldenSun=v;var E=new v;window.data=E},function(t,e){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Debug=void 0;const s=i(0),n=i(3);e.Debug=class{constructor(t,e){this.game=t,this.data=e,this.debug_physics=!1,this.grid=!1,this.debug_keys=!1,this.debug_stats=!1,this.show_fps=!1,this.show_sliders=!1}initialize_controls(){let t=[{key:this.data.gamepad.DEBUG_PHYSICS,on_down:this.toggle_debug_physics.bind(this)},{key:this.data.gamepad.DEBUG_GRID,on_down:this.toggle_grid.bind(this)},{key:this.data.gamepad.DEBUG_KEYS,on_down:this.toggle_keys.bind(this)},{key:this.data.gamepad.DEBUG_STATS,on_down:this.toggle_stats.bind(this)},{key:this.data.gamepad.DEBUG_FPS,on_down:this.toggle_fps.bind(this)},{key:this.data.gamepad.DEBUG_SLIDERS,on_down:this.toggle_sliders.bind(this)}];this.data.control_manager.set_control(t,{persist:!0})}update_debug_physics(t){this.data.map.collision_sprite.body.debug=t;for(let e=0;e<this.data.npc_group.children.length;++e){let i=this.data.npc_group.children[e];(i.is_npc||i.is_interactable_object)&&(i.body&&(i.body.debug=t))}}toggle_debug_physics(){this.data.hero.sprite.body.debug=!this.data.hero.sprite.body.debug,this.update_debug_physics(this.data.hero.sprite.body.debug);for(let t=0;t<this.data.collision.dynamic_jump_events_bodies.length;++t)this.data.collision.dynamic_jump_events_bodies[t].debug=!this.data.collision.dynamic_jump_events_bodies[t].debug;for(let t=0;t<this.data.map.interactable_objects.length;++t){const e=this.data.map.interactable_objects[t];e.custom_data.blocking_stair_block&&(e.custom_data.blocking_stair_block.debug=!e.custom_data.blocking_stair_block.debug)}this.debug_physics=!this.debug_physics}toggle_keys(){this.debug_keys=!this.debug_keys;const t=(t,e)=>{let i;switch(e.keyCode){case 38:if(e.repeat)return;i=document.querySelector("#key_debug .up").classList;break;case 40:if(e.repeat)return;i=document.querySelector("#key_debug .down").classList;break;case 39:if(e.repeat)return;i=document.querySelector("#key_debug .right").classList;break;case 37:if(e.repeat)return;i=document.querySelector("#key_debug .left").classList}i&&(t?i.add("pressed"):i.remove("pressed"))};this.debug_keys?(document.getElementById("key_debug").style.display="flex",document.onkeydown=t.bind(null,!0),document.onkeyup=t.bind(null,!1)):(document.getElementById("key_debug").style.display="none",document.onkeydown=void 0,document.onkeyup=void 0)}toggle_sliders(){this.show_sliders=!this.show_sliders,this.show_sliders?document.getElementById("sliders_debug").style.display="block":document.getElementById("sliders_debug").style.display="none"}add_slider(){const t=document.createElement("div");t.classList.add("holder");const e=document.createElement("input");e.type="text",e.placeholder="variable name";const i=document.createElement("input");i.type="range",i.disabled=!0;const s=document.createElement("input");s.type="number",s.placeholder="min value",s.onkeyup=t=>{i.min=s.value};const a=document.createElement("input");a.type="number",a.placeholder="max value",a.onkeyup=t=>{i.max=a.value};const _=document.createElement("input");_.type="number",_.placeholder="step value";const o=document.createElement("input");o.type="number",o.placeholder="current value",o.disabled=!0,o.onkeyup=o.onchange=t=>{n.set(window,e.value,parseFloat(o.value))};const r=document.createElement("input");r.type="button",r.value="Remove",r.onclick=e=>{t.remove()},_.onkeyup=t=>{i.step=_.value,o.step=_.value,s.step=_.value,a.step=_.value},i.oninput=t=>{n.set(window,e.value,parseFloat(i.value)),o.value=i.value},e.onkeyup=t=>{const s=n.get(window,e.value);n.isNumber(s)?(i.disabled=!1,o.disabled=!1,i.value=s.toString(),o.value=s.toString()):(i.disabled=!0,o.disabled=!0)},t.appendChild(e),t.appendChild(s),t.appendChild(a),t.appendChild(_),t.appendChild(i),t.appendChild(o),t.appendChild(r),document.getElementById("sliders_debug").appendChild(t)}fill_key_debug_table(){this.debug_keys&&(document.querySelector("#key_debug table .direction").innerHTML=s.reverse_directions[this.data.hero.current_direction],document.querySelector("#key_debug table .action").innerHTML=this.data.hero.current_action,document.querySelector("#key_debug table .x").innerHTML=`${this.data.hero.tile_x_pos}/${this.data.hero.sprite.body.x.toFixed(3)}`,document.querySelector("#key_debug table .y").innerHTML=`${this.data.hero.tile_y_pos}/${this.data.hero.sprite.body.y.toFixed(3)}`,document.querySelector("#key_debug table .speed_x").innerHTML=this.data.hero.sprite.body.velocity.x.toFixed(3),document.querySelector("#key_debug table .speed_y").innerHTML=this.data.hero.sprite.body.velocity.y.toFixed(3),document.querySelector("#key_debug table .force_direction").innerHTML=this.data.hero.force_direction.toString(),document.querySelector("#key_debug table .stop_by_colliding").innerHTML=this.data.hero.stop_by_colliding.toString())}toggle_fps(){this.show_fps=!this.show_fps}toggle_grid(){this.grid=!this.grid}set_debug_info(){if(this.game.debug.text("",0,0),this.show_fps&&this.game.debug.text("FPS: "+this.game.time.fps||!1,5,15,"#00ff00"),this.grid){const t=this.data.map.sprite.tileWidth;for(let e=0;e<this.game.world.width;e+=t)this.game.debug.geom(new Phaser.Line(e,0,e,this.game.world.height),"rgba(0,255,255,0.35)",!1,4);const e=this.data.map.sprite.tileHeight;for(let t=0;t<this.game.world.height;t+=e)this.game.debug.geom(new Phaser.Line(0,t,this.game.world.width,t),"rgba(0,255,255,0.35)",!1,4);let i=this.data.hero.tile_x_pos*t,n=this.data.hero.tile_y_pos*e;this.game.debug.geom(new Phaser.Rectangle(i,n,t,e),"rgba(255,0,0,0.5)"),this.game.debug.geom(new Phaser.Circle(this.data.hero.sprite.x,this.data.hero.sprite.y,5),"rgba(20,75,0,1.0)");for(let i in this.data.map.events){let s=i.split("_").map(t=>parseInt(t));this.game.debug.geom(new Phaser.Rectangle(s[0]*t,s[1]*e,t,e),"rgba(255,255,60,0.7)")}if(this.game.input.mousePointer.withinGame){const t=(this.game.camera.x+this.game.input.mousePointer.x/this.data.scale_factor)/this.data.map.sprite.tileWidth|0,e=(this.game.camera.y+this.game.input.mousePointer.y/this.data.scale_factor)/this.data.map.sprite.tileHeight|0;this.game.debug.text(`x: ${t}, y: ${e}`,140,15,"#00ff00");const i=t+"_"+e;if(i in this.data.map.events){const t=this.data.map.events[i].map(t=>Object.assign({},t,Object.assign({game:"[Phaser.Game]",data:"[GoldenSun]",activation_directions:t.activation_directions.map(t=>s.reverse_directions[t])},t.origin_interactable_object&&{origin_interactable_object:`[${t.origin_interactable_object.key_name}]`})));document.getElementById("object_inspector").innerText=JSON.stringify(t,null,4)}}else this.game.debug.text("x: --, y: --",140,15,"#00ff00")}else document.getElementById("object_inspector").innerText=""}toggle_stats(){this.data.in_battle?this.debug_stats=!this.debug_stats:this.debug_stats=!1;const t=document.getElementById("stats_debug_select");this.debug_stats?(this.debug_stats_info={chars:this.data.battle_instance.allies_info.concat(this.data.battle_instance.enemies_info).map(t=>t.instance),selected:0,listener:t=>{this.debug_stats_info.selected=t.target.value}},this.debug_stats_info.chars.forEach((e,i)=>{let s=document.createElement("option");s.innerText=e.name,s.setAttribute("value",i.toString()),t.appendChild(s)}),t.addEventListener("change",this.debug_stats_info.listener),document.getElementById("stats_debug").style.display="block"):(this.debug_stats_info&&(t.removeEventListener("change",this.debug_stats_info.listener),this.debug_stats_info=void 0),document.getElementById("stats_debug_select").innerHTML="",document.getElementById("stats_debug").style.display="none")}fill_stats_debug_table(){if(!this.debug_stats||!this.data.in_battle)return;const t=this.debug_stats_info.chars[this.debug_stats_info.selected];document.querySelector("#stats_debug table .name").innerHTML=t.name,document.querySelector("#stats_debug table .class").innerHTML=t.class.name,document.querySelector("#stats_debug table .level").innerHTML=t.level.toString(),document.querySelector("#stats_debug table .exp").innerHTML=t.current_exp.toString(),document.querySelector("#stats_debug table .current_hp").innerHTML=t.current_hp.toString(),document.querySelector("#stats_debug table .max_hp").innerHTML=t.max_hp.toString(),document.querySelector("#stats_debug table .current_pp").innerHTML=t.current_pp.toString(),document.querySelector("#stats_debug table .max_pp").innerHTML=t.max_pp.toString(),document.querySelector("#stats_debug table .atk").innerHTML=t.atk.toString(),document.querySelector("#stats_debug table .def").innerHTML=t.def.toString(),document.querySelector("#stats_debug table .agi").innerHTML=t.agi.toString(),document.querySelector("#stats_debug table .luk").innerHTML=t.luk.toString(),document.querySelector("#stats_debug table .venus_power").innerHTML=t.venus_power_current.toString(),document.querySelector("#stats_debug table .venus_resist").innerHTML=t.venus_resist_current.toString(),document.querySelector("#stats_debug table .venus_level").innerHTML=t.venus_level_current.toString(),document.querySelector("#stats_debug table .mercury_power").innerHTML=t.mercury_power_current.toString(),document.querySelector("#stats_debug table .mercury_resist").innerHTML=t.mercury_resist_current.toString(),document.querySelector("#stats_debug table .mercury_level").innerHTML=t.mercury_level_current.toString(),document.querySelector("#stats_debug table .mars_power").innerHTML=t.mars_power_current.toString(),document.querySelector("#stats_debug table .mars_resist").innerHTML=t.mars_resist_current.toString(),document.querySelector("#stats_debug table .mars_level").innerHTML=t.mars_level_current.toString(),document.querySelector("#stats_debug table .jupiter_power").innerHTML=t.jupiter_power_current.toString(),document.querySelector("#stats_debug table .jupiter_resist").innerHTML=t.jupiter_resist_current.toString(),document.querySelector("#stats_debug table .jupiter_level").innerHTML=t.jupiter_level_current.toString(),document.querySelector("#stats_debug table .turns").innerHTML=t.turns.toString(),document.querySelector("#stats_debug table .temp_statuses").innerHTML=[...t.temporary_status].join(" "),document.querySelector("#stats_debug table .perm_statuses").innerHTML=[...t.permanent_status].join(" ");let e="";Object.keys(t.effect_turns_count).sort().forEach(i=>{"power"===i||"resist"===i?s.ordered_elements.forEach(s=>{e+=`${i}[${s}]/${t.effect_turns_count[i][s]} <br>`}):e+=`${i}/${t.effect_turns_count[i]} <br>`}),document.querySelector("#stats_debug table .buff").innerHTML=e,document.querySelector("#stats_debug table .effect_count").innerHTML=t.effects.length.toString()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.load_all=void 0,e.load_all=function(t){!function(t){t.load.json("init_db","assets/init.json"),t.load.json("classes_db","assets/dbs/classes_db.json"),t.load.json("abilities_db","assets/dbs/abilities_db.json"),t.load.json("items_db","assets/dbs/items_db.json"),t.load.json("npc_db","assets/dbs/npc_db.json"),t.load.json("interactable_objects_db","assets/dbs/interactable_objects_db.json"),t.load.json("djinni_db","assets/dbs/djinni_db.json"),t.load.json("enemies_db","assets/dbs/enemies_db.json"),t.load.json("enemies_parties_db","assets/dbs/enemies_parties_db.json"),t.load.json("maps_db","assets/dbs/maps_db.json"),t.load.json("main_chars_db","assets/dbs/main_chars_db.json"),t.load.json("summons_db","assets/dbs/summons_db.json"),t.load.json("misc_animations_db","assets/dbs/misc_animations_db.json"),t.load.json("shopkeep_dialog_db","assets/dbs/shopkeep_dialog_db.json"),t.load.json("shops_db","assets/dbs/shops_db.json")}(t),function(t){t.load.image("shadow","assets/images/misc/shadow.jpg"),t.load.image("cursor","assets/images/misc/cursor.gif"),t.load.image("green_arrow","assets/images/misc/green_arrow.gif"),t.load.image("up_arrow","assets/images/misc/up_arrow.gif"),t.load.image("down_arrow","assets/images/misc/down_arrow.gif"),t.load.image("page_arrow","assets/images/misc/page_arrow.png"),t.load.image("psynergy_aura","assets/images/misc/psynergy_aura.png"),t.load.image("equipped","assets/images/misc/equipped.gif"),t.load.image("venus_star","assets/images/misc/venus_star.gif"),t.load.image("mercury_star","assets/images/misc/mercury_star.gif"),t.load.image("mars_star","assets/images/misc/mars_star.gif"),t.load.image("jupiter_star","assets/images/misc/jupiter_star.gif"),t.load.image("stat_up","assets/images/misc/stat_up.gif"),t.load.image("stat_down","assets/images/misc/stat_down.gif"),t.load.image("arrow_change","assets/images/misc/arrow_change.png"),t.load.image("item_border","assets/images/misc/item_border.png"),t.load.image("price_tag","assets/images/misc/price_tag.png"),t.load.image("broken","assets/images/misc/broken.png"),t.load.image("frost_snowflake","assets/images/interactable_objects/snowflake.png"),t.load.atlasJSONHash("battle_effect_icons","assets/images/icons/battle_effects/battle_effect_icons.png","assets/images/icons/battle_effects/battle_effect_icons.json"),t.load.atlasJSONHash("dust","assets/images/misc/dust.png","assets/images/misc/dust.json"),t.load.atlasJSONHash("battle_cursor","assets/images/misc/battle_cursor.png","assets/images/misc/battle_cursor.json"),t.load.atlasJSONHash("ranges","assets/images/misc/ranges.png","assets/images/misc/ranges.json"),t.load.atlasJSONHash("psynergy_particle","assets/images/interactable_objects/psynergy_particle.png","assets/images/interactable_objects/psynergy_particle.json"),t.load.atlasJSONHash("psynergy_ball","assets/images/interactable_objects/psynergy_ball.png","assets/images/interactable_objects/psynergy_ball.json")}(t),function(t){t.load.atlasJSONHash("battle_backgrounds","assets/images/battle_backgrounds/battle_backgrounds.png","assets/images/battle_backgrounds/battle_backgrounds.json"),t.load.atlasJSONHash("avatars","assets/images/avatars/avatars.png","assets/images/avatars/avatars.json")}(t),function(t){t.load.atlasJSONHash("buttons","assets/images/buttons/buttons.png","assets/images/buttons/buttons.json"),t.load.image("shift_keyboard","assets/images/keyboard/shift.png"),t.load.image("tab_keyboard","assets/images/keyboard/tab.png"),t.load.image("spacebar_keyboard","assets/images/keyboard/spacebar.png"),t.load.image("a_button","assets/images/keyboard/a_button.png"),t.load.image("select_button","assets/images/keyboard/select_button.png"),t.load.image("l_button","assets/images/keyboard/l_button.png"),t.load.image("r_button","assets/images/keyboard/r_button.png")}(t),function(t){t.load.bitmapFont("gs-bmp-font","assets/font/golden-sun.png","assets/font/golden-sun.fnt"),t.load.bitmapFont("gs-italic-bmp-font","assets/font/golden-sun-italic.png","assets/font/golden-sun-italic.fnt"),t.load.bitmapFont("gs-item-bmp-font","assets/font/gs-item-font.png","assets/font/gs-item-font.fnt"),t.load.bitmapFont("gs-shop-bmp-font","assets/font/gs-shop-font.png","assets/font/gs-shop-font.fnt")}(t),function(t){t.load.script("color_filters","assets/filters/color_filters.js"),t.load.script("mode7","assets/filters/mode7.js")}(t),function(t){t.load.script("particlestorm","assets/plugins/particle-storm.js")}(t),function(t){t.load.json("se_data","assets/sounds/se/se.json")}(t)}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Collision=void 0;e.Collision=class{constructor(t,e){this.game=t,this.hero=e,this.config_world(),this.hero_collision_group=this.game.physics.p2.createCollisionGroup(),this.dynamic_events_collision_group=this.game.physics.p2.createCollisionGroup(),this.map_collision_group=t.physics.p2.createCollisionGroup(),this.npc_collision_groups={},this.interactable_objs_collision_groups={},this.max_layers_created=0,this.dynamic_jump_events_bodies=[]}config_world(){this.game.physics.startSystem(Phaser.Physics.P2JS),this.game.physics.p2.setImpactEvents(!0),this.game.physics.p2.world.defaultContactMaterial.restitution=0,this.game.physics.p2.world.defaultContactMaterial.relaxation=8,this.game.physics.p2.world.defaultContactMaterial.friction=0,this.game.physics.p2.world.defaultContactMaterial.contactSkinSize=.001,this.game.physics.p2.world.setGlobalStiffness(1e5),this.game.physics.p2.restitution=0}config_collision_groups(t){for(let e=this.max_layers_created;e<t.collision_layers_number;++e)this.npc_collision_groups[e]=this.game.physics.p2.createCollisionGroup(),this.interactable_objs_collision_groups[e]=this.game.physics.p2.createCollisionGroup();this.max_layers_created=Math.max(this.max_layers_created,t.collision_layers_number)}config_collisions(t,e,i){this.hero.sprite.body.collides(this.map_collision_group),t.collision_sprite.body.collides(this.hero_collision_group);for(let t in this.npc_collision_groups)this.hero.sprite.body.removeCollisionGroup(this.npc_collision_groups[t],!0);e in this.npc_collision_groups&&this.hero.sprite.body.collides(this.npc_collision_groups[e]);for(let t in this.interactable_objs_collision_groups)this.hero.sprite.body.removeCollisionGroup(this.interactable_objs_collision_groups[t],!0);e in this.interactable_objs_collision_groups&&this.hero.sprite.body.collides(this.interactable_objs_collision_groups[e]);for(let t=0;t<i.children.length;++t){const e=i.children[t];(e.is_npc||e.is_interactable_object)&&(e.body&&e.body.collides(this.hero_collision_group))}this.hero.sprite.body.collides(this.dynamic_events_collision_group)}change_map_body(t,e){if(t.map.collision_layer===e)return;t.map.collision_layer=e,this.hero.shadow.base_collision_layer=t.map.collision_layer,this.hero.sprite.base_collision_layer=t.map.collision_layer,t.map.config_body(this,e),this.config_collision_groups(t.map),this.config_collisions(t.map,t.map.collision_layer,t.npc_group);let i=t.map.layers;for(let e=0;e<i.length;++e){let s=i[e];if(void 0!==s.properties.over){const i=s.properties.over.toString().split(",").map(t=>parseInt(t));if(i.length<=t.map.collision_layer)continue;if(Boolean(i[t.map.collision_layer])){t.underlayer_group.remove(s.sprite,!1,!0);let i=0;for(i=0;i<t.overlayer_group.children.length;++i){if(t.overlayer_group.children[i].layer_z>(void 0===s.z?e:s.z)){t.overlayer_group.addAt(s.sprite,i,!0);break}}i===t.overlayer_group.children.length&&t.overlayer_group.add(s.sprite,!0)}else{t.overlayer_group.remove(s.sprite,!1,!0);let e=0;for(e=0;e<t.underlayer_group.children.length;++e){if(t.underlayer_group.children[e].layer_z>s.z){t.underlayer_group.addAt(s.sprite,e,!0);break}}e===t.underlayer_group.children.length&&t.underlayer_group.add(s.sprite,!0)}}}}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Hero=void 0;const s=i(21),n=i(1),a=i(6),_=i(0),o=i(22);class r extends s.ControllableChar{constructor(t,e,i,s,n,a,_,o,r,h){super(t,e,i,s,n,a,_,!0,o,r,h),this.arrow_inputs=null}check_control_inputs(){this.arrow_inputs=1*+this.game.input.keyboard.isDown(this.data.gamepad.RIGHT)|2*+this.game.input.keyboard.isDown(this.data.gamepad.LEFT)|4*+this.game.input.keyboard.isDown(this.data.gamepad.UP)|8*+this.game.input.keyboard.isDown(this.data.gamepad.DOWN),this.required_direction=r.ROTATION_KEY[this.arrow_inputs],this.dashing=this.game.input.keyboard.isDown(this.data.gamepad.B)}set_speed_factors(t=!1){if(t&&this.data.tile_event_manager.on_event)return;let e=r.ROTATION_KEY[this.arrow_inputs];this.climbing?null===e?(this.x_speed=this.y_speed=0,this.idle_climbing=!0):(1==(1&e)&&--e,this.set_direction(e),this.idle_climbing=!1,this.x_speed=r.SPEEDS[e].x,this.y_speed=r.SPEEDS[e].y):null!==e||this.force_direction?(this.force_direction?e=this.current_direction:(this.current_direction=e,1&this.game.time.frames&&(this.desired_direction=_.get_transition_directions(this.desired_direction,e))),this.x_speed=r.SPEEDS[e].x,this.y_speed=r.SPEEDS[e].y):this.x_speed=this.y_speed=0}check_interactable_objects(t,e){let i=0;for(i=0;i<t.interactable_objects.length;++i){const s=t.interactable_objects[i].sprite.body;if(s&&!(e.bodyA!==s.data&&e.bodyB!==s.data||e.bodyA!==this.sprite.body.data&&e.bodyB!==this.sprite.body.data)){const e=t.interactable_objects[i];if([_.base_actions.WALK,_.base_actions.DASH].includes(this.current_action)&&this.data.map.collision_layer===e.base_collision_layer){if(this.trying_to_push=!0,null===this.push_timer){this.trying_to_push_direction=this.current_direction;const i=t.events[a.TileEvent.get_location_key(this.tile_x_pos,this.tile_y_pos)];let s=!1;if(i&&i.forEach(t=>{t.type===a.event_types.CLIMB&&t.is_set&&t.activation_directions.includes(this.trying_to_push_direction)&&(s=!0)}),!s){let i=e.get_current_position(t);switch(this.trying_to_push_direction){case _.directions.up:i.y-=1;break;case _.directions.down:i.y+=1;break;case _.directions.left:i.x-=1;break;case _.directions.right:i.x+=1}e.position_allowed(i.x,i.y)&&(this.push_timer=this.game.time.events.add(Phaser.Timer.QUARTER,o.normal_push.bind(this,this.game,this.data,e)))}}break}}}i===t.interactable_objects.length&&(this.trying_to_push=!1)}collision_dealer(t){let e=[];for(let i=0;i<this.game.physics.p2.world.narrowphase.contactEquations.length;++i){const s=this.game.physics.p2.world.narrowphase.contactEquations[i];s.bodyA===this.sprite.body.data&&e.push(s.normalA),this.check_interactable_objects(t,s)}if(e.length&&[_.base_actions.WALK,_.base_actions.DASH,_.base_actions.CLIMB].includes(this.current_action)){const t=this.data.map.is_world_map?r.SPEED_LIMIT_TO_STOP_WORLD_MAP:r.SPEED_LIMIT_TO_STOP;if(Math.abs(this.sprite.body.velocity.x)<t&&Math.abs(this.sprite.body.velocity.y)<t){let t=new Array(e.length);e.forEach((e,i)=>{Math.abs(e[0])<r.MINIMAL_SLOPE&&(e[0]=0),Math.abs(e[1])<r.MINIMAL_SLOPE&&(e[1]=0),Math.abs(e[0])>1-r.MINIMAL_SLOPE&&(e[0]=Math.sign(e[0])),Math.abs(e[1])>1-r.MINIMAL_SLOPE&&(e[1]=Math.sign(e[1])),t[i]=_.range_360(Math.atan2(e[1],-e[0]))});const i=_.range_360(Math.atan2(-this.sprite.body.velocity.temp_y,this.sprite.body.velocity.temp_x));t.forEach(t=>{if(t>=i-n.degree15&&t<=i+n.degree15)return this.sprite.body.velocity.temp_x=0,void(this.sprite.body.velocity.temp_y=0)}),this.stop_by_colliding=!0,this.force_direction=!1}else if(this.current_action!==_.base_actions.CLIMB)if(this.stop_by_colliding=!1,1===e.length){const t=r.ROTATION_NORMAL[_.range_360(Math.atan2(e[0][1],-e[0][0])+n.degree15)/n.degree30|0],i=r.ROTATION_KEY[this.arrow_inputs]-t&7;1===i||7===i?(this.force_direction=!0,this.set_direction(t+(i<<1)&7)):this.force_direction=!1}else this.force_direction=!1;else this.stop_by_colliding=!1}else this.stop_by_colliding=!1,this.force_direction=!1;this.apply_speed()}update(t){this.check_control_inputs(),this.set_speed_factors(!0),this.set_current_action(),this.calculate_speed(),this.collision_dealer(t),this.set_action(!0),this.update_shadow(),this.update_half_crop()}config_body(t,e=n.HERO_BODY_RADIUS){this.game.physics.p2.enable(this.sprite,!1),this.reset_anchor(),this.sprite.body.clearShapes(),this.body_radius=e,this.sprite.body.setCircle(this.body_radius,0,0),this.sprite.body.setCollisionGroup(t.hero_collision_group),this.sprite.body.mass=1,this.sprite.body.damping=0,this.sprite.body.angularDamping=0,this.sprite.body.inertia=0,this.sprite.body.setZeroRotation(),this.sprite.body.fixedRotation=!0}}e.Hero=r,r.SPEED_LIMIT_TO_STOP=13,r.SPEED_LIMIT_TO_STOP_WORLD_MAP=9,r.MINIMAL_SLOPE=.1,r.ROTATION_KEY=[null,_.directions.right,_.directions.left,null,_.directions.up,_.directions.up_right,_.directions.up_left,null,_.directions.down,_.directions.down_right,_.directions.down_left,null,null,null,null,null],r.ROTATION_NORMAL=[_.directions.right,_.directions.up_right,_.directions.up_right,_.directions.up,_.directions.up_left,_.directions.up_left,_.directions.left,_.directions.down_left,_.directions.down_left,_.directions.down,_.directions.down_right,_.directions.down_right],r.SPEEDS={[_.directions.right]:{x:1,y:0},[_.directions.left]:{x:-1,y:0},[_.directions.up]:{x:0,y:-1},[_.directions.up_right]:{x:n.INV_SQRT2,y:-n.INV_SQRT2},[_.directions.up_left]:{x:-n.INV_SQRT2,y:-n.INV_SQRT2},[_.directions.down]:{x:0,y:1},[_.directions.down_right]:{x:n.INV_SQRT2,y:n.INV_SQRT2},[_.directions.down_left]:{x:-n.INV_SQRT2,y:n.INV_SQRT2}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Footsteps=void 0;const s=i(0),n=Phaser.Timer.SECOND<<1,a=Phaser.Timer.QUARTER,_=Phaser.Timer.QUARTER,o=s.base_actions.IDLE,r=s.directions.down,h="none",c="right",l="left";e.Footsteps=class{constructor(t,e){this.game=t,this.data=e,this.x_pos=0,this.y_pos=0,this.current_action=o,this.current_direction=r,this.anchor_x=.5,this.anchor_y=.5,this.group=this.game.add.group(),this.group.send_to_back=!0,this.group.base_collision_layer=0,this.dead_steps=new Array(20),this.dead_index=0,this.foot_forward=h,this.can_make_footprint=!0,this.footsteps_time_interval=a,this.new_step_timer=this.game.time.create(!1),this.expire_timer=this.game.time.create(!1),this.footsteps_sprite_base=this.data.info.misc_sprite_base_list.footprints}set_new_step_timer(){this.can_make_footprint=!1,this.new_step_timer.add(this.footsteps_time_interval,()=>{this.can_make_footprint=!0}),this.new_step_timer.start()}set_expire_timer(t,e){this.expire_timer.add(n,()=>{t.animations.play(e)},this),this.expire_timer.start()}kill_step(t){20===this.dead_index?t.destroy():(t.kill(),this.dead_steps[this.dead_index++]=t)}position_footsteps(t){t.scale.x=this.foot_forward===c?-1:1,t.rotation=(this.current_direction+2)*Math.PI/4}create_step(t,e){this.data.npc_group.getIndex(this.group)<0&&this.data.npc_group.add(this.group),this.current_direction=t,this.current_action=e,this.update_foot();const i=this.current_action===s.base_actions.IDLE?"double":"single",n=this.footsteps_sprite_base.getAnimationKey("footprints",i);let a;if(0===this.dead_index){const t=this.footsteps_sprite_base.getActionKey("footprints");a=this.group.create(0,0,t),a.anchor.setTo(this.anchor_x,this.anchor_y),this.footsteps_sprite_base.setAnimation(a,"footprints")}else a=this.dead_steps[--this.dead_index],a.reset(0,0);const _=a.animations.getAnimation(n);_.stop(!0),this.group.base_collision_layer=this.data.map.collision_layer,a.x=this.data.hero.shadow.x,a.y=this.data.hero.shadow.y,this.position_footsteps(a),_.onComplete.addOnce(()=>{this.kill_step(a)}),this.set_expire_timer(a,n),this.set_new_step_timer()}update_foot(){this.footsteps_time_interval=this.current_action===s.base_actions.WALK?a:_,this.current_action===s.base_actions.IDLE?this.foot_forward=h:this.foot_forward=this.foot_forward===l?c:l}clean_all(t=!1){this.new_step_timer.stop(!0),this.expire_timer.stop(!0),this.group.children.forEach(e=>{t?e.destroy():(e.animations.currentAnim.stop(!0),e.animations.currentAnim.onComplete.removeAll(),e.kill())}),this.dead_steps=this.group.children.slice(),this.dead_index=this.group.children.length}destroy(){this.clean_all(!0),this.new_step_timer.destroy(),this.expire_timer.destroy()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TileEventManager=void 0;const s=i(0),n=i(6);class a{constructor(){this.climb_event=!1,this.queue=[]}add(t,e,i,s=!1){switch(t.type){case n.event_types.CLIMB:t.active&&t.is_set&&t.activation_directions.includes(e)&&(this.climb_event=!0)}s?i():this.queue.push({event:t,fire_function:i})}process_queue(){this.climb_event&&(this.queue=this.queue.filter(t=>t.event.type!==n.event_types.JUMP)),this.queue.forEach(t=>t.fire_function())}}class _{constructor(t,e,i,s){this.game=t,this.data=e,this.hero=i,this.collision=s,this.event_timers={},this.on_event=!1,this.walking_on_pillars_tiles=new Set,this.triggered_events={}}set_triggered_event(t){this.triggered_events[t.id]=t}unset_triggered_event(t){delete this.triggered_events[t.id]}event_triggered(t){return t.id in this.triggered_events}fire_triggered_events(){Object.keys(this.triggered_events).forEach(t=>{const e=this.triggered_events[t];e.type===n.event_types.SPEED?e.unset():e.fire()})}fire_event(t,e){this.hero.current_direction===e&&(t.type!==n.event_types.CLIMB||this.hero.idle_climbing?[n.event_types.TELEPORT,n.event_types.JUMP,n.event_types.SLIDER].includes(t.type)&&t.fire():t.fire(e))}check_tile_events(t,e){let i=new a;for(let a=0;a<e.events[t].length;++a){const o=e.events[t][a];if(o.activation_collision_layers.includes(e.collision_layer)&&(o.type===n.event_types.JUMP&&o.jump_near_collision(),o.is_active(this.hero.current_direction)))if(o.type===n.event_types.SPEED)this.hero.extra_speed!==o.speed&&i.add(o,this.hero.current_direction,o.fire.bind(o),!0);else if(o.type!==n.event_types.TELEPORT||o.advance_effect)if([n.event_types.STEP,n.event_types.COLLISION].includes(o.type)&&!this.event_triggered(o))i.add(o,this.hero.current_direction,o.set.bind(o));else{if(o.activation_directions.includes(this.hero.current_direction)&&[s.base_actions.WALK,s.base_actions.DASH,s.base_actions.CLIMB].includes(this.hero.current_action)){if(this.event_timers[o.id]&&!this.event_timers[o.id].timer.expired)continue;i.add(o,this.hero.current_direction,()=>{this.event_timers[o.id]=this.game.time.events.add(_.EVENT_INIT_DELAY,this.fire_event.bind(this,o,this.hero.current_direction))})}}else i.add(o,this.hero.current_direction,this.fire_event.bind(this,o,this.hero.current_direction))}i.process_queue()}}e.TileEventManager=_,_.EVENT_INIT_DELAY=350},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GameEventManager=e.interaction_patterns=void 0;const s=i(0),n=i(23),a=i(24);var _;!function(t){t.TIK_TAK_TOE="tik_tak_toe",t.CROSS="cross"}(_=e.interaction_patterns||(e.interaction_patterns={}));class o{constructor(t,e){this.game=t,this.data=e,this.on_event=!1,this.control_enable=!0,this.fire_next_step=()=>{},this.set_controls()}set_controls(){let t=[{key:this.data.gamepad.A,on_down:()=>{this.data.hero.in_action()||this.data.in_battle||!this.control_enable||(this.on_event?(this.control_enable=!1,this.fire_next_step()):this.search_for_npc())}}];this.data.control_manager.set_control(t,{persist:!0})}search_for_npc(){for(let t=0;t<this.data.map.npcs.length;++t){const e=this.data.map.npcs[t];if(e.npc_type===a.npc_types.SPRITE)continue;if(s.is_close(this.data.hero.current_direction,this.data.hero.sprite.x,this.data.hero.sprite.y,e.sprite.x,e.sprite.y,e.talk_range_factor)){this.data.hero.stop_char(),this.on_event=!0,this.data.force_stop_movement=!0,this.control_enable=!1,this.set_npc_event(e);break}}}set_npc_event(t){t.npc_type===a.npc_types.NORMAL?t.message?this.manage_npc_dialog(t):this.fire_npc_events(t):t.npc_type===a.npc_types.SHOP&&(this.data.shop_open||(this.set_npc_and_hero_directions(t),this.data.shop_menu.open_menu(t.shop_key,()=>{this.on_event=!1,this.reset_npc_direction(t),this.data.force_stop_movement=!1,this.control_enable=!0})))}set_npc_and_hero_directions(t){const e=t.sprite.x,i=t.sprite.y,n=this.data.dbs.npc_db[t.key_name].interaction_pattern,a=o.get_interaction_directions(this.data.hero.sprite.x,this.data.hero.sprite.y,e,i,n,t.body_radius);this.data.hero.set_direction(a.hero_direction),this.data.hero.play(s.base_actions.IDLE,s.reverse_directions[a.hero_direction]),t.play(s.base_actions.IDLE,s.reverse_directions[a.target_direction])}reset_npc_direction(t){const e=this.data.dbs.npc_db[t.key_name].initial_action,i=this.data.dbs.npc_db[t.key_name].actions[e].initial_direction;t.play(e,i)}manage_npc_dialog(t){const e=new n.DialogManager(this.game,this.data);e.set_dialog(t.message,t.avatar,this.data.hero.current_direction),this.set_npc_and_hero_directions(t),this.fire_next_step=e.next.bind(e,e=>{e&&(this.on_event=!1,this.data.force_stop_movement=!1,this.reset_npc_direction(t),this.fire_npc_events(t)),this.control_enable=!0}),this.fire_next_step()}fire_npc_events(t){t.events.forEach(t=>{t.fire()})}static get_interaction_directions(t,e,i,n,a,o){let r,h;if(a===_.CROSS){let a=t+(-n-i),_=-t+(-n+i);-e>=a&&-e>=_?r=s.directions.up:-e<=a&&-e>=_?r=s.directions.right:-e<=a&&-e<=_?r=s.directions.down:-e>=a&&-e<=_&&(r=s.directions.left)}return t<=i-o&&e>=n+o?(h=s.directions.up_right,r=a===_.TIK_TAK_TOE?s.directions.down_left:r):t<=i-o&&e>=n-o&&e<=n+o?(h=s.directions.right,r=a===_.TIK_TAK_TOE?s.directions.left:r):t<=i-o&&e<=n-o?(h=s.directions.down_right,r=a===_.TIK_TAK_TOE?s.directions.up_left:r):t>=i-o&&t<=i+o&&e<=n-o?(h=s.directions.down,r=a===_.TIK_TAK_TOE?s.directions.up:r):t>=i+o&&e<=n-o?(h=s.directions.down_left,r=a===_.TIK_TAK_TOE?s.directions.up_right:r):t>=i+o&&e>=n-o&&e<=n+o?(h=s.directions.left,r=a===_.TIK_TAK_TOE?s.directions.right:r):t>=i+o&&e>=n+o?(h=s.directions.up_left,r=a===_.TIK_TAK_TOE?s.directions.down_right:r):t>=i-o&&t<=i+o&&e>=n+o&&(h=s.directions.up,r=a===_.TIK_TAK_TOE?s.directions.down:r),{hero_direction:h,target_direction:r}}}e.GameEventManager=o},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleEvent=void 0;const s=i(17),n=i(19);class a extends n.GameEvent{constructor(t,e,i,s){super(t,e,n.event_types.BATTLE),this.background_key=i,this.enemy_party_key=s}fire(){this.data.hero.stop_char(!0),this.battle=new s.Battle(this.game,this.data,this.background_key,this.enemy_party_key),this.battle.start_battle()}}e.BattleEvent=a},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function _(t){try{r(s.next(t))}catch(t){a(t)}}function o(t){try{r(s.throw(t))}catch(t){a(t)}}function r(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(_,o)}r((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.BattleLog=void 0;const n=i(1),a=i(13),_=i(9),o=i(0),r=i(5);e.BattleLog=class{constructor(t){this.game=t,this.x=t.camera.x,this.y=t.camera.y,this.logs=[],this.logs.push(this.create(this.y+139)),this.logs.push(this.create(this.y+151))}create(t){const e=this.game.add.bitmapText(this.x+3,t,"gs-bmp-font","",n.FONT_SIZE);return e.tint=n.DEFAULT_FONT_COLOR,e.smoothed=!1,e.autoRound=!0,e}add(t){let e;const i=new Promise(t=>{e=t});return""===this.logs[0].text?(this.logs[0].setText(t),this.logs[1].setText(""),e()):""===this.logs[1].text?(this.logs[1].setText(t),e()):(this.game.add.tween(this.logs[0]).to({y:this.y+127},50,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.logs[1]).to({y:this.y+139},50,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.logs[0].y=this.y+151,this.logs[0].setText(t),this.logs.reverse(),e()})),i}add_ability(t,e,i,n,_=!1){return s(this,void 0,void 0,(function*(){switch(_?a.ability_msg_types.USE:e.msg_type){case a.ability_msg_types.ATTACK:yield this.add(t.name+" attacks!");break;case a.ability_msg_types.CAST:yield this.add(`${t.name} casts ${e.name}!`);break;case a.ability_msg_types.UNLEASH:yield this.add(`${t.name} unleashes ${e.name}!`);break;case a.ability_msg_types.SUMMON:yield this.add(`${t.name} summons ${e.name}!`);break;case a.ability_msg_types.USE:yield this.add(`${t.name} uses ${i||e.name}!`);break;case a.ability_msg_types.DEFEND:yield this.add(t.name+" is defending!");break;case a.ability_msg_types.ITEM_UNLEASH:yield this.add(`${t.name}'s ${i}`),yield this.add(`lets out a howl! ${e.name}!`);break;case a.ability_msg_types.SET_DJINN:yield this.add(`${n} is set to ${t.name}!`)}}))}add_recover_effect(t){return s(this,void 0,void 0,(function*(){const e=t.char;switch(t.type){case _.effect_types.MAX_HP:case _.effect_types.MAX_PP:case _.effect_types.ATTACK:case _.effect_types.DEFENSE:case _.effect_types.AGILITY:case _.effect_types.LUCK:yield this.add(`${e.name}'s ${_.effect_names[t.type]} returns to normal!`);break;case _.effect_types.POWER:case _.effect_types.RESIST:yield this.add(`${e.name}'s ${o.element_names[t.attribute]} ${_.effect_names[t.type]} returns to normal!`);break;case _.effect_types.TEMPORARY_STATUS:case _.effect_types.PERMANENT_STATUS:yield this.add(r.on_remove_status_msg[t.status_key_name](e))}}))}add_damage(t,e,i=!1){return s(this,void 0,void 0,(function*(){const s=i?"PP":"HP",n=i?r.main_stats.CURRENT_PP:r.main_stats.CURRENT_HP,a=i?r.main_stats.MAX_PP:r.main_stats.MAX_HP;t>=0?(e[n]-t<0&&(t=e[n]),yield this.add(`${e.name} takes ${t.toString()} damage!`)):e[n]>=e[a]?yield this.add(`${e.name}'s ${s} is fully restored`):yield this.add(`${e.name} recovers ${Math.abs(t).toString()} ${s}!`)}))}clear(){this.logs[0].setText(""),this.logs[1].setText("")}destroy(){this.logs[0].destroy(),this.logs[1].destroy()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainBattleMenu=void 0;const s=i(26),n=i(0),a=i(1),_=i(7),o=i(48),r=i(49),h=i(50),c=i(52),l=i(53),d=i(17),u=i(5),p=i(3),m=i(18),g=i(55),y=i(13);e.MainBattleMenu=class{constructor(t,e,i,_){this.game=t,this.data=e,this.on_abilities_choose=i,this.choose_targets=_,this.start_buttons_keys=["fight","flee","status"],this.start_horizontal_menu=new m.HorizontalMenu(this.game,this.data,this.start_buttons_keys,this.start_buttons_keys.map(t=>n.capitalize(t)),{on_press:this.start_button_press.bind(this)},76,!0),this.inner_buttons_keys=["attack","psynergy","djinni","summon","item","defend"],this.inner_horizontal_menu=new m.HorizontalMenu(this.game,this.data,this.inner_buttons_keys,this.inner_buttons_keys.map(t=>n.capitalize(t)),{on_press:this.inner_button_press.bind(this),on_cancel:this.inner_menu_cancel.bind(this)},60,!0),this.chars_status_window=new s.CharsStatusWindow(this.game,this.data,!0,!0),this.description_window=new o.BattleDescriptionWindow(this.game),this.djinn_window=new h.BattleDjinnWindow(this.game,this.data),this.psynergy_window=new r.BattlePsynergyWindow(this.game,this.data),this.item_window=new c.BattleItemWindow(this.game,this.data),this.summon_window=new l.BattleSummonWindow(this.game,this.data),this.status_window=new g.BattleStatusWindow(this.game,this.data),this.group=this.game.add.group(),this.avatar_sprite=this.group.create(0,a.GAME_HEIGHT-a.AVATAR_SIZE),this.avatar_sprite.alpha=0}start_button_press(){switch(this.start_buttons_keys[this.start_horizontal_menu.selected_button_index]){case"fight":this.start_horizontal_menu.close(()=>{this.current_buttons=this.inner_buttons_keys,this.abilities={},this.data.info.party_data.members.slice(0,d.Battle.MAX_CHARS_IN_BATTLE).forEach(t=>{this.abilities[t.key_name]=[]}),this.djinni_already_used=n.ordered_elements.reduce((t,e)=>(t[e]=0,t),{}),this.inner_horizontal_menu.open();let t=this.data.info.party_data.members[this.current_char_index];for(;t.is_paralyzed()||t.has_permanent_status(u.permanent_status.DOWNED);)if(this.abilities[this.data.info.party_data.members[this.current_char_index].key_name].push({key_name:"",targets:[]}),++this.current_char_index,t=this.data.info.party_data.members[this.current_char_index],this.current_char_index>=d.Battle.MAX_CHARS_IN_BATTLE||this.current_char_index>=this.data.info.party_data.members.length){this.current_char_index=0,this.on_abilities_choose(this.abilities);break}this.set_avatar()});break;case"status":this.start_horizontal_menu.close(()=>{this.status_window.open(this.data.info.party_data.members[0],()=>{this.start_horizontal_menu.open()})})}}inner_button_press(){switch(this.current_buttons[this.inner_horizontal_menu.selected_button_index]){case"attack":this.inner_horizontal_menu.deactivate(!0),this.choose_targets("attack","attack",t=>{t?(this.abilities[this.data.info.party_data.members[this.current_char_index].key_name].push({key_name:"attack",targets:t}),this.inner_horizontal_menu.activate(),this.change_char(1)):this.inner_horizontal_menu.activate()},this.data.info.party_data.members[this.current_char_index]);break;case"psynergy":this.on_ability_choose(this.psynergy_window,!1,"psynergy");break;case"djinni":this.on_ability_choose(this.djinn_window,!0,"djinni",this.psynergy_window);break;case"summon":this.on_ability_choose(this.summon_window,!0,"summon",this.djinni_already_used);break;case"item":this.on_ability_choose(this.item_window,!1,"item");break;case"defend":this.inner_horizontal_menu.deactivate(!0),this.choose_targets("defend","defend",t=>{t?(this.abilities[this.data.info.party_data.members[this.current_char_index].key_name].push({key_name:"defend",targets:t}),this.inner_horizontal_menu.activate(),this.change_char(1)):this.inner_horizontal_menu.activate()},this.data.info.party_data.members[this.current_char_index])}}on_ability_choose(t,e,i,...s){this.inner_horizontal_menu.deactivate(!0),this.description_window.open(e),t.open(this.data.info.party_data.members[this.current_char_index],(e,s)=>{if(e){let n,a=null;if("djinni"===i&&this.data.info.djinni_list[e].status===_.djinn_status.STANDBY)n=e,e="set_djinn";else if("summon"===i){const t=this.data.info.summons_list[e].requirements;a=p.mapValues(this.djinni_already_used,(e,i)=>e+t[i]),this.djinni_already_used=a}this.description_window.hide(),this.choose_targets(e,i,i=>{i?(this.abilities[this.data.info.party_data.members[this.current_char_index].key_name].push({key_name:e,targets:i,djinn_key_name:n,item_slot:s}),t.close(),this.description_window.close(),this.inner_horizontal_menu.activate(),this.change_char(1)):(a&&(this.djinni_already_used=p.mapValues(this.djinni_already_used,(t,e)=>t-a[e])),this.description_window.show(),t.show())},this.data.info.party_data.members[this.current_char_index],s)}else t.window_open&&t.close(),this.description_window.close(),this.inner_horizontal_menu.activate()},this.description_window.set_description.bind(this.description_window),...s)}change_char(t,e=!1){const i=this.data.info.party_data.members[this.current_char_index],s=this.abilities[i.key_name].length;if(i.turns!==s&&s||(this.current_char_index+=t),this.current_char_index>=d.Battle.MAX_CHARS_IN_BATTLE||this.current_char_index>=this.data.info.party_data.members.length)this.current_char_index=0,this.on_abilities_choose(this.abilities);else if(this.current_char_index>=0){const i=this.data.info.party_data.members[this.current_char_index];if(e){const t=this.abilities[i.key_name].pop();if(this.data.info.abilities_list[t.key_name].ability_category===y.ability_categories.SUMMON){const e=this.data.info.summons_list[t.key_name].requirements;this.djinni_already_used=p.mapValues(this.djinni_already_used,(t,i)=>t-e[i])}}i.is_paralyzed()||i.has_permanent_status(u.permanent_status.DOWNED)?this.change_char(t,e):(this.set_avatar(),this.inner_horizontal_menu.close(void 0,!1),this.inner_horizontal_menu.open())}else this.current_char_index=0,this.inner_menu_cancel()}set_avatar(){this.avatar_sprite.alpha=1,this.avatar_sprite.loadTexture("avatars",this.data.info.party_data.members[this.current_char_index].key_name)}hide_avatar(){this.avatar_sprite.alpha=0}inner_menu_cancel(){const t=this.data.info.party_data.members[this.current_char_index].key_name;this.current_char_index>0||1===this.abilities[t].length?this.change_char(-1,!0):(this.inner_horizontal_menu.close(),this.hide_avatar(),this.start_horizontal_menu.open())}update_position(){this.chars_status_window.update_position(!0),this.start_horizontal_menu.update_position(),this.inner_horizontal_menu.update_position(),this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}is_active(){return this.start_horizontal_menu.menu_active||this.inner_horizontal_menu.menu_active}open_menu(){this.current_char_index=0,this.start_horizontal_menu.open(),this.update_position(),this.chars_status_window.update_chars_info(),this.chars_status_window.show()}close_menu(){this.is_active()&&(this.hide_avatar(),this.start_horizontal_menu.close(),this.inner_horizontal_menu.close())}destroy_menu(){this.chars_status_window.destroy(),this.inner_horizontal_menu.destroy(),this.start_horizontal_menu.destroy(),this.description_window.destroy(),this.djinn_window.destroy(),this.psynergy_window.destroy(),this.item_window.destroy(),this.summon_window.destroy(),this.group.destroy()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleDescriptionWindow=void 0;const s=i(2);e.BattleDescriptionWindow=class{constructor(t){this.game=t,this.base_window=new s.Window(this.game,0,40,236,28),this.description=this.base_window.set_text_in_position("",8,12)}update_position(t){t?this.base_window.update_position({y:32}):this.base_window.update_position({y:40})}set_description(t){this.base_window.update_text(t,this.description)}open(t=!1){this.is_open=!0,this.update_position(t),this.base_window.show(void 0,!1)}show(){this.base_window.show(void 0,!1)}hide(){this.base_window.close(void 0,!1)}close(){this.is_open=!1,this.base_window.close(void 0,!1)}destroy(){this.base_window.destroy(!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattlePsynergyWindow=void 0;const s=i(2),n=i(1),a=i(5),_=i(4),o=i(11),r=n.YELLOW_FONT_COLOR,h=n.RED_FONT_COLOR,c=90+n.FONT_SIZE;e.BattlePsynergyWindow=class{constructor(t,e){this.game=t,this.data=e,this.window_open=!1,this.window_active=!1,this.text_sprites_in_window=[],this.icon_sprites_in_window=[],this.misc_sprites_in_window=[],this.base_window=new s.Window(this.game,72,72,164,84),this.group=this.game.add.group(),this.group.alpha=0,this.button=this.group.create(48,136,"buttons","psynergy"),this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.highlight_bar.alpha=0,this.base_window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.base_window.color,1),this.highlight_bar.drawRect(8,0,152,8),this.highlight_bar.endFill()}select_ability(t){this.ability_index=t;let e=83+16*this.ability_index,i={type:_.CursorManager.CursorTweens.POINT,variant:_.PointVariants.NORMAL};this.data.cursor_manager.move_to({x:66,y:e},{animate:!1,tween_config:i}),this.change_ability()}next_ability(){1!==this.abilities.length&&this.select_ability((this.ability_index+1)%this.abilities.length)}previous_ability(){1!==this.abilities.length&&this.select_ability((this.ability_index+this.abilities.length-1)%this.abilities.length)}next_page(){1!==this.page_number&&(this.page_index=(this.page_index+1)%this.page_number,this.change_page())}previous_page(){1!==this.page_number&&(this.page_index=(this.page_index+this.page_number-1)%this.page_number,this.change_page())}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}set_page_number(){const t=this.all_abilities.length;this.page_number=1+((t-1)/5|0),this.page_index>=this.page_number&&(this.page_index=this.page_number-1),this.base_window.page_indicator.initialize(this.page_number,this.page_index,o.PageIndicatorModes.FLASH)}change_page(){this.set_abilities_list(),this.ability_index>=this.abilities.length&&(this.ability_index=this.abilities.length-1,this.select_ability(this.ability_index)),this.set_description&&this.set_description(this.data.info.abilities_list[this.abilities[this.ability_index]].description),this.set_highlight_bar(),this.base_window.page_indicator.select_page(this.page_index)}change_ability(){this.set_description&&this.set_description(this.data.info.abilities_list[this.abilities[this.ability_index]].description),this.set_highlight_bar()}change_djinni(t){this.djinni=[t],this.clear_sprites(),this.base_window.page_indicator.terminante(),this.mount_window(),this.set_highlight_bar()}set_highlight_bar(){this.highlight_bar.y=5+this.ability_index*(n.ICON_HEIGHT+2)+4}set_abilities_list(){this.clear_sprites(!1),this.abilities=this.all_abilities.slice(5*this.page_index,5*(this.page_index+1));for(let t=0;t<this.abilities.length;++t){const e=this.abilities[t],i=10,s=5+t*(n.ICON_HEIGHT+2),a=i+(n.ICON_WIDTH>>1),_=s+(n.ICON_HEIGHT>>1),o=10+n.ICON_WIDTH+2;let c=n.DEFAULT_FONT_COLOR;this.psy_sealed?c=n.PURPLE_FONT_COLOR:this.char.current_pp<this.data.info.abilities_list[e].pp_cost&&(c=n.RED_FONT_COLOR);const l=this.base_window.set_text_in_position(this.data.info.abilities_list[e].name,o,s+4,!1,!1,c);this.text_sprites_in_window.push(l);const d=this.base_window.set_text_in_position("PP",96,s+4,!1,!1,c);this.text_sprites_in_window.push(d),this.icon_sprites_in_window.push(this.base_window.create_at_group(a,_,"abilities_icons",void 0,e)),this.icon_sprites_in_window[t].anchor.setTo(.5,.5),this.misc_sprites_in_window.push(this.base_window.create_at_group(129,s+5,this.data.info.abilities_list[e].element+"_star")),this.misc_sprites_in_window.push(this.base_window.create_at_group(137,s+4,"ranges",void 0,this.data.info.abilities_list[e].range.toString()));const u=this.base_window.set_text_in_position(this.data.info.abilities_list[e].pp_cost,126,s+4,!0,!1,c);this.text_sprites_in_window.push(u),this.expanded&&(this.gained_abilities.includes(e)?(this.base_window.update_text_color(r,l),this.base_window.update_text_color(r,u),this.base_window.update_text_color(r,d)):this.lost_abilities.includes(e)&&(this.base_window.update_text_color(h,l),this.base_window.update_text_color(h,u),this.base_window.update_text_color(h,d)))}}set_abilities(){if(this.current_abilities=this.char.abilities.filter(t=>t in this.data.info.abilities_list&&this.data.info.abilities_list[t].is_battle_ability),this.all_abilities=this.current_abilities,this.expanded){const t=this.char.preview_djinn_change([],this.djinni.map(t=>t.key_name),this.next_djinni_status);this.next_abilities=t.abilities.filter(t=>t in this.data.info.abilities_list&&this.data.info.abilities_list[t].is_battle_ability);let e=new Set(this.current_abilities),i=new Set(this.next_abilities);this.gained_abilities=[...i].filter(t=>!e.has(t)),this.lost_abilities=[...e].filter(t=>!i.has(t)),this.intersection_abilities=[...e].filter(t=>i.has(t)),this.all_abilities=this.gained_abilities.concat(this.intersection_abilities,this.lost_abilities),this.psy_info_1_text=this.base_window.set_text_in_position("",40,89),this.psy_info_2_text=this.base_window.set_text_in_position("",40,c),0===this.gained_abilities.length&&0===this.lost_abilities.length?(this.base_window.update_text("* No change",this.psy_info_1_text),this.base_window.update_text_color(n.DEFAULT_FONT_COLOR,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):this.gained_abilities.length&&0===this.lost_abilities.length?(this.base_window.update_text("* Psynergy Gained",this.psy_info_1_text),this.base_window.update_text_color(r,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):0===this.gained_abilities.length&&this.lost_abilities.length?(this.base_window.update_text("* Psynergy Lost",this.psy_info_1_text),this.base_window.update_text_color(h,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):this.gained_abilities.length&&this.lost_abilities.length&&(this.base_window.update_text("* Psynergy Gained",this.psy_info_1_text),this.base_window.update_text_color(r,this.psy_info_1_text),this.base_window.update_text("* Psynergy Lost",this.psy_info_2_text),this.base_window.update_text_color(h,this.psy_info_2_text))}}mount_window(){this.set_abilities(),this.set_abilities_list(),this.set_page_number(),this.expanded?(this.base_window.update_size({height:108}),this.base_window.update_position({x:0,y:40})):(this.base_window.update_size({height:84}),this.base_window.update_position({x:72,y:72}))}clear_sprites(t=!0){for(let t=0;t<this.icon_sprites_in_window.length;++t)this.base_window.remove_from_group(this.icon_sprites_in_window[t]);this.icon_sprites_in_window=[];for(let t=0;t<this.misc_sprites_in_window.length;++t)this.base_window.remove_from_group(this.misc_sprites_in_window[t]);this.misc_sprites_in_window=[];for(let t=0;t<this.text_sprites_in_window.length;++t)this.base_window.remove_text(this.text_sprites_in_window[t]);t&&(this.psy_info_1_text&&(this.base_window.remove_text(this.psy_info_1_text),this.psy_info_1_text=null),this.psy_info_2_text&&(this.base_window.remove_text(this.psy_info_2_text),this.psy_info_2_text=null)),this.text_sprites_in_window=[]}ability_choose(){let t=[{key:this.data.gamepad.LEFT,on_down:this.previous_page.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.next_page.bind(this)},{key:this.data.gamepad.UP,on_down:this.previous_ability.bind(this)},{key:this.data.gamepad.DOWN,on_down:this.next_ability.bind(this)},{key:this.data.gamepad.A,on_down:()=>{this.expanded||(this.choosen_ability=this.abilities[this.ability_index],this.hide(this.close_callback))}},{key:this.data.gamepad.B,on_down:()=>{this.expanded||(this.choosen_ability=null,this.close(this.close_callback))}}];this.data.control_manager.set_control(t,{loop_configs:{vertical:!0,horizontal:!0}})}open(t,e,i,s=!1,n=null,_=null){this.char=t,this.close_callback=e,this.set_description=i,this.expanded=s,this.djinni=[n],this.next_djinni_status=[_],this.psy_sealed=this.char.has_temporary_status(a.temporary_status.SEAL),this.choosen_ability=null,this.page_index=0,this.ability_index=0,this.group.alpha=1,this.update_position(),this.mount_window(),this.set_highlight_bar(),this.expanded?(this.button.alpha=0,this.highlight_bar.alpha=0):(this.select_ability(0),this.ability_choose(),this.button.alpha=1,this.highlight_bar.alpha=1),this.set_description&&this.set_description(this.data.info.abilities_list[this.abilities[this.ability_index]].description),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0},!1)}show(){this.group.alpha=1,this.highlight_bar.alpha=1,this.select_ability(this.ability_index),this.ability_choose(),this.base_window.show(()=>{this.window_active=!0},!1)}hide(t){this.group.alpha=0,this.highlight_bar.alpha=0,this.data.cursor_manager.hide(),this.base_window.close(()=>{this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}close(t){this.clear_sprites(),this.base_window.page_indicator.terminante(),this.group.alpha=0,this.highlight_bar.alpha=0,this.data.cursor_manager.hide(),this.data.control_manager.reset(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}destroy(){this.base_window.destroy(!1),this.group.destroy(),this.data.cursor_manager.hide(),this.data.control_manager.reset()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleDjinnWindow=void 0;const s=i(2),n=i(7),a=i(51),_=i(4),o=i(11);e.BattleDjinnWindow=class{constructor(t,e){this.game=t,this.data=e,this.base_window=new s.Window(this.game,160,72,76,84),this.stats_window=new a.DjinnStatsWindow(this.game,this.data),this.group=this.game.add.group(),this.group.alpha=0,this.button=this.group.create(140,136,"buttons","djinni"),this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.highlight_bar.alpha=0,this.base_window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.base_window.color,1),this.highlight_bar.drawRect(8,0,64,8),this.highlight_bar.endFill(),this.djinn_names=[],this.stars_sprites=[],this.open_psy_key=null}select_djinn(t){this.djinn_index=t;let e=84+16*this.djinn_index,i={type:_.CursorManager.CursorTweens.POINT,variant:_.PointVariants.NORMAL};this.data.cursor_manager.move_to({x:154,y:e},{animate:!1,tween_config:i}),this.change_djinn(),this.psynergy_window_open&&this.psynergy_window.change_djinni(this.data.info.djinni_list[this.djinni[this.djinn_index]])}next_djinn(){1!==this.djinni.length&&this.select_djinn((this.djinn_index+1)%this.djinni.length)}previous_djinn(){1!==this.djinni.length&&this.select_djinn((this.djinn_index+this.djinni.length-1)%this.djinni.length)}next_page(){1!==this.page_number&&(this.page_index=(this.page_index+1)%this.page_number,this.change_page())}previous_page(){1!==this.page_number&&(this.page_index=(this.page_index+this.page_number-1)%this.page_number,this.change_page())}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}call_set_description(){const t=this.data.info.djinni_list[this.djinni[this.djinn_index]];if(this.set_description)switch(t.status){case n.djinn_status.SET:this.set_description(t.description);break;case n.djinn_status.STANDBY:this.set_description("Ready to summon. Choose to set it again.");break;case n.djinn_status.RECOVERY:this.set_description("This Djinn is still recovering.")}}change_page(){this.config_page(),this.djinn_index>=this.djinni.length&&(this.djinn_index=this.djinni.length-1,this.select_djinn(this.djinn_index)),this.call_set_description(),this.set_highlight_bar(),this.base_window.page_indicator.select_page(this.page_index),this.update_stats()}change_djinn(){this.call_set_description(),this.set_highlight_bar(),this.update_stats()}set_highlight_bar(){this.highlight_bar.y=8+16*this.djinn_index}config_page(){this.clear_sprites(),this.djinni=this.all_djinni.slice(5*this.page_index,5*(this.page_index+1));for(let t=0;t<this.djinni.length;++t){const e=this.data.info.djinni_list[this.djinni[t]],i=8+16*t,s=this.base_window.create_at_group(9,i+1,e.element+"_star");let a;switch(this.stars_sprites.push(s),e.status){case n.djinn_status.SET:a=n.djinn_font_colors[n.djinn_status.SET];break;case n.djinn_status.STANDBY:a=n.djinn_font_colors[n.djinn_status.STANDBY];break;case n.djinn_status.RECOVERY:a=n.djinn_font_colors[n.djinn_status.RECOVERY]}const _=this.base_window.set_text_in_position(e.name,17,i,!1,!1,a);if(this.djinn_names.push(_),e.status===n.djinn_status.RECOVERY){const t=this.base_window.set_text_in_position((e.recovery_turn+1).toString(),67,i,!0,!1,n.djinn_font_colors[n.djinn_status.RECOVERY]);this.djinn_names.push(t)}}}set_page_number(){const t=this.all_djinni.length;this.page_number=1+((t-1)/5|0),this.page_index>=this.page_number&&(this.page_index=this.page_number-1),this.base_window.page_indicator.initialize(this.page_number,this.page_index,o.PageIndicatorModes.FLASH)}get_next_status(){let t;switch(this.data.info.djinni_list[this.djinni[this.djinn_index]].status){case n.djinn_status.SET:t=n.djinn_status.STANDBY;break;case n.djinn_status.STANDBY:t=n.djinn_status.SET;break;case n.djinn_status.RECOVERY:t=n.djinn_status.RECOVERY}return t}update_stats(){const t=this.data.info.djinni_list[this.djinni[this.djinn_index]];this.stats_window.set_djinn(t,this.get_next_status())}mount_window(){this.all_djinni=this.char.djinni,this.set_page_number(),this.config_page(),this.update_stats()}clear_sprites(){this.stars_sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)}),this.djinn_names.forEach(t=>{this.base_window.remove_text(t)})}show_psynergy(){if(this.psynergy_window_open)return;this.psynergy_window.open(this.char,void 0,void 0,!0,this.data.info.djinni_list[this.djinni[this.djinn_index]],this.get_next_status()),this.psynergy_window_open=!0;let t=[{key:this.data.gamepad.LEFT,on_down:this.psynergy_window.previous_page.bind(this.psynergy_window)},{key:this.data.gamepad.RIGHT,on_down:this.psynergy_window.next_page.bind(this.psynergy_window)},{key:this.data.gamepad.UP,on_down:this.previous_djinn.bind(this)},{key:this.data.gamepad.DOWN,on_down:this.next_djinn.bind(this)}];this.data.control_manager.set_control(t,{loop_configs:{vertical:!0,horizontal:!0}})}hide_psynergy(){this.psynergy_window_open&&(this.psynergy_window.close(),this.psynergy_window_open=!1,this.select_djinn(this.djinn_index),this.djinn_choose())}djinn_choose(){let t=[{key:this.data.gamepad.LEFT,on_down:this.previous_page.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.next_page.bind(this)},{key:this.data.gamepad.UP,on_down:this.previous_djinn.bind(this)},{key:this.data.gamepad.DOWN,on_down:this.next_djinn.bind(this)},{key:this.data.gamepad.A,on_down:()=>{const t=this.data.info.djinni_list[this.djinni[this.djinn_index]];t.status!==n.djinn_status.RECOVERY&&(this.choosen_ability=t.ability_key_name,this.hide(this.close_callback))}},{key:this.data.gamepad.B,on_down:()=>{this.choosen_ability=null,this.close(this.close_callback)}}];if(this.data.control_manager.set_control(t,{loop_configs:{vertical:!0,horizontal:!0}}),!this.open_psy_key){let t=[{key:this.data.gamepad.R,on_down:this.show_psynergy.bind(this),on_up:this.hide_psynergy.bind(this)}];this.open_psy_key=this.data.control_manager.set_control(t,{persist:!0,no_reset:!0})}}open(t,e,i,s){this.char=t,this.close_callback=e,this.set_description=i,this.psynergy_window=s,this.psynergy_window_open=!1,this.group.alpha=1,this.djinn_index=0,this.page_index=0,this.choosen_ability=null,this.highlight_bar.alpha=1,this.stats_window.open(this.char),this.update_position(),this.set_highlight_bar(),this.mount_window(),this.select_djinn(0),this.djinn_choose(),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0},!1)}show(){this.group.alpha=1,this.highlight_bar.alpha=1,this.select_djinn(this.djinn_index),this.stats_window.open(this.char),this.update_stats(),this.djinn_choose(),this.base_window.show(()=>{this.window_active=!0},!1)}hide(t){this.group.alpha=0,this.highlight_bar.alpha=0,this.stats_window.close(),this.data.cursor_manager.hide(),this.data.control_manager.detach_bindings(this.open_psy_key),this.open_psy_key=null,this.base_window.close(()=>{this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}close(t){this.clear_sprites(),this.base_window.page_indicator.terminante(),this.group.alpha=0,this.highlight_bar.alpha=0,this.data.cursor_manager.hide(),this.data.control_manager.reset(),this.data.control_manager.detach_bindings(this.open_psy_key),this.open_psy_key=null,this.stats_window.close(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}destroy(){this.base_window.destroy(!1),this.stats_window.destroy(),this.group.destroy(),this.data.cursor_manager.hide(),this.data.control_manager.reset()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DjinnStatsWindow=void 0;const s=i(2),n=i(1),a=i(5);e.DjinnStatsWindow=class{constructor(t,e){this.game=t,this.data=e,this.base_window=new s.Window(this.game,0,64,156,84);const i=["HP","PP","Attack","Defense","Agility","Luck"];this.before_stats={},this.after_stats={},this.up_arrows={},this.down_arrows={};for(let t=0;t<a.ordered_main_stats.length;++t)this.base_window.set_text_in_position(i[t],8,16+t*n.FONT_SIZE),this.before_stats[a.ordered_main_stats[t]]=this.base_window.set_text_in_position("",78,16+t*n.FONT_SIZE,!0),this.after_stats[a.ordered_main_stats[t]]=this.base_window.set_text_in_position("",126,16+t*n.FONT_SIZE,!0),this.up_arrows[a.ordered_main_stats[t]]=this.base_window.create_at_group(80,15+t*n.FONT_SIZE,"stat_up"),this.down_arrows[a.ordered_main_stats[t]]=this.base_window.create_at_group(80,15+t*n.FONT_SIZE,"stat_down");this.hide_arrows(),this.before_class_text=this.base_window.set_text_in_position("",8,8),this.after_class_text=this.base_window.set_text_in_position("",88,8),this.base_window.create_at_group(80,16,"arrow_change").rotation=-n.degree90,this.base_window.create_at_group(33,73,"shift_keyboard",0),this.base_window.create_at_group(32,72,"shift_keyboard"),this.base_window.set_text_in_position(": Psy. Gained",55,72),this.window_open=!1}hide_arrows(){for(let t=0;t<a.ordered_main_stats.length;++t)this.down_arrows[a.ordered_main_stats[t]].alpha=0,this.up_arrows[a.ordered_main_stats[t]].alpha=0}set_stats(){this.base_window.update_text(this.char.class.name,this.before_class_text);const t=this.char.preview_djinn_change(a.ordered_main_stats,[this.djinn.key_name],[this.next_djinni_status]);this.base_window.update_text(t.class_name,this.after_class_text);for(let e=0;e<a.ordered_main_stats.length;++e){const i=a.ordered_main_stats[e],s=this.char[i],n=t[i];this.base_window.update_text(s.toString(),this.before_stats[i]),this.base_window.update_text(n.toString(),this.after_stats[i]),s>n?this.down_arrows[i].alpha=1:s<n&&(this.up_arrows[i].alpha=1)}}set_djinn(t,e){this.djinn=t,this.next_djinni_status=e,this.hide_arrows(),this.set_stats()}open(t){this.char=t,this.djinn=null,this.next_djinni_status=null,this.hide_arrows(),this.base_window.show(()=>{this.window_open=!0},!1)}close(){this.base_window.close(()=>{this.window_open=!1},!1)}destroy(){this.base_window.destroy(!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleItemWindow=void 0;const s=i(2),n=i(1),a=i(8),_=i(3),o=i(4),r=i(11);e.BattleItemWindow=class{constructor(t,e){this.game=t,this.data=e,this.base_window=new s.Window(this.game,120,72,116,84),this.group=this.game.add.group(),this.group.alpha=0,this.button=this.group.create(96,136,"buttons","item"),this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.highlight_bar.alpha=0,this.base_window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.base_window.color,1),this.highlight_bar.drawRect(8,0,104,8),this.highlight_bar.endFill(),this.item_names=[],this.other_sprites=[]}select_item(t){this.item_index=t;let e=84+16*this.item_index,i={type:o.CursorManager.CursorTweens.POINT,variant:o.PointVariants.NORMAL};this.data.cursor_manager.move_to({x:116,y:e},{animate:!1,tween_config:i}),this.change_item()}next_item(){1!==this.items.length&&this.select_item((this.item_index+1)%this.items.length)}previous_item(){1!==this.items.length&&this.select_item((this.item_index+this.items.length-1)%this.items.length)}next_page(){1!==this.page_number&&(this.page_index=(this.page_index+1)%this.page_number,this.change_page())}previous_page(){1!==this.page_number&&(this.page_index=(this.page_index+this.page_number-1)%this.page_number,this.change_page())}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}change_page(){this.config_page(),this.item_index>=this.items.length&&(this.item_index=this.items.length-1,this.select_item(this.item_index)),this.set_description&&this.set_description(this.data.info.items_list[this.items[this.item_index].key_name].description),this.set_highlight_bar(),this.base_window.page_indicator.select_page(this.page_index)}change_item(){this.set_description&&this.set_description(this.data.info.items_list[this.items[this.item_index].key_name].description),this.set_highlight_bar()}set_highlight_bar(){this.highlight_bar.y=8+16*this.item_index}config_page(){this.clear_sprites(),this.items=this.all_items.slice(5*this.page_index,5*(this.page_index+1));for(let t=0;t<this.items.length;++t){const e=this.data.info.items_list[this.items[t].key_name],i=8+16*t,s=i-4;if(this.other_sprites.push(this.base_window.create_at_group(8,s,"items_icons",void 0,this.items[t].key_name)),this.items[t].equipped&&this.other_sprites.push(this.base_window.create_at_group(15,s+8,"equipped")),this.items[t].quantity>1){let e=this.game.add.bitmapText(15,s+8,"gs-item-bmp-font",this.items[t].quantity.toString());this.base_window.add_sprite_to_group(e),this.other_sprites.push(e)}let _=n.DEFAULT_FONT_COLOR;e.use_type!==a.use_types.NO_USE&&this.data.info.abilities_list[e.use_ability].is_battle_ability||(_=n.YELLOW_FONT_COLOR);const o=this.base_window.set_text_in_position(e.name,26,i,!1,!1,_);this.item_names.push(o)}}set_page_number(){const t=this.all_items.length;this.page_number=1+((t-1)/5|0),this.page_index>=this.page_number&&(this.page_index=this.page_number-1),this.base_window.page_indicator.initialize(this.page_number,this.page_index,r.PageIndicatorModes.FLASH)}mount_window(){this.all_items=this.char.items,this.all_items=_.sortBy(this.all_items,[t=>this.data.info.items_list[t.key_name].use_type===a.use_types.NO_USE||!this.data.info.abilities_list[this.data.info.items_list[t.key_name].use_ability].is_battle_ability]),this.set_page_number(),this.config_page()}clear_sprites(){this.item_names.forEach(t=>{this.base_window.remove_text(t)}),this.other_sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)})}item_choose(){let t=[{key:this.data.gamepad.LEFT,on_down:this.previous_page.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.next_page.bind(this)},{key:this.data.gamepad.UP,on_down:this.previous_item.bind(this)},{key:this.data.gamepad.DOWN,on_down:this.next_item.bind(this)},{key:this.data.gamepad.A,on_down:()=>{const t=this.data.info.items_list[this.items[this.item_index].key_name];t.use_type!==a.use_types.NO_USE&&this.data.info.abilities_list[t.use_ability].is_battle_ability&&(this.choosen_ability=t.use_ability,this.item_obj=this.items[this.item_index],this.hide(this.close_callback))}},{key:this.data.gamepad.B,on_down:()=>{this.choosen_ability=null,this.item_obj=null,this.close(this.close_callback)}}];this.data.control_manager.set_control(t,{loop_configs:{vertical:!0,horizontal:!0}})}open(t,e,i,...s){this.char=t,this.close_callback=e,this.set_description=i,this.group.alpha=1,this.item_index=0,this.page_index=0,this.choosen_ability=null,this.highlight_bar.alpha=1,this.update_position(),this.set_highlight_bar(),this.mount_window(),this.select_item(0),this.item_choose(),this.set_description&&this.set_description(this.data.info.items_list[this.items[this.item_index].key_name].description),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0},!1)}show(){this.group.alpha=1,this.highlight_bar.alpha=1,this.select_item(this.item_index),this.item_choose(),this.base_window.show(()=>{this.window_active=!0},!1)}hide(t){this.group.alpha=0,this.highlight_bar.alpha=0,this.data.cursor_manager.hide(),this.base_window.close(()=>{this.window_active=!1,void 0!==t&&t(this.choosen_ability,this.item_obj)},!1)}close(t){this.clear_sprites(),this.base_window.page_indicator.terminante(),this.group.alpha=0,this.highlight_bar.alpha=0,this.data.cursor_manager.hide(),this.data.control_manager.reset(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_ability,this.item_obj)},!1)}destroy(){this.base_window.destroy(!1),this.group.destroy(),this.data.cursor_manager.hide(),this.data.control_manager.reset()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleSummonWindow=void 0;const s=i(2),n=i(1),a=i(7),_=i(54),o=i(17),r=i(12),h=i(3),c=i(4),l=i(11);e.BattleSummonWindow=class{constructor(t,e){this.game=t,this.data=e,this.base_window=new s.Window(this.game,104,88,132,68),this.djinn_numbers_window=new _.SummonDjinnStandbyWindow(t),this.group=this.game.add.group(),this.group.alpha=0,this.button=this.group.create(80,136,"buttons","summon"),this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.highlight_bar.alpha=0,this.base_window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.base_window.color,1),this.highlight_bar.drawRect(8,0,120,8),this.highlight_bar.endFill(),this.summon_names=[],this.other_sprites=[]}select_summon(t){this.summon_index=t;let e=100+16*this.summon_index,i={type:c.CursorManager.CursorTweens.POINT,variant:c.PointVariants.NORMAL};this.data.cursor_manager.move_to({x:98,y:e},{animate:!1,tween_config:i}),this.change_summon()}next_summon(){1!==this.summons.length&&this.select_summon((this.summon_index+1)%this.summons.length)}previous_summon(){1!==this.summons.length&&this.select_summon((this.summon_index+this.summons.length-1)%this.summons.length)}next_page(){1!==this.page_number&&(this.page_index=(this.page_index+1)%this.page_number,this.change_page())}previous_page(){1!==this.page_number&&(this.page_index=(this.page_index+this.page_number-1)%this.page_number,this.change_page())}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}change_page(){this.config_page(),this.summon_index>=this.summons.length&&(this.summon_index=this.summons.length-1,this.select_summon(this.summon_index)),this.set_description&&this.set_description(this.data.info.abilities_list[this.summons[this.summon_index].key_name].description),this.set_highlight_bar(),this.base_window.page_indicator.select_page(this.page_index),this.djinn_numbers_window.set_numbers(this.summons[this.summon_index].requirements)}change_summon(){this.set_description&&this.set_description(this.data.info.abilities_list[this.summons[this.summon_index].key_name].description),this.set_highlight_bar(),this.djinn_numbers_window.set_numbers(this.summons[this.summon_index].requirements)}set_highlight_bar(){this.highlight_bar.y=8+16*this.summon_index}config_page(){this.clear_sprites(),this.summons=this.all_summons.slice(4*this.page_index,4*(this.page_index+1));for(let t=0;t<this.summons.length;++t){const e=this.data.info.abilities_list[this.summons[t].key_name],i=8+16*t,s=i-3;this.other_sprites.push(this.base_window.create_at_group(10,s,"abilities_icons",void 0,this.summons[t].key_name));let a=n.DEFAULT_FONT_COLOR;this.summons[t].can_be_summoned||(a=n.RED_FONT_COLOR);const _=this.base_window.set_text_in_position(e.name,28,i,!1,!1,a);this.summon_names.push(_)}}set_page_number(){const t=this.all_summons.length;this.page_number=1+((t-1)/4|0),this.page_index>=this.page_number&&(this.page_index=this.page_number-1),this.base_window.page_indicator.initialize(this.page_number,this.page_index,l.PageIndicatorModes.FLASH)}mount_window(){const t=a.Djinn.get_standby_djinni(this.data.info.djinni_list,r.MainChar.get_active_players(this.data.info.party_data,o.Battle.MAX_CHARS_IN_BATTLE));for(let e in t)t[e]-=this.djinni_already_used[e];this.all_summons=h.flatMap(this.data.info.summons_list,e=>{if(!e.available)return[];const i=h.every(e.requirements,(e,i)=>e<=t[i]);return[Object.assign({},e,{can_be_summoned:i,index:i?-e.index:e.index})]}),this.all_summons=h.sortBy(this.all_summons,[t=>t.index]),this.set_page_number(),this.config_page()}clear_sprites(){this.summon_names.forEach(t=>{this.base_window.remove_text(t)}),this.other_sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)})}summon_choose(){let t=[{key:this.data.gamepad.LEFT,on_down:this.previous_page.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.next_page.bind(this)},{key:this.data.gamepad.UP,on_down:this.previous_summon.bind(this)},{key:this.data.gamepad.DOWN,on_down:this.next_summon.bind(this)},{key:this.data.gamepad.A,on_down:()=>{this.choosen_ability=this.summons[this.summon_index].key_name,this.hide(this.close_callback)}},{key:this.data.gamepad.B,on_down:()=>{this.choosen_ability=null,this.close(this.close_callback)}}];this.data.control_manager.set_control(t,{loop_configs:{vertical:!0,horizontal:!0}})}open(t,e,i,s){this.char=t,this.close_callback=e,this.set_description=i,this.djinni_already_used=s,this.summon_index=0,this.page_index=0,this.choosen_ability=null,this.highlight_bar.alpha=1,this.group.alpha=1,this.djinn_numbers_window.open(),this.update_position(),this.set_highlight_bar(),this.mount_window(),this.djinn_numbers_window.set_numbers(this.summons[this.summon_index].requirements),this.select_summon(0),this.summon_choose(),this.set_description&&this.set_description(this.data.info.abilities_list[this.summons[this.summon_index].key_name].description),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0},!1)}show(){this.group.alpha=1,this.highlight_bar.alpha=1,this.djinn_numbers_window.open(),this.djinn_numbers_window.set_numbers(this.summons[this.summon_index].requirements),this.select_summon(this.summon_index),this.summon_choose(),this.base_window.show(()=>{this.window_active=!0},!1)}hide(t){this.group.alpha=0,this.highlight_bar.alpha=0,this.data.cursor_manager.hide(),this.djinn_numbers_window.close(),this.base_window.close(()=>{this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}close(t){this.clear_sprites(),this.base_window.page_indicator.terminante(),this.group.alpha=0,this.highlight_bar.alpha=0,this.data.cursor_manager.hide(),this.data.control_manager.reset(),this.djinn_numbers_window.close(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}destroy(){this.base_window.destroy(!1),this.group.destroy(),this.djinn_numbers_window.destroy(),this.data.cursor_manager.hide(),this.data.control_manager.reset()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SummonDjinnStandbyWindow=void 0;const s=i(2),n=i(0);e.SummonDjinnStandbyWindow=class{constructor(t){this.game=t,this.base_window=new s.Window(this.game,160,64,76,20),this.texts={},this.graphics={},this.timers={};for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t];this.base_window.create_at_group(9+16*t,9,e+"_star"),this.texts[e]=this.base_window.set_text_in_position("",22+16*t,8,!0),this.graphics[e]=this.game.add.graphics(0,0),this.graphics[e].blendMode=PIXI.blendModes.SCREEN,this.base_window.add_sprite_to_group(this.graphics[e]),this.graphics[e].beginFill(this.base_window.color,1),this.graphics[e].drawRect(8+16*t,8,16,8),this.graphics[e].endFill()}this.window_open=!1}blink(t,e){this.timers[t]=this.game.time.create(!1),this.timers[t].loop(150,()=>{e.alpha=+!e.alpha}),this.timers[t].start()}set_numbers(t){for(let e in t){const i=t[e];this.timers[e]&&(this.timers[e].destroy(),this.timers[e]=null),i?this.blink(e,this.graphics[e]):this.graphics[e].alpha=0,this.base_window.update_text(i.toString(),this.texts[e])}}open(){this.base_window.show(void 0,!1),this.window_open=!0}close(){this.base_window.close(void 0,!1),this.window_open=!1;for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t];this.timers[e]&&(this.timers[e].destroy(),this.timers[e]=null)}}destroy(){this.base_window.destroy(!1);for(let t in this.timers)this.timers[t]&&this.timers[t].destroy()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleStatusWindow=e.BattleStatusStates=void 0;const s=i(17),n=i(5),a=i(2),_=i(0),o=i(3),r=i(56),h=i(9),c=i(57),l=i(58),d=i(59);var u;!function(t){t[t.STATISTICS=0]="STATISTICS",t[t.PSYNERGY=1]="PSYNERGY",t[t.DJINN=2]="DJINN",t[t.ITEMS=3]="ITEMS"}(u=e.BattleStatusStates||(e.BattleStatusStates={}));class p{constructor(t,e){this.game=t,this.data=e,this.close_callback=null,this.desc_shifted=null,this.selected_char=null,this.battle_effects=[],this.effect_sprites=[],this.window=new a.Window(this.game,0,0,p.WINDOW.WIDTH,p.WINDOW.HEIGHT),this.window.define_internal_group(p.GROUP_KEY,{x:0,y:0}),this.components=[new r.BattleStatusStatistics(this.game,this.data,this.window,this),new c.BattleStatusPsynergy(this.game,this.data,this.window,this),new l.BattleStatusDjinn(this.game,this.data,this.window,this),new d.BattleStatusItems(this.game,this.data,this.window,this)],this.battle_sprite=null,this.avatar=null,this.window.group.bringToTop(this.window.internal_groups[p.GROUP_KEY]),this.init_text()}get selected_character(){return this.selected_char}get battle_effects_array(){return this.battle_effects}init_text(){this.name=this.window.set_text_in_position("",p.NAME.X,p.NAME.Y,!1,!1,void 0,!1,p.GROUP_KEY),this.window.set_text_in_position("Lv",p.LEVEL.LABEL_X,p.LEVEL.LABEL_Y,!1,!1,void 0,!1,p.GROUP_KEY),this.level_value=this.window.set_text_in_position("",p.LEVEL.VALUE_END_X,p.LEVEL.VALUE_Y,!0,!1,void 0,!1,p.GROUP_KEY),this.window.set_text_in_position("Exp",p.EXP.LABEL_X,p.EXP.LABEL_Y,!1,!1,void 0,!1,p.GROUP_KEY),this.exp_value=this.window.set_text_in_position("",p.EXP.VALUE_END_X,p.EXP.VALUE_Y,!0,!1,void 0,!1,p.GROUP_KEY),this.normal_status=this.window.set_text_in_position("",p.NORMAL_STATUS.X,p.NORMAL_STATUS.Y,!1,!1,void 0,!1,p.GROUP_KEY),this.window.set_text_in_position("HP",p.HP.LABEL_X,p.HP.LABEL_Y,!1,!1,void 0,!1,p.GROUP_KEY),this.max_hp=this.window.set_text_in_position("",p.HP.MAX_END_X,p.HP.MAX_Y,!0,!1,void 0,!1,p.GROUP_KEY),this.curr_hp=this.window.set_text_in_position("/",p.HP.CURR_END_X,p.HP.CURR_Y,!0,!1,void 0,!1,p.GROUP_KEY),this.window.set_text_in_position("PP",p.PP.LABEL_X,p.PP.LABEL_Y,!1,!1,void 0,!1,p.GROUP_KEY),this.max_pp=this.window.set_text_in_position("",p.PP.MAX_END_X,p.PP.MAX_Y,!0,!1,void 0,!1,p.GROUP_KEY),this.curr_pp=this.window.set_text_in_position("/",p.PP.CURR_END_X,p.PP.CURR_Y,!0,!1,void 0,!1,p.GROUP_KEY);const t=p.STATS.LINE_SHIFT;this.window.set_text_in_position("Attack",p.STATS.LABEL_X,p.STATS.LABEL_Y,!1,!1,void 0,!1,p.GROUP_KEY),this.atk_value=this.window.set_text_in_position("",p.STATS.VALUE_END_X,p.STATS.VALUE_Y,!0,!1,void 0,!1,p.GROUP_KEY),this.window.set_text_in_position("Defense",p.STATS.LABEL_X,p.STATS.LABEL_Y+t,!1,!1,void 0,!1,p.GROUP_KEY),this.def_value=this.window.set_text_in_position("",p.STATS.VALUE_END_X,p.STATS.VALUE_Y+t,!0,!1,void 0,!1,p.GROUP_KEY),this.window.set_text_in_position("Agility",p.STATS.LABEL_X,p.STATS.LABEL_Y+2*t,!1,!1,void 0,!1,p.GROUP_KEY),this.agi_value=this.window.set_text_in_position("",p.STATS.VALUE_END_X,p.STATS.VALUE_Y+2*t,!0,!1,void 0,!1,p.GROUP_KEY),this.window.set_text_in_position("Luck",p.STATS.LABEL_X,p.STATS.LABEL_Y+3*t,!1,!1,void 0,!1,p.GROUP_KEY),this.luk_value=this.window.set_text_in_position("",p.STATS.VALUE_END_X,p.STATS.VALUE_Y+3*t,!0,!1,void 0,!1,p.GROUP_KEY),this.class_name=this.window.set_text_in_position("",p.CLASS_NAME.X,p.CLASS_NAME.Y,!1,!1,void 0,!1,p.GROUP_KEY),this.in_the_back=this.window.set_text_in_position("",p.IN_THE_BACK.X,p.IN_THE_BACK.Y,!1,!1,void 0,!1,p.GROUP_KEY),this.desc_line1=this.window.set_text_in_position("",p.DESCRIPTION.X,p.DESCRIPTION.LINE1_Y,!1,!1,void 0,!1,p.GROUP_KEY),this.desc_line2=this.window.set_text_in_position("",p.DESCRIPTION.X,p.DESCRIPTION.LINE2_Y,!1,!1,void 0,!1,p.GROUP_KEY)}update_info(){const t=this.selected_char,e=this.data.info.party_data.members;let i=-1;this.battle_effects=[];for(let t in e){e[t].key_name===this.selected_char.key_name&&(i=parseInt(t));break}this.window.update_text(t.name,this.name),this.window.update_text(t.level,this.level_value),this.window.update_text(t.current_exp,this.exp_value),this.window.update_text(t.class.name,this.class_name),this.window.update_text(i>=s.Battle.MAX_CHARS_IN_BATTLE?"In the back":"",this.in_the_back),0!==this.update_effects()?this.window.update_text("",this.normal_status):this.window.update_text("Normal",this.normal_status),this.window.update_text(t.max_hp,this.max_hp),this.window.update_text(t.current_hp+"/",this.curr_hp),this.window.update_text(t.max_pp,this.max_pp),this.window.update_text(t.current_pp+"/",this.curr_pp),this.window.update_text(t.atk,this.atk_value),this.window.update_text(t.def,this.def_value),this.window.update_text(t.agi,this.agi_value),this.window.update_text(t.luk,this.luk_value)}update_effects(){const t=this.get_status_effects(),e=this.get_buffs_debuffs(),i=[];for(let e in t){const s={key:null,properties:null};if(s.key=t[e],t[e]===n.temporary_status.DEATH_CURSE){const t=o.find(this.selected_char.effects,{status_key_name:n.temporary_status.DEATH_CURSE});s.properties.turns=this.selected_char.get_effect_turns_count(t)}i.length<p.MAX_EFFECTS_DISPLAYED&&i.push(s)}for(let t in e){const s={key:null,properties:{value:null}};let a=null;if(e[t].stat===h.effect_types.RESIST||e[t].stat===h.effect_types.POWER)for(let i in _.elements)e[t].value[_.elements[i]]<0?null===a&&(a="down"):e[t].value[_.elements[i]]>0&&(null===a?a="up":"down"===a&&(a="up_down"));else e[t].stat in n.effect_type_stat&&(a=s.properties.value>=0?"up":"down");null!==a&&(s.key=e[t].stat,s.properties.modifier=a,s.properties.value=e[t].value,i.length<p.MAX_EFFECTS_DISPLAYED&&i.push(s))}return this.battle_effects=i,this.battle_effects.length}get_buffs_debuffs(){const t=[],e=[h.effect_types.ATTACK,h.effect_types.DEFENSE,h.effect_types.AGILITY];for(let i=0;i<e.length;i++){const s=this.selected_char[n.effect_type_stat[e[i]]]-this.selected_char.preview_stat_without_abilities_effect(n.effect_type_stat[e[i]]);if(0!==s){const n={stat:e[i],value:s};t.push(n)}}const i=this.selected_char.preview_elemental_stats_without_abilities_effect(),s={[_.elements.VENUS]:this.selected_char.venus_power_current-i[_.elements.VENUS].power,[_.elements.MERCURY]:this.selected_char.mercury_power_current-i[_.elements.MERCURY].power,[_.elements.MARS]:this.selected_char.mars_power_current-i[_.elements.MARS].power,[_.elements.JUPITER]:this.selected_char.jupiter_power_current-i[_.elements.JUPITER].power},a={[_.elements.VENUS]:this.selected_char.venus_resist_current-i[_.elements.VENUS].resist,[_.elements.MERCURY]:this.selected_char.mercury_resist_current-i[_.elements.MERCURY].resist,[_.elements.MARS]:this.selected_char.mars_resist_current-i[_.elements.MARS].resist,[_.elements.JUPITER]:this.selected_char.jupiter_resist_current-i[_.elements.JUPITER].resist};return o.some(s)&&t.push({stat:h.effect_types.POWER,value:s}),o.some(a)&&t.push({stat:h.effect_types.RESIST,value:a}),t}get_status_effects(t){return t?o.sortBy([...this.data.info.main_char_list[this.selected_char.key_name].permanent_status],t=>n.ordered_status_menu.indexOf(t)):o.sortBy([...this.data.info.main_char_list[this.selected_char.key_name].temporary_status].concat([...this.data.info.main_char_list[this.selected_char.key_name].permanent_status]),t=>n.ordered_status_battle.indexOf(t))}set_sprites(){if(this.battle_sprite&&this.battle_sprite.destroy(),this.avatar&&this.avatar.destroy(),this.effect_sprites.length>0){for(let t in this.effect_sprites)this.effect_sprites[t].destroy();this.effect_sprites=[]}this.avatar=this.window.create_at_group(p.AVATAR.X,p.AVATAR.Y,"avatars",void 0,this.selected_char.key_name,p.GROUP_KEY);const t=this.selected_char.sprite_base.getActionKey(_.base_actions.BATTLE),e=this.data.info.main_char_list[this.selected_char.key_name].sprite_base;if(this.battle_sprite=this.window.create_at_group(p.BATTLESPRITE.CENTER_X,p.BATTLESPRITE.END_Y,t,void 0,void 0,p.GROUP_KEY),this.battle_sprite.anchor.setTo(.5,1),e.setAnimation(this.battle_sprite,_.base_actions.BATTLE),this.battle_sprite.animations.play(e.getAnimationKey(_.base_actions.BATTLE,"back")),this.battle_effects.length>0)for(let t in this.battle_effects){const e=this.battle_effects[t];let i=e.key;(e.key in n.effect_type_stat||e.key===h.effect_types.RESIST||e.key===h.effect_types.POWER)&&(i=i+"_"+e.properties.modifier);const s=p.EFFECTS.X+parseInt(t)*p.EFFECTS.SHIFT,a=p.EFFECTS.Y,_=this.window.create_at_group(s,a,"battle_effect_icons",void 0,i,p.GROUP_KEY);this.effect_sprites.push(_)}}change_character(t){this.selected_char=t,this.update_info(),this.set_sprites(),this.change_state(this.current_state)}next_char(){const t=this.data.info.party_data.members;let e=-1;for(let i in t)if(t[i].key_name===this.selected_char.key_name){e=parseInt(i);break}this.change_character(t[(e+1)%t.length])}previous_char(){const t=this.data.info.party_data.members;let e=-1;for(let i in t)if(t[i].key_name===this.selected_char.key_name){e=parseInt(i);break}this.change_character(t[(e+t.length-1)%t.length])}grant_control(){const t=[{key:this.data.gamepad.A,on_down:this.trigger_state_change.bind(this)},{key:this.data.gamepad.B,on_down:this.close.bind(this,this.close_callback)},{key:this.data.gamepad.L,on_down:this.previous_char.bind(this)},{key:this.data.gamepad.R,on_down:this.next_char.bind(this)},{key:this.data.gamepad.LEFT,on_down:this.current_component.on_left.bind(this.current_component)},{key:this.data.gamepad.RIGHT,on_down:this.current_component.on_right.bind(this.current_component)},{key:this.data.gamepad.UP,on_down:this.current_component.on_up.bind(this.current_component)},{key:this.data.gamepad.DOWN,on_down:this.current_component.on_down.bind(this.current_component)}];this.data.control_manager.set_control(t,{loop_configs:{vertical:!0,horizontal:!0,shoulder:!0}})}trigger_state_change(){this.current_state===u.ITEMS?this.current_state=u.STATISTICS:this.current_state++,this.change_state(this.current_state,!0)}change_state(t,e=!1){let i={line:0,col:0};this.current_component&&(e||(i=this.current_component.current_pos),this.current_component.clear(),this.current_component=null),this.current_state=t,this.current_component=this.components[this.current_state],this.current_component.reset(i),this.draw_seprartor(),this.grant_control()}draw_seprartor(){const t=this.current_state!==u.STATISTICS;this.window.clear_separators();const e=p.SEPARATOR.X,i=p.SEPARATOR.Y+(t?p.SEPARATOR.SHIFT:0),s=p.SEPARATOR.WIDTH;this.window.draw_separator(e,i,e+s,i,!1),this.desc_shifted=t}update_description(t,e){void 0===e?(this.window.update_text("",this.desc_line1),this.window.update_text(t,this.desc_line2)):(this.window.update_text(t,this.desc_line1),this.window.update_text(e,this.desc_line2))}open(t,e,i){this.selected_char=t||this.data.info.party_data.members[0],this.close_callback=e,this.window.show(()=>{this.update_info(),this.set_sprites(),this.change_state(u.STATISTICS),i&&i()})}clear_component(){this.current_component.clear(),this.current_state=null,this.current_component=null}close(t){this.clear_component(),this.window.close(t)}}e.BattleStatusWindow=p,p.WINDOW={WIDTH:236,HEIGHT:156},p.SEPARATOR={X:4,Y:115,WIDTH:232,SHIFT:16},p.BATTLESPRITE={CENTER_X:204,END_Y:120,SHADOW_Y:114},p.DESCRIPTION={X:8,LINE1_Y:124,LINE2_Y:140},p.NAME={X:8,Y:8},p.CLASS_NAME={X:8,Y:56},p.EXP={LABEL_X:8,LABEL_Y:16,VALUE_END_X:109,VALUE_Y:16},p.LEVEL={LABEL_X:64,LABEL_Y:8,VALUE_END_X:93,VALUE_Y:8},p.AVATAR={X:8,Y:24},p.NORMAL_STATUS={X:120,Y:8},p.IN_THE_BACK={X:48,Y:24},p.STATS={LABEL_X:144,LABEL_Y:24,VALUE_END_X:213,VALUE_Y:24,LINE_SHIFT:8},p.HP={LABEL_X:48,LABEL_Y:32,MAX_END_X:133,MAX_Y:32,CURR_END_X:100,CURR_Y:32},p.PP={LABEL_X:48,LABEL_Y:40,MAX_END_X:133,MAX_Y:40,CURR_END_X:100,CURR_Y:40},p.EFFECTS={X:112,Y:8,SHIFT:16},p.GROUP_KEY="status_win",p.MAX_EFFECTS_DISPLAYED=8},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleStatusStatistics=e.BattleStatistics=void 0;const s=i(10),n=i(4),a=i(5),_=i(0),o=i(9),r=i(3);var h;!function(t){t[t.NAME=0]="NAME",t[t.EXP=1]="EXP",t[t.HP=2]="HP",t[t.PP=3]="PP",t[t.CLASS=4]="CLASS",t[t.DJINN=5]="DJINN",t[t.ELEM_LEVELS=6]="ELEM_LEVELS",t[t.ELEM_POWER=7]="ELEM_POWER",t[t.ELEM_RESIST=8]="ELEM_RESIST"}(h=e.BattleStatistics||(e.BattleStatistics={}));class c extends s.StatusComponent{constructor(t,e,i,s,n){super(t,e,i,s,n)}select_option(){const t={x:0,y:0,width:0,height:0};let e=0,i=0;if(0===this.current_col)t.x=c.HIGHLIGHT[this.current_line].X,t.y=c.HIGHLIGHT[this.current_line].Y,t.width=c.HIGHLIGHT[this.current_line].WIDTH,t.height=c.HIGHLIGHT[this.current_line].HEIGHT,e=c.CURSOR[this.current_line].X,i=c.CURSOR[this.current_line].Y;else{if(0===this.battle_status_effects.length)t.x=c.HIGHLIGHT.NORMAL.X,t.y=c.HIGHLIGHT.NORMAL.Y,t.width=c.HIGHLIGHT.NORMAL.WIDTH,t.height=c.HIGHLIGHT.NORMAL.HEIGHT;else{let e=c.HIGHLIGHT.EFFECT.SHIFT;t.x=c.HIGHLIGHT.EFFECT.X+e*(this.current_col-1),t.y=c.HIGHLIGHT.EFFECT.Y,t.width=c.HIGHLIGHT.EFFECT.WIDTH,t.height=c.HIGHLIGHT.EFFECT.HEIGHT}const s=c.CURSOR.EFFECT.SHIFT;e=c.CURSOR.EFFECT.X+s*(this.current_col-1),i=c.CURSOR.EFFECT.Y}this.update_highlight(t);const s={type:n.CursorManager.CursorTweens.POINT,variant:n.PointVariants.SHORT};this.data.cursor_manager.move_to({x:e,y:i},{animate:!1,flip:!0,tween_config:s})}on_change(){if(this.select_option(),0===this.current_col){const t={line1:c.BattleDescriptions[this.current_line].line1,line2:c.BattleDescriptions[this.current_line].line2};if(this.current_line===h.EXP){const e=this.selected_char,i=e.exp_curve[e.level]-e.current_exp;t.line2=t.line2(i)}this.update_description(t.line1,t.line2)}else if(0===this.battle_status_effects.length)this.update_description("Normal status.","");else{const t=this.battle_status_effects[this.current_col-1];let e=null;if(a.ordered_status_battle.includes(t.key)){if(e={line1:c.BattleStatusMsgs[t.key].line1,line2:c.BattleStatusMsgs[t.key].line2},t.key===a.temporary_status.DEATH_CURSE){const i=t.properties.turns?t.properties.turns:0;e.line1=e.line1(i)}}else if(t.key===o.effect_types.RESIST||t.key===o.effect_types.POWER){const i=o.effect_names[t.key],s=r.flatMap(_.elements,e=>t.properties.value[e]?[{element:e,value:t.properties.value[e]}]:[]);e={line1:"",line2:""};for(let t=0;t<s.length;t++){s[t].value>=0&&(s[t].value="+"+s[t].value);const n=_.element_names[s[t].element];e[t<2?"line1":"line2"]+=(t%2!=0?", ":"")+n+" "+i+" "+s[t].value}""===e.line2?e.line1+=".":e.line2+="."}else if(t.key in a.effect_type_stat){e={line1:c.BattleBuffMsgs[t.properties.modifier][t.key].line1,line2:c.BattleBuffMsgs[t.properties.modifier][t.key].line2};const i=t.properties.value?t.properties.value:0;e.line1=e.line1(i)}this.update_description(e.line1,e.line2)}}on_left(){const t=this.battle_status_effects.length;this.current_col=0===t?0===this.current_col?1:0:(this.current_col+(t+1)-1)%(t+1),this.on_change()}on_right(){const t=this.battle_status_effects.length;this.current_col=0===t?0===this.current_col?1:0:(this.current_col+1)%(t+1),this.on_change()}on_up(){0!==this.current_col?this.current_col=0:this.current_line=(this.current_line+c.LINES-1)%c.LINES,this.on_change()}on_down(){0!==this.current_col?this.current_col=0:this.current_line=(this.current_line+1)%c.LINES,this.on_change()}initialize(){const t=["venus_star","mercury_star","mars_star","jupiter_star"];for(let e=0;e<t.length;e++){const i=c.STARS.X+e*c.STARS_SHIFT,s=c.STARS.Y,n=this.window.create_at_group(i,s,t[e],void 0,void 0,c.GROUP_KEY);this.state_sprites.push(n)}const e=["Djinn","Lv","Power","Resist"];for(let t=0;t<e.length;t++){const i=c.LABEL.X,s=c.LABEL.Y+t*c.LABEL_SHIFT,n=this.window.set_text_in_position(e[t],i,s,!1,!1,void 0,!1,c.GROUP_KEY);this.state_sprites.push(n.text,n.shadow)}for(let t=0;t<_.ordered_elements.length;t++){const e=this.get_djinn_counts(_.ordered_elements[t]),i=this.get_elemental_stats(_.ordered_elements[t]),s=c.ELEM_NUMBERS.END_X+t*c.ELEM_NUMBERS.X_SHIFT;let n=c.ELEM_NUMBERS.Y,a=e.set+"/"+e.total,o=this.window.set_text_in_position(a,s,n,!0,!1,void 0,!1,c.GROUP_KEY);this.state_sprites.push(o.text,o.shadow),n+=c.ELEM_NUMBERS.Y_SHIFT,a=String(i.level),o=this.window.set_text_in_position(a,s,n,!0,!1,void 0,!1,c.GROUP_KEY),this.state_sprites.push(o.text,o.shadow),n+=c.ELEM_NUMBERS.Y_SHIFT,a=String(i.power),o=this.window.set_text_in_position(a,s,n,!0,!1,void 0,!1,c.GROUP_KEY),this.state_sprites.push(o.text,o.shadow),n+=c.ELEM_NUMBERS.Y_SHIFT,a=String(i.resistance),o=this.window.set_text_in_position(a,s,n,!0,!1,void 0,!1,c.GROUP_KEY),this.state_sprites.push(o.text,o.shadow)}}}e.BattleStatusStatistics=c,c.BattleStatusMsgs={[a.temporary_status.DELUSION]:{line1:"Delusions misdirect your attacks.",line2:"Cure with Elixer or Restore."},[a.temporary_status.STUN]:{line1:"You are stunned and cannot act.",line2:"Cure with Elixer or Restore."},[a.temporary_status.SLEEP]:{line1:"Sleep prevents you from acting.",line2:"Wake with Elixer or Restore."},[a.temporary_status.SEAL]:{line1:"Your Psynergy is sealed.",line2:"Cure with Elixer or Restore."},[a.temporary_status.DEATH_CURSE]:{line1:t=>`You will be downed in ${t} turns.`,line2:"Cure wth Elixer or Restore."},[a.permanent_status.DOWNED]:{line1:"You are down. Heal at a Sanctum",line2:"or use Revive or Water of Life."},[a.permanent_status.POISON]:{line1:"A mild poison wracks your body.",line2:"Cure with Antidote or Cure Poison."},[a.permanent_status.VENOM]:{line1:"A vile poison wracks your body.",line2:"Cure with Antidote or Cure Poison."},[a.permanent_status.EQUIP_CURSE]:{line1:"A cursed item binds your actions.",line2:"Remove the item at a Sanctum."},[a.permanent_status.HAUNT]:{line1:"An evil spirit wounds you.",line2:"Exorcise it at a Sanctum."}},c.BattleBuffMsgs={up:{[o.effect_types.ATTACK]:{line1:t=>`Attack increased by ${t}.`,line2:""},[o.effect_types.DEFENSE]:{line1:t=>`Defense increased by ${t}.`,line2:""},[o.effect_types.AGILITY]:{line1:t=>`Agility increased by ${t}.`,line2:""}},down:{[o.effect_types.ATTACK]:{line1:t=>`Attack dropped by ${t}.`,line2:"Increase with spells like Impact."},[o.effect_types.DEFENSE]:{line1:t=>`Defense dropped by ${t}.`,line2:"Increase with spells like Guard."},[o.effect_types.AGILITY]:{line1:t=>`Agility dropped by ${t}.`,line2:""}}},c.BattleDescriptions={[h.NAME]:{line1:"Use the L & R Buttons to",line2:"switch between characters."},[h.EXP]:{line1:"Current experience points.",line2:t=>t+" to next level."},[h.HP]:{line1:"Your current and maximum HP.",line2:"Affected by Djinn and equipment."},[h.PP]:{line1:"Your current and maximum PP.",line2:"Affected by Djinn and equipment."},[h.CLASS]:{line1:"Your current class. Your",line2:"class changes when you set Djinn."},[h.DJINN]:{line1:"The number of Djinn currently set",line2:"and your total number of Djinn."},[h.ELEM_LEVELS]:{line1:"Your Elemental Levels. These",line2:"reflect your skill in each element."},[h.ELEM_POWER]:{line1:"Power reflects the damage you",line2:"can do with each element."},[h.ELEM_RESIST]:{line1:"Resist reflects your defensive",line2:"strength against each element."}},c.CURSOR={[h.NAME]:{X:31,Y:15},[h.EXP]:{X:79,Y:23},[h.HP]:{X:111,Y:39},[h.PP]:{X:111,Y:47},[h.CLASS]:{X:39,Y:63},[h.DJINN]:{X:119,Y:87},[h.ELEM_LEVELS]:{X:119,Y:95},[h.ELEM_POWER]:{X:119,Y:103},[h.ELEM_RESIST]:{X:119,Y:111},EFFECT:{X:119,Y:15,SHIFT:16}},c.HIGHLIGHT={[h.NAME]:{X:8,Y:8,WIDTH:96,HEIGHT:8},[h.EXP]:{X:8,Y:16,WIDTH:104,HEIGHT:8},[h.HP]:{X:48,Y:32,WIDTH:88,HEIGHT:8},[h.PP]:{X:48,Y:40,WIDTH:88,HEIGHT:8},[h.CLASS]:{X:8,Y:56,WIDTH:80,HEIGHT:8},[h.DJINN]:{X:8,Y:80,WIDTH:160,HEIGHT:8},[h.ELEM_LEVELS]:{X:8,Y:88,WIDTH:160,HEIGHT:8},[h.ELEM_POWER]:{X:8,Y:96,WIDTH:160,HEIGHT:8},[h.ELEM_RESIST]:{X:8,Y:104,WIDTH:160,HEIGHT:8},EFFECT:{X:112,Y:8,WIDTH:16,HEIGHT:16,SHIFT:16},NORMAL:{X:120,Y:8,WIDTH:80,HEIGHT:8}},c.LINES=9,c.STARS={X:64,Y:73},c.STARS_SHIFT=32,c.LABEL={X:8,Y:80},c.LABEL_SHIFT=8,c.ELEM_NUMBERS={END_X:69,Y:80,X_SHIFT:32,Y_SHIFT:8}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleStatusPsynergy=void 0;const s=i(10),n=i(4),a=i(11);class _ extends s.StatusComponent{constructor(t,e,i,s,n){super(t,e,i,s,n)}select_option(){const t={x:_.HIGHLIGHT.X,y:_.HIGHLIGHT.Y+_.SHIFT*this.current_line,width:_.HIGHLIGHT.WIDTH,height:_.HIGHLIGHT.HEIGHT};this.update_highlight(t);const e=_.CURSOR.X,i=_.CURSOR.Y+_.SHIFT*this.current_line,s={type:n.CursorManager.CursorTweens.POINT,variant:n.PointVariants.SHORT};this.data.cursor_manager.move_to({x:e,y:i},{animate:!1,tween_config:s}),this.window.page_indicator.select_page(this.current_col)}on_change(){this.battle_abilities[this.current_col][this.current_line]||(this.current_line=this.battle_abilities[this.current_col].length-1),this.select_option();const t=this.battle_abilities[this.current_col][this.current_line];this.update_description(t.description)}on_left(){if(this.battle_abilities.length<=1)return;const t=this.battle_abilities.length;this.current_col=(this.current_col+t-1)%t,this.battle_abilities[this.current_col][this.current_line]||(this.current_line=this.battle_abilities[this.current_col].length-1),this.reset(void 0,!0)}on_right(){if(this.battle_abilities.length<=1)return;const t=this.battle_abilities.length;this.current_col=(this.current_col+1)%t,this.battle_abilities[this.current_col][this.current_line]||(this.current_line=this.battle_abilities[this.current_col].length-1),this.reset(void 0,!0)}on_up(){this.battle_abilities[this.current_col].length<=1||(0===this.current_line?(0===this.current_col?(this.current_col=this.battle_abilities.length-1,this.current_line=this.battle_abilities[this.battle_abilities.length-1].length-1):(this.current_col=this.current_col-1,this.current_line=this.battle_abilities[this.current_col].length-1),this.reset(void 0,!0)):(this.current_line--,this.on_change()))}on_down(){this.battle_abilities[this.current_col].length<=1||(this.current_line+1===this.battle_abilities[this.current_col].length?(this.current_col===this.battle_abilities.length-1?(this.current_col=0,this.current_line=0):(this.current_col=this.current_col+1,this.current_line=0),this.reset(void 0,!0)):(this.current_line++,this.on_change()))}initialize(){const t={x:_.PAGE_INDICATOR_ANCHOR.X,y:_.PAGE_INDICATOR_ANCHOR.Y};this.update_abilities(),this.battle_abilities[this.current_col]||(this.current_col=this.battle_abilities.length-1);this.battle_abilities[this.current_col].forEach((t,e)=>{const i=t.key_name,s=t.name,n=t.pp_cost,a=t.element+"_star",o=String(t.range);let r=_.PSYNERGY.ICON_X,h=_.PSYNERGY.ICON_Y+e*_.SHIFT;const c=this.window.create_at_group(r,h,"abilities_icons",void 0,i,_.GROUP_KEY);this.state_sprites.push(c),r=_.PSYNERGY.NAME_X,h=_.PSYNERGY.NAME_Y+e*_.SHIFT;const l=this.window.set_text_in_position(s,r,h,!1,!1,void 0,!1,_.GROUP_KEY);this.state_sprites.push(l.text,l.shadow),r=_.PSYNERGY.PP_LABEL_X,h=_.PSYNERGY.PP_LABEL_Y+e*_.SHIFT;const d=this.window.set_text_in_position("PP",r,h,!1,!1,void 0,!1,_.GROUP_KEY);this.state_sprites.push(d.text,d.shadow),r=_.PSYNERGY.PP_VALUE_END_X,h=_.PSYNERGY.PP_VALUE_Y+e*_.SHIFT;const u=this.window.set_text_in_position(n,r,h,!0,!1,void 0,!1,_.GROUP_KEY);this.state_sprites.push(u.text,u.shadow),r=_.PSYNERGY.STAR_X,h=_.PSYNERGY.STAR_Y+e*_.SHIFT;const p=this.window.create_at_group(r,h,a,void 0,void 0,_.GROUP_KEY);this.state_sprites.push(p),r=_.PSYNERGY.RANGE_CENTER_X,h=_.PSYNERGY.RANGE_Y+e*_.SHIFT;const m=this.window.create_at_group(r,h,"ranges",void 0,o,_.GROUP_KEY);m.x-=m.width/2|0,this.state_sprites.push(m)}),this.window.page_indicator.position=t,this.window.page_indicator.initialize(this.battle_abilities.length,this.current_line,a.PageIndicatorModes.FLASH),this.select_option()}update_abilities(){const t=this.selected_char.abilities;let e=[];this.battle_abilities=[];let i=0;t.forEach(t=>{i===_.MAX_LINES&&(this.battle_abilities.push(e),e=[],i=0),this.data.info.abilities_list[t]?this.data.info.abilities_list[t].is_battle_ability&&(e.push(this.data.info.abilities_list[t]),i++):console.warn('Ability "'+t+'" does not exist in the database.')}),e.length>0&&this.battle_abilities.push(e)}}e.BattleStatusPsynergy=_,_.CURSOR={X:0,Y:79},_.HIGHLIGHT={X:8,Y:72,WIDTH:160,HEIGHT:8},_.PSYNERGY={ICON_X:9,ICON_Y:70,NAME_X:24,NAME_Y:72,PP_LABEL_X:96,PP_LABEL_Y:72,PP_VALUE_END_X:125,PP_VALUE_Y:72,STAR_X:129,STAR_Y:73,RANGE_CENTER_X:148,RANGE_Y:72},_.PAGE_INDICATOR_ANCHOR={X:171,Y:64},_.MAX_LINES=4,_.SHIFT=16},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleStatusDjinn=void 0;const s=i(10),n=i(4),a=i(7),_=i(1);class o extends s.StatusComponent{constructor(t,e,i,s,n){super(t,e,i,s,n)}select_option(){const t={x:o.HIGHLIGHT.X+o.SHIFT_X*this.current_col,y:o.HIGHLIGHT.Y+o.SHIFT_Y*this.current_line,width:o.HIGHLIGHT.WIDTH,height:o.HIGHLIGHT.HEIGHT};this.update_highlight(t);const e=o.CURSOR.X+o.SHIFT_X*this.current_col,i=o.CURSOR.Y+o.SHIFT_Y*this.current_line,s={type:n.CursorManager.CursorTweens.POINT,variant:n.PointVariants.SHORT};this.data.cursor_manager.move_to({x:e,y:i},{animate:!1,tween_config:s}),this.window.page_indicator.select_page(this.current_col)}on_change(){this.char_djinn[this.current_col]||(this.current_col=this.char_djinn.length-1),this.char_djinn[this.current_col][this.current_line]||(this.current_line=this.char_djinn[this.current_col].length-1),this.select_option();const t=this.char_djinn[this.current_col][this.current_line],e=t.status===a.djinn_status.STANDBY?"Ready to summon.":t.description;this.update_description(e)}on_left(){if(this.char_djinn.length<=1)return;const t=this.char_djinn.length;this.current_col=(this.current_col+t-1)%t,this.char_djinn[this.current_col][this.current_line]||(this.current_line=this.char_djinn[this.current_col].length-1),this.on_change()}on_right(){if(this.char_djinn.length<=1)return;const t=this.char_djinn.length;this.current_col=(this.current_col+1)%t,this.char_djinn[this.current_col][this.current_line]||(this.current_line=this.char_djinn[this.current_col].length-1),this.on_change()}on_up(){this.char_djinn[this.current_col].length<=1||(0===this.current_line?0===this.current_col?(this.current_col=this.char_djinn.length-1,this.current_line=this.char_djinn[this.char_djinn.length-1].length-1):(this.current_col=this.current_col-1,this.current_line=this.char_djinn[this.current_col].length-1):this.current_line--,this.on_change())}on_down(){this.char_djinn[this.current_col].length<=1||(this.current_line+1===this.char_djinn[this.current_col].length?this.current_col===this.char_djinn.length-1?(this.current_col=0,this.current_line=0):(this.current_col=this.current_col+1,this.current_line=0):this.current_line++,this.on_change())}initialize(){this.update_djinn(),this.char_djinn.forEach((t,e)=>{t.forEach((t,i)=>{const s=t.name,n=t.element+"_star",r=t.recovery_turn+1,h=t.status;let c=o.DJINN.STAR_X+e*o.SHIFT_X,l=o.DJINN.STAR_Y+i*o.SHIFT_Y;const d=this.window.create_at_group(c,l,n,void 0,void 0,o.GROUP_KEY);this.state_sprites.push(d);let u=_.DEFAULT_FONT_COLOR;if(h===a.djinn_status.RECOVERY){u=_.YELLOW_FONT_COLOR,c=o.DJINN.RECOVERY_END_X+e*o.SHIFT_X,l=o.DJINN.RECOVERY_Y+i*o.SHIFT_Y;const t=this.window.set_text_in_position(r,c,l,!0,!1,u,!1,o.GROUP_KEY);this.state_sprites.push(t.text,t.shadow)}else h===a.djinn_status.STANDBY&&(u=_.RED_FONT_COLOR);c=o.DJINN.NAME_X+e*o.SHIFT_X,l=o.DJINN.NAME_Y+i*o.SHIFT_Y;const p=this.window.set_text_in_position(s,c,l,!1,!1,u,!1,o.GROUP_KEY);this.state_sprites.push(p.text,p.shadow)})}),this.select_option()}update_djinn(){const t=this.selected_char.djinni;let e=[];this.char_djinn=[];let i=0;t.forEach(t=>{i===o.MAX_LINES&&(this.char_djinn.push(e),e=[],i=0),e.push(this.data.info.djinni_list[t]),i++}),e.length>0&&this.char_djinn.push(e)}}e.BattleStatusDjinn=o,o.CURSOR={X:1,Y:87},o.HIGHLIGHT={X:8,Y:80,WIDTH:56,HEIGHT:8},o.DJINN={STAR_X:9,STAR_Y:81,NAME_X:16,NAME_Y:80,RECOVERY_END_X:58,RECOVERY_Y:80},o.SHIFT_X=56,o.SHIFT_Y=16,o.MAX_LINES=3},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleStatusItems=void 0;const s=i(10),n=i(4),a=i(11),_=i(8),o=i(1);class r extends s.StatusComponent{constructor(t,e,i,s,n){super(t,e,i,s,n)}select_option(){const t={x:r.HIGHLIGHT.X,y:r.HIGHLIGHT.Y+r.SHIFT*this.current_line,width:r.HIGHLIGHT.WIDTH,height:r.HIGHLIGHT.HEIGHT};this.update_highlight(t);const e=r.CURSOR.X,i=r.CURSOR.Y+r.SHIFT*this.current_line,s={type:n.CursorManager.CursorTweens.POINT,variant:n.PointVariants.SHORT};this.data.cursor_manager.move_to({x:e,y:i},{animate:!1,tween_config:s}),this.window.page_indicator.select_page(this.current_col)}on_change(){this.char_items[this.current_col][this.current_line]||(this.current_line=this.char_items[this.current_col].length-1),this.select_option();const t=this.char_items[this.current_col][this.current_line];this.update_description(this.data.info.items_list[t.key_name].description)}on_left(){if(this.char_items.length<=1)return;const t=this.char_items.length;this.current_col=(this.current_col+t-1)%t,this.char_items[this.current_col][this.current_line]||(this.current_line=this.char_items[this.current_col].length-1),this.reset(void 0,!0)}on_right(){if(this.char_items.length<=1)return;const t=this.char_items.length;this.current_col=(this.current_col+1)%t,this.char_items[this.current_col][this.current_line]||(this.current_line=this.char_items[this.current_col].length-1),this.reset(void 0,!0)}on_up(){this.char_items[this.current_col].length<=1||(0===this.current_line?(0===this.current_col?(this.current_col=this.char_items.length-1,this.current_line=this.char_items[this.char_items.length-1].length-1):(this.current_col=this.current_col-1,this.current_line=this.char_items[this.current_col].length-1),this.reset(void 0,!0)):(this.current_line--,this.on_change()))}on_down(){this.char_items[this.current_col].length<=1||(this.current_line+1===this.char_items[this.current_col].length?(this.current_col===this.char_items.length-1?(this.current_col=0,this.current_line=0):(this.current_col=this.current_col+1,this.current_line=0),this.reset(void 0,!0)):(this.current_line++,this.on_change()))}initialize(){const t={x:r.PAGE_INDICATOR_ANCHOR.X,y:r.PAGE_INDICATOR_ANCHOR.Y};this.update_items(),this.char_items[this.current_col]||(this.current_col=this.char_items.length-1);this.char_items[this.current_col].forEach((t,e)=>{const i=t.key_name,s=this.data.info.items_list[t.key_name].name,n=t.broken,a=t.equipped,h=t.quantity<=1?void 0:t.quantity;let c=r.ITEM.ICON_X,l=r.ITEM.ICON_Y+e*r.SHIFT;const d=this.window.make_item_obj(i,{x:c,y:l},{broken:n,equipped:a,quantity:h,internal_group:r.GROUP_KEY});for(let t in d)d[t]&&this.state_sprites.push(d[t]);c=r.ITEM.NAME_X,l=r.ITEM.NAME_Y+e*r.SHIFT;let u=o.YELLOW_FONT_COLOR;t.broken?u=o.RED_FONT_COLOR:this.data.info.items_list[t.key_name].use_type!==_.use_types.NO_USE&&(u=o.DEFAULT_FONT_COLOR);const p=this.window.set_text_in_position(s,c,l,!1,!1,u,!1,r.GROUP_KEY);this.state_sprites.push(p.text,p.shadow)}),this.window.page_indicator.position=t,this.window.page_indicator.initialize(this.char_items.length,this.current_line,a.PageIndicatorModes.FLASH),this.select_option()}update_items(){const t=[...this.selected_char.items];this.char_items=[];let e=[];t.forEach((i,s)=>{this.data.info.items_list[i.key_name].use_type!==_.use_types.NO_USE&&e.push(t.splice(s,1)[0])});let i=[],s=0;e=e.concat(t),e.forEach(t=>{s===r.MAX_LINES&&(this.char_items.push(i),i=[],s=0),i.push(t),s++}),i.length>0&&this.char_items.push(i)}}e.BattleStatusItems=r,r.CURSOR={X:10,Y:79},r.HIGHLIGHT={X:8,Y:72,WIDTH:160,HEIGHT:8},r.ITEM={ICON_X:23,ICON_Y:68,NAME_X:40,NAME_Y:72},r.PAGE_INDICATOR_ANCHOR={X:171,Y:64},r.MAX_LINES=4,r.SHIFT=16},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.get_enemy_instance=e.Enemy=void 0;const s=i(5),n=i(0),a=i(3),_=i(1),o=i(9);class r extends s.Player{constructor(t,e){super(t.key_name,e||t.name),this.level=t.level,this.turns=t.turns,this.max_hp=t.max_hp,this.max_pp=t.max_pp,this.hp_recovery=t.hp_recovery,this.pp_recovery=t.pp_recovery,this.atk=t.atk,this.def=t.def,this.agi=t.agi,this.luk=t.luk,this.items=t.items,this.abilities=t.abilities,this.coins_reward=t.coins_reward,this.item_reward=t.item_reward,this.item_reward_chance=t.item_reward_chance,this.exp_reward=t.exp_reward,this.venus_level=t.venus_level,this.mercury_level=t.mercury_level,this.mars_level=t.mars_level,this.jupiter_level=t.jupiter_level,this.venus_power=t.venus_power,this.mercury_power=t.mercury_power,this.mars_power=t.mars_power,this.jupiter_power=t.jupiter_power,this.venus_resist=t.venus_resist,this.mercury_resist=t.mercury_resist,this.mars_resist=t.mars_resist,this.jupiter_resist=t.jupiter_resist,this.battle_scale=t.battle_scale,this.battle_animations_variations=Object.assign({},t.battle_animations_variations),this.fighter_type=s.fighter_types.ENEMY,this.class={name:"No Class",vulnerabilities:void 0===t.vulnerabilities?[]:t.vulnerabilities},this.current_exp=-1,this.effects=[],this.set_base_attributes()}set_base_attributes(){this.current_hp=this.max_hp,this.current_pp=this.max_pp,this.current_hp_recovery=this.hp_recovery,this.current_pp_recovery=this.pp_recovery,this.venus_level_current=this.venus_level,this.mercury_level_current=this.mercury_level,this.mars_level_current=this.mars_level,this.jupiter_level_current=this.jupiter_level,this.venus_power_current=this.venus_power,this.mercury_power_current=this.mercury_power,this.mars_power_current=this.mars_power,this.jupiter_power_current=this.jupiter_power,this.venus_resist_current=this.venus_resist,this.mercury_resist_current=this.mercury_resist,this.mars_resist_current=this.mars_resist,this.jupiter_resist_current=this.jupiter_resist}update_all(){this.set_base_attributes(),this.effects.forEach(t=>{switch(t.type){case o.effect_types.POWER:case o.effect_types.RESIST:case o.effect_types.MAX_HP:case o.effect_types.MAX_PP:case o.effect_types.ATTACK:case o.effect_types.DEFENSE:case o.effect_types.AGILITY:case o.effect_types.LUCK:t.apply_effect()}});for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t],i=e+"_power_current",s=e+"_resist_current";this[i]=a.clamp(this[i],_.ELEM_ATTR_MIN,_.ELEM_ATTR_MAX),this[s]=a.clamp(this[s],_.ELEM_ATTR_MIN,_.ELEM_ATTR_MAX)}}}e.Enemy=r,e.get_enemy_instance=function(t,e){return new r(t,t.name+e)}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ChoosingTargetWindow=void 0;const s=i(2),n=i(1),a=i(0),_=i(3);e.ChoosingTargetWindow=class{constructor(t,e){this.game=t,this.data=e,this.base_window=new s.Window(this.game,0,136,0,20),this.window_open=!1,this.group=this.game.add.group()}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}set_button(){const t=this.group.create(this.x-24,136,"buttons",this.action);this.sprites.push(t)}set_info(){const t="item"===this.action?this.data.info.items_list[this.item_obj.key_name].name:this.ability_name,e=this.base_window.set_text_in_position(t,this.ability_name_x,8);if(this.texts.push(e),this.element&&this.element!==a.elements.NO_ELEMENT&&!["summon","item"].includes(this.action)){const t=this.base_window.create_at_group(this.star_x,9,this.element+"_star");this.window_sprites.push(t)}if(this.icon_sprite_sheet&&"item"!==this.action){const t=this.base_window.create_at_group(9,5,this.icon_sprite_sheet,void 0,this.ability_key_name);this.window_sprites.push(t)}if("psynergy"===this.action){const t=this.base_window.set_text_in_position(this.quantities[0].toString(),123,8,!0);this.texts.push(t);const e=this.base_window.set_text_in_position("PP",96,8);this.texts.push(e)}else if("summon"===this.action){const t=_.pickBy(this.data.info.summons_list[this.ability_key_name].requirements,t=>t);let e=0;a.ordered_elements.forEach(i=>{if(!(i in t))return;const s=0===e?97:113,n=this.base_window.create_at_group(s,9,i+"_star");this.window_sprites.push(n);const a=this.base_window.set_text_in_position(t[i].toString(),s+6+1,8);this.texts.push(a),++e})}else if("item"===this.action){if(this.icon_group=this.game.add.group(),this.icon_group.create(0,0,this.icon_sprite_sheet,this.item_obj.key_name).anchor.setTo(.5,.5),this.item_obj.equipped&&this.icon_group.create(0,0,"equipped"),this.item_obj.quantity>1){let t=this.game.add.bitmapText(0,0,"gs-item-bmp-font",this.item_obj.quantity.toString());this.icon_group.add(t)}this.base_window.add_sprite_to_group(this.icon_group),this.icon_group.x=9+(n.ICON_WIDTH>>1),this.icon_group.y=5+(n.ICON_HEIGHT>>1),this.window_sprites.push(this.icon_group)}}open(t,e,i,s,n,a){switch(this.action=t,this.ability_name=e,this.element=i,this.ability_key_name=s,this.quantities=n,this.action){case"attack":this.width=84,this.x=88,this.ability_name_x=24;break;case"psynergy":this.width=140,this.x=64,this.ability_name_x=24,this.star_x=129,this.icon_sprite_sheet="abilities_icons";break;case"djinni":this.width=76,this.x=88,this.ability_name_x=24,this.star_x=9;break;case"summon":this.width=132,this.x=80,this.ability_name_x=24,this.icon_sprite_sheet="abilities_icons";break;case"item":this.width=124,this.x=72,this.ability_name_x=32,this.icon_sprite_sheet="items_icons",this.item_obj=a}this.base_window.update_size({width:this.width}),this.base_window.update_position({x:this.x}),this.base_window.show(void 0,!1),this.sprites=[],this.window_sprites=[],this.texts=[],this.update_position(),this.set_button(),this.set_info(),this.window_open=!0}close(){this.sprites.forEach(t=>{t.destroy()}),this.texts.forEach(t=>{this.base_window.remove_text(t)}),this.window_sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)}),this.sprites=[],this.window_sprites=[],this.texts=[],this.base_window.close(void 0,!1),this.icon_group&&(this.icon_group.destroy(),this.icon_group=null),this.window_open=!1,this.element=void 0,this.icon_sprite_sheet=void 0}destroy(){this.base_window.destroy(!1),this.group.destroy(),this.icon_group&&this.icon_group.destroy()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.EnemyAI=void 0;const s=i(5);e.EnemyAI=class{static roll_action(t,e,i){let n=!1;return{key_name:"attack",targets:e.map((t,e)=>{let i=!t.has_permanent_status(s.permanent_status.DOWNED);const a={magnitude:i&&!n?1:null,target:{instance:i&&!n?t:null},type:"attack"};return i&&!n&&(n=!0),a})}}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleFormulas=e.DELUSION_MISS_CHANCE=e.EVASION_CHANCE=e.CRITICAL_CHANCE=void 0;const s=i(0),n=i(5),a=i(1),_=i(3);e.CRITICAL_CHANCE=1/32,e.EVASION_CHANCE=1/32,e.DELUSION_MISS_CHANCE=.66;e.BattleFormulas=class{static player_turn_speed(t,e=!1,i=!1){return(t+(t*_.random(0,65535)>>20))*(i?.5:1)+(e?1e4:0)}static enemy_turn_speed(t,e,i,s=!1){const n=s?1e4:0;if(1===e)return t+n;if(2===i)return(t>>1)+n;if(3===i)switch(e){case 2:return 3*t/4+n;case 3:return(t>>1)+n}return(t>>1)+n}static base_damage(t,e){const i=t.atk-e.def;return(i<0?0:i)/2}static special_physical_attack(t,e,i,s){return this.base_damage(t,e)*i+s}static power_multiplier(t,e,i,n=!0){let o=100,r=100;if(i!==s.elements.NO_ELEMENT){if(r=e[i+"_resist_current"],void 0!==t){o=t[i+"_power_current"]}}return 1+_.clamp(o-r,a.ELEM_ATTR_MIN,a.ELEM_ATTR_MAX)/(n?200:400)}static physical_attack(t,e,i,s,n){return this.special_physical_attack(t,e,i,s)*this.power_multiplier(t,e,n,!1)}static psynergy_damage(t,e,i,s){return i+this.power_multiplier(t,e,s,!0)}static item_damage(t,e,i){return e+this.power_multiplier(void 0,t,i,!0)}static heal_ability(t,e,i){let n=100;if(i!==s.elements.NO_ELEMENT){n=t[i+"_power_current"]}return e*n/100}static summon_damage(t,e,i){return e+t.max_hp*i*.03}static ailment_success(t,e,i,s,n,a){const _=n+"_level_current";return 3*(t[_]-e[_]-(e.luk>>1))/100+i+(a=void 0===a?0:a)*s>=Math.random()}static ailment_recovery(t,e,i){return 655*(3*t.luk-5*e+100*i)>=_.random(0,65535)}static battle_poison_damage(t,e){let i=0;switch(e){case n.permanent_status.POISON:i=1;break;case n.permanent_status.VENOM:i=2}return i*t.max_hp/10|0}static summon_power(t){return 5*((t=_.clamp(t,0,4))*t+t)}}},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function _(t){try{r(s.next(t))}catch(t){a(t)}}function o(t){try{r(s.throw(t))}catch(t){a(t)}}function r(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(_,o)}r((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.BattleAnimationManager=void 0;const n=i(65);e.BattleAnimationManager=class{constructor(t,e){this.game=t,this.data=e,this.animations={},this.not_available=new Set,this.render_function=null}load_animation(t){return s(this,void 0,void 0,(function*(){if(t in this.animations||this.not_available.has(t)||"no_animation"===t)return;const e=t+"_battle_animation",i=t+"_battle_recipe",s=this.game.load.atlasJSONHash(e,`assets/images/abilities_animations/${t}.png`,`assets/images/abilities_animations/${t}.json`),a=this.game.load.json(i,`assets/dbs/abilities_animations/${t}_db.json`);let _,o=!0;const r=new Promise(t=>{_=t});let h;s.onFileComplete.addOnce((t,e,i)=>{o=o&&i,_()});const c=new Promise(t=>{h=t});let l;a.onFileComplete.addOnce((t,e,i)=>{o=o&&i,h()});const d=new Promise(t=>l=t);if(this.game.load.onLoadComplete.addOnce(l),this.game.load.start(),yield Promise.all([r,c,d]),o){const e=this.game.cache.getJSON(t+"_battle_recipe");this.animations[t]=new n.BattleAnimation(this.game,this.data,e.key_name,e.sprites,e.x_sequence,e.y_sequence,e.x_ellipse_axis_factor_sequence,e.y_ellipse_axis_factor_sequence,e.x_scale_sequence,e.y_scale_sequence,e.x_anchor_sequence,e.y_anchor_sequence,e.alpha_sequence,e.rotation_sequence,e.stage_angle_sequence,e.hue_angle_sequence,e.tint_sequence,e.grayscale_sequence,e.colorize_sequence,e.custom_filter_sequence,e.play_sequence,e.set_frame_sequence,e.blend_mode_sequence,e.particles_sequence,e.is_party_animation)}else this.not_available.add(t)}))}animation_available(t){return t in this.animations}play(t,e,i,n,a,_){return s(this,void 0,void 0,(function*(){if(!(t in this.animations))return;const s=t+"_battle_animation";let o;this.animations[t].initialize(s,e,i,n,a,_.battle_group,_.camera_angle,[_.battle_bg,_.battle_bg2]);const r=new Promise(t=>{o=t});this.render_function=this.animations[t].render.bind(this.animations[t]),this.animations[t].play(o),yield r,this.render_function=null}))}render(){this.render_function&&this.render_function()}destroy(){for(let t in this.animations)this.game.cache.removeTextureAtlas(t+"_battle_animation"),this.game.cache.removeJSON(t+"_battle_recipe")}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleAnimation=void 0;const s=i(1),n=i(0),a=i(25),_=i(3);var o;!function(t){t.RECTANGLE="rectangle",t.POINT="point",t.LINE="line",t.ELLIPSE="ellipse",t.CIRCLE="circle"}(o||(o={}));class r{constructor(t,e,i,s,n,a,_,o,r,h,c,l,d,u,p,m,g,y,w,f,b,v,E,x,T){this.x_sequence=[],this.y_sequence=[],this.x_ellipse_axis_factor_sequence=[],this.y_ellipse_axis_factor_sequence=[],this.x_scale_sequence=[],this.y_scale_sequence=[],this.x_anchor_sequence=[],this.y_anchor_sequence=[],this.alpha_sequence=[],this.rotation_sequence=[],this.stage_angle_sequence=[],this.hue_angle_sequence=[],this.tint_sequence=[],this.grayscale_sequence=[],this.colorize_sequence=[],this.custom_filter_sequence=[],this.play_sequence=[],this.set_frame_sequence=[],this.blend_mode_sequence=[],this.game=t,this.data=e,this.key_name=i,this.sprites_keys=s,this.x_sequence=void 0===n?[]:n,this.y_sequence=void 0===a?[]:a,this.x_ellipse_axis_factor_sequence=void 0===_?[]:_,this.y_ellipse_axis_factor_sequence=void 0===o?[]:o,this.x_scale_sequence=void 0===r?[]:r,this.y_scale_sequence=void 0===h?[]:h,this.x_anchor_sequence=void 0===c?[]:c,this.y_anchor_sequence=void 0===l?[]:l,this.alpha_sequence=void 0===d?[]:d,this.rotation_sequence=void 0===u?[]:u,this.stage_angle_sequence=void 0===p?[]:p,this.hue_angle_sequence=void 0===m?[]:m,this.tint_sequence=void 0===g?[]:g,this.grayscale_sequence=void 0===y?[]:y,this.colorize_sequence=void 0===w?[]:w,this.custom_filter_sequence=void 0===f?[]:f,this.play_sequence=void 0===b?[]:b,this.set_frame_sequence=void 0===v?[]:v,this.blend_mode_sequence=void 0===E?[]:E,this.particles_sequence=void 0===x?[]:x,this.is_party_animation=T,this.running=!1,this.render_callbacks={}}initialize(t,e,i,n,a,_,o,r){this.sprites=[],this.sprites_prev_properties={},this.stage_prev_value=void 0,this.x0=this.game.camera.x,this.y0=this.game.camera.y,this.caster_sprite=e,this.targets_sprites=i,this.background_sprites=r,this.group_caster=n,this.group_enemy=a,this.super_group=_,this.stage_camera=o,this.trails_objs=[],this.trails_bmps=[],_.getChildIndex(n)<_.getChildIndex(a)?(this.back_group=n,this.front_group=a):(this.back_group=a,this.front_group=n);for(let e=0;e<this.sprites_keys.length;++e){const i=this.sprites_keys[e];let n;if(i.trails){const t=this.game.make.bitmapData(s.GAME_WIDTH,s.GAME_HEIGHT);t.fill(0,0,0,1),t.trail_factor=i.trails_factor,n=this.game.make.image(0,0,t),n.blendMode=Phaser.blendModes.SCREEN,this.trails_bmps.push(t),this.trails_objs.push(n)}if(!i.per_target){const e=i.count?i.count:1;for(let s=0;s<e;++s){const e=this.game.add.sprite(this.x0,this.y0,t);"over"===i.position?(n&&_.addChild(n),_.addChild(e)):"between"===i.position?(n&&_.addChildAt(n,_.getChildIndex(this.front_group)),_.addChildAt(e,_.getChildIndex(this.front_group))):"behind"===i.position&&(n&&_.addChildAt(n,_.getChildIndex(this.back_group)),_.addChildAt(e,_.getChildIndex(this.back_group)));const s=Phaser.Animation.generateFrameNames(i.key_name+"/",0,e.animations.frameTotal,"",3);e.animations.add(i.key_name,s),e.animations.frameName=s[0],e.data.battle_index=this.sprites.length,e.data.trail_image=n,e.data.ignore_trim=!0,this.sprites.push(e)}}}this.set_filters()}set_filters(){this.caster_filter=this.game.add.filter("ColorFilters"),this.targets_filter=this.game.add.filter("ColorFilters"),this.background_filter=this.game.add.filter("ColorFilters"),this.sprites_filters=[],this.caster_sprite.filters=[this.caster_filter],this.targets_sprites.forEach(t=>{t.filters=[this.targets_filter]}),this.background_sprites.forEach(t=>{t.filters=[this.background_filter]}),this.sprites.forEach((t,e)=>{this.sprites_filters.push(this.game.add.filter("ColorFilters")),t.filters=[this.sprites_filters[e]]})}play(t){this.running=!0,this.promises=[],this.play_number_property_sequence(this.x_sequence,"x"),this.play_number_property_sequence(this.y_sequence,"y"),this.play_number_property_sequence(this.x_ellipse_axis_factor_sequence,"ellipses_semi_major"),this.play_number_property_sequence(this.y_ellipse_axis_factor_sequence,"ellipses_semi_minor"),this.play_number_property_sequence(this.alpha_sequence,"alpha"),this.play_number_property_sequence(this.rotation_sequence,"rotation"),this.play_number_property_sequence(this.x_scale_sequence,"x","scale"),this.play_number_property_sequence(this.y_scale_sequence,"y","scale"),this.play_number_property_sequence(this.x_anchor_sequence,"x","anchor"),this.play_number_property_sequence(this.y_anchor_sequence,"y","anchor"),this.play_number_property_sequence(this.hue_angle_sequence,"hue_adjust","filter"),this.play_number_property_sequence(this.grayscale_sequence,"gray","filter"),this.play_sprite_sequence(),this.play_blend_modes(),this.play_filter_property(this.tint_sequence,"tint"),this.play_filter_property(this.colorize_sequence,"colorize","colorize_intensity"),this.play_filter_property(this.custom_filter_sequence),this.play_stage_angle_sequence(),this.play_particles(),this.unmount_animation(t)}unmount_animation(t){Promise.all(this.promises).then(()=>{this.caster_filter=null,this.targets_filter=null,this.background_filter=null,this.sprites_filters=[],this.caster_sprite.filters=void 0,this.targets_sprites.forEach(t=>{t.filters=void 0}),this.background_sprites.forEach(t=>{t.filters=void 0}),this.sprites.forEach(t=>{t.destroy()}),this.trails_objs.forEach(t=>{t.destroy(!0)}),this.trails_bmps.forEach(t=>{t.destroy()}),this.running=!1,void 0!==t&&t()})}get_sprites(t,e){return e?"background"===t.sprite_index?"filter"===e?[this.background_filter]:this.background_sprites.forEach(t=>t[e]):"caster"===t.sprite_index?"filter"===e?[this.caster_filter]:[this.caster_sprite[e]]:"targets"===t.sprite_index?"filter"===e?[this.targets_filter]:this.targets_sprites.forEach(t=>t[e]):"filter"===e?Array.isArray(t.sprite_index)?t.sprite_index.map(t=>this.sprites_filters[t]):[this.sprites_filters[t.sprite_index]]:Array.isArray(t.sprite_index)?t.sprite_index.map(t=>this.sprites[t][e]):[this.sprites[t.sprite_index][e]]:"background"===t.sprite_index?this.background_sprites:"caster"===t.sprite_index?[this.caster_sprite]:"targets"===t.sprite_index?this.targets_sprites:Array.isArray(t.sprite_index)?t.sprite_index.map(t=>this.sprites[t]):[this.sprites[t.sprite_index]]}play_number_property_sequence(t,e,i){let a={},_={};for(let o=0;o<t.length;++o){const h=t[o];h.sprite_index in _||(_[h.sprite_index]=!0),h.sprite_index in a&&(_[h.sprite_index]=!1);let c=this.get_sprites(h,i),l=!1;c.forEach((t,i)=>{let o;o=t.data&&t.data.hasOwnProperty("battle_index")?t.key+"_"+t.data.battle_index:t.key+"_"+i,void 0===this.sprites_prev_properties[o]&&(this.sprites_prev_properties[o]={}),void 0===this.sprites_prev_properties[o][e]&&(this.sprites_prev_properties[o][e]=t[e]);const c=Array.isArray(h.to)?h.to[i]:h.to;let d=c;if("target"===c){const t=Array.isArray(h.shift)?h.shift[i]:h.shift;d=this.targets_sprites[this.targets_sprites.length>>1][e]+(void 0===t?0:t)}if(["rotation","hue_adjust"].includes(e)&&(this.sprites_prev_properties[o][e]=n.range_360(this.sprites_prev_properties[o][e]),t[e]=this.sprites_prev_properties[o][e],d=r.get_angle_by_direction(this.sprites_prev_properties[o][e],c,h.direction,"rotation"===e),Math.abs(this.sprites_prev_properties[o][e]-d)>s.degree360&&(d-=Math.sign(d)*s.degree360)),d=h.is_absolute?d:this.sprites_prev_properties[o][e]+c,this.sprites_prev_properties[o][e]=d,"initial"===h.tween)t[e]=d;else{h.sprite_index in a||(a[h.sprite_index]={[i]:[]}),i in a[h.sprite_index]||(a[h.sprite_index][i]=[]);const s=Array.isArray(h.start_delay)?h.start_delay[i]:h.start_delay;if("instantly"===h.duration){let i;if(!l){let t=new Promise(t=>{i=t});this.promises.push(t),l=!0}this.game.time.events.add(s,()=>{t[e]=d,h.force_stage_update&&this.stage_camera.update(),h.is_absolute&&["rotation","hue_adjust"].includes(e)&&(t[e]=n.range_360(t[e])),void 0!==i&&i()})}else{const o=this.game.add.tween(t).to({[e]:d},Array.isArray(h.duration)?h.duration[i]:h.duration,h.tween.split(".").reduce((t,e)=>t[e],Phaser.Easing),_[h.sprite_index],s,0,void 0!==h.yoyo&&h.yoyo);if(!l){let i,s=new Promise(t=>{i=t});this.promises.push(s),o.onStart.addOnce(()=>{h.force_stage_update&&(this.stage_camera.spining=!0)}),o.onComplete.addOnce(()=>{h.is_absolute&&["rotation","hue_adjust"].includes(e)&&(t[e]=n.range_360(t[e])),i(),h.force_stage_update&&(this.stage_camera.spining=!1)}),l=!0}a[h.sprite_index][i].length&&a[h.sprite_index][i][a[h.sprite_index][i].length-1].chain(o),a[h.sprite_index][i].push(o)}}})}}play_sprite_sequence(){for(let t=0;t<this.play_sequence.length;++t){const e=this.play_sequence[t];this.get_sprites(e).forEach((t,i)=>{let s,n=new Promise(t=>{s=t});this.promises.push(n);const a=Array.isArray(e.start_delay)?e.start_delay[i]:e.start_delay;this.game.time.events.add(a,()=>{const i=t.animations.getAnimation(e.animation_key);i.reversed=void 0!==e.reverse&&e.reverse,i.stop(!0),t.animations.play(e.animation_key,e.frame_rate,e.repeat),e.wait?t.animations.currentAnim.onComplete.addOnce(()=>{e.hide_on_complete&&(t.alpha=0),s()}):s()})})}}play_blend_modes(){for(let t=0;t<this.blend_mode_sequence.length;++t){const e=this.blend_mode_sequence[t];this.get_sprites(e).forEach((t,i)=>{let s,n=new Promise(t=>{s=t});this.promises.push(n);const a=Array.isArray(e.start_delay)?e.start_delay[i]:e.start_delay;this.game.time.events.add(a,()=>{switch(e.mode){case"screen":t.blendMode=PIXI.blendModes.SCREEN;break;case"normal":t.blendMode=PIXI.blendModes.NORMAL}}),s()})}}play_filter_property(t,e,...i){for(let s=0;s<t.length;++s){const n=t[s];this.get_sprites(n).forEach((t,s)=>{let a,_=new Promise(t=>{a=t});this.promises.push(_);const o=Array.isArray(n.start_delay)?n.start_delay[s]:n.start_delay;this.game.time.events.add(o,()=>{const s=void 0!==n.filter?n.filter:e;t.filters[0][s]=n.value,i.forEach(e=>{t.filters[0][e]=n[e]})}),a()})}}play_stage_angle_sequence(){let t=[];for(let e=0;e<this.stage_angle_sequence.length;++e){const i=this.stage_angle_sequence[e];let _;if(void 0===this.stage_prev_value&&(this.stage_prev_value=this.stage_camera.rad),"default"===i.to?_=a.DEFAULT_POS_ANGLE:i.is_absolute?(this.stage_prev_value=n.range_360(this.stage_prev_value),this.stage_camera.rad=this.stage_prev_value,_=r.get_angle_by_direction(this.stage_prev_value,i.to,i.direction,!0),Math.abs(this.stage_prev_value-_)>s.degree360&&(_-=Math.sign(_)*s.degree360)):_=this.stage_prev_value+i.to,this.stage_prev_value=_,"initial"===i.tween)i.is_absolute?this.stage_camera.rad=_:this.stage_camera.rad+=_;else{const e=this.game.add.tween(this.stage_camera).to({rad:_},i.duration,i.tween.split(".").reduce((t,e)=>t[e],Phaser.Easing),0===t.length,i.start_delay);let s,a=new Promise(t=>{s=t});this.promises.push(a),e.onStart.addOnce(()=>{this.stage_camera.spining=!0}),e.onComplete.addOnce(()=>{i.is_absolute&&(this.stage_camera.rad=n.range_360(this.stage_camera.rad)),this.stage_camera.spining=!1,s()}),t.length&&t[t.length-1].chain(e),t.push(e)}}}get_sprite_xy_pos(t,e,i,s){return"caster"===t?t=this.caster_sprite.x:"targets"===t&&_.mean(this.targets_sprites.map(t=>t.x)),"caster"===e?e=this.caster_sprite.y:"targets"===e&&_.mean(this.targets_sprites.map(t=>t.y)),{x:t+=i||0,y:e+=s||0}}play_particles(){var t;for(let e=0;e<this.particles_sequence.length;++e){let i;const n=new Promise(t=>{i=t});this.promises.push(n);const a=this.particles_sequence[e],r={};for(let t in a.zones){const e=a.zones[t];let i;switch(e.type){case o.CIRCLE:i=this.data.particle_manager.createCircleZone(e.radius);break;case o.ELLIPSE:i=this.data.particle_manager.createEllipseZone(e.width,e.height);break;case o.LINE:i=this.data.particle_manager.createLineZone(e.points[0].x,e.points[0].y,e.points[1].x,e.points[1].y);break;case o.POINT:i=this.data.particle_manager.createPointZone(e.points[0].x,e.points[0].y);break;case o.RECTANGLE:i=this.data.particle_manager.createRectangleZone(e.width,e.height)}r[t]=i}for(let e in a.data){const i=_.cloneDeep(a.data[e]);void 0!==(null===(t=i.target)||void 0===t?void 0:t.zone_key)&&(i.target.zone=r[i.target.zone_key]),this.data.particle_manager.addData(e,i)}const h=[],c=[];a.emitters.forEach((t,i)=>{var n,_;const o=this.data.particle_manager.createEmitter(t.render_type,void 0,void 0,t.render_white_core);if(o.force.x=void 0===(null===(n=t.force)||void 0===n?void 0:n.x)?o.force.x:t.force.x,o.force.y=void 0===(null===(_=t.force)||void 0===_?void 0:_.y)?o.force.y:t.force.y,o.renderer.autoClear=!t.show_trails,t.show_trails||t.pixel_reducing_factor){const s=`advanced_particles_sequence_${e}_${i}`;this.render_callbacks[s]=()=>{"pixel"===t.render_type&&(t.show_trails&&o.renderer.clear(t.trails_clear_factor),void 0!==t.pixel_reducing_factor&&(o._delay.waiting||(o.renderer.pixelSize-=t.pixel_reducing_factor)))},h.push(s)}"pixel"===t.render_type&&(o.renderer.pixelSize=void 0===t.pixel_size?2:t.pixel_size,o.renderer.useRect=void 0!==t.pixel_is_rect&&t.pixel_is_rect,"screen"===t.particles_display_blend_mode&&(o.renderer.display.blendMode=Phaser.blendModes.SCREEN),o.renderer.resize(s.GAME_WIDTH<<1,s.GAME_HEIGHT));o.addToWorld(this.super_group).forEach(e=>{e&&("over"===t.position?this.super_group.addChild(e):"between"===t.position?this.super_group.setChildIndex(e,this.super_group.getChildIndex(this.front_group)):"behind"===t.position&&this.super_group.setChildIndex(e,this.super_group.getChildIndex(this.back_group)))}),t.gravity_well&&o.createGravityWell(t.gravity_well.x,t.gravity_well.y,t.gravity_well.power,t.gravity_well.epsilon,t.gravity_well.gravity);const{x:l,y:d}=this.get_sprite_xy_pos(t.x,t.y,t.shift_x,t.shift_y);if(o.emit(t.emitter_data_key,l,d,Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},void 0!==t.total&&{total:t.total}),void 0!==t.repeat&&{repeat:t.repeat}),void 0!==t.frequency&&{frequency:t.frequency}),void 0!==t.x_step&&{xStep:t.x_step}),void 0!==t.y_step&&{yStep:t.y_step}),void 0!==t.delay&&{delay:t.delay}),void 0!==t.zone_key&&{zone:r[t.zone_key]}),void 0!==t.random_in_zone&&{random:t.random_in_zone}),void 0!==t.spacing&&{spacing:t.spacing}),void 0!==t.radiate&&{radiate:t.radiate}),void 0!==t.radiateFrom&&{radiateFrom:t.radiateFrom})),void 0!==t.animation){const e=a.data[t.emitter_data_key].image,i=this.data.info.misc_sprite_base_list[e],s=i.getAnimationKey(e,t.animation.animation_key);o.forEach(t=>{i.setAnimation(t,e)},this),o.onEmit=new Phaser.Signal,o.onEmit.add((e,i)=>{i.animations.play(s,t.animation.frame_rate,t.animation.loop)})}c.push(o)}),this.game.time.events.add(a.emission_finish,()=>{h.forEach(t=>{delete this.render_callbacks[t]}),c.forEach(t=>{this.data.particle_manager.removeEmitter(t),t.onEmit&&t.onEmit.removeAll(),t.destroy()});for(let t in a.data)this.data.particle_manager.clearData(t);i()})}}render(){this.trails_bmps.forEach(t=>t.fill(0,0,0,t.trail_factor)),this.sprites.forEach(t=>{if(!t.data.trail_image)return;t.data.trail_image.key.draw(t)});for(let t in this.render_callbacks)this.render_callbacks[t]()}static get_angle_by_direction(t,e,i,a=!1){let _;if(_=a?(e=s.degree360-e)<t?"counter_clockwise":"clockwise":e>t?"counter_clockwise":"clockwise",_===i)return e;const o=e%s.degree360-t%s.degree360,r=Math.sign(o)*s.degree360-o,h=t%s.degree360-r;if("closest"===i){let i,a;return h>0?(a=h-n.range_360(t),i=s.degree360-a):(i=e-n.range_360(t),a=s.degree360-i),Math.abs(i)<Math.abs(a)?e:h}return h}}e.BattleAnimation=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.load_databases=void 0;const s=i(3);e.load_databases=function(t,e){e.init_db=t.cache.getJSON("init_db"),e.npc_db=t.cache.getJSON("npc_db"),e.interactable_objects_db=t.cache.getJSON("interactable_objects_db"),e.misc_animations_db=t.cache.getJSON("misc_animations_db"),e.classes_db=t.cache.getJSON("classes_db"),e.abilities_db=t.cache.getJSON("abilities_db"),e.items_db=t.cache.getJSON("items_db"),e.djinni_db=t.cache.getJSON("djinni_db"),e.enemies_db=t.cache.getJSON("enemies_db"),e.enemies_parties_db=t.cache.getJSON("enemies_parties_db"),e.maps_db=t.cache.getJSON("maps_db"),e.main_chars_db=t.cache.getJSON("main_chars_db"),e.summons_db=t.cache.getJSON("summons_db"),e.shopkeep_dialog_db=t.cache.getJSON("shopkeep_dialog_db"),e.shops_db=t.cache.getJSON("shops_db"),e.shopkeep_dialog_db=s.mapKeys(e.shopkeep_dialog_db,t=>t.key_name),e.interactable_objects_db=s.mapKeys(e.interactable_objects_db,t=>t.key_name),e.enemies_parties_db=s.mapKeys(e.enemies_parties_db,t=>t.key_name),e.npc_db=s.mapKeys(e.npc_db,t=>t.key_name)}},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function _(t){try{r(s.next(t))}catch(t){a(t)}}function o(t){try{r(s.throw(t))}catch(t){a(t)}}function r(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(_,o)}r((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_game_data=void 0;const n=i(68),a=i(69),_=i(75),o=i(76),r=i(77),h=i(78),c=i(85),l=i(86),d=i(88),u=i(89),p=i(91);e.initialize_game_data=function(t,e){return s(this,void 0,void 0,(function*(){let i;const s=new Promise(t=>{i=t});let m;e.info.maps_list=h.initialize_maps(t,e,e.dbs.maps_db,i),yield s,e.info.classes_list=n.initialize_classes(e.dbs.classes_db);const g=new Promise(t=>{m=t});let y;e.info.enemies_list=r.initialize_enemies(t,e.dbs.enemies_db,m),yield g,e.info.djinni_list=o.initialize_djinni(e.dbs.djinni_db);const w=new Promise(t=>{y=t});let f;e.info.djinni_sprites=o.initialize_djinni_sprites(t,y),yield w;const b=new Promise(t=>{f=t});let v;e.info.abilities_list=a.initialize_abilities(t,e.dbs.abilities_db,f),yield b;const E=new Promise(t=>{v=t});let x;e.info.items_list=_.initialize_items(t,e.dbs.items_db,v),yield E,e.info.party_data={members:[],coins:e.dbs.init_db.coins,game_tickets:{coins_remaining:300,tickets_bought:0}};const T=new Promise(t=>{x=t});let A;e.info.main_char_list=n.initialize_main_chars(t,e.info,e.dbs.main_chars_db,e.dbs.classes_db,x),yield T;const S=new Promise(t=>{A=t});let I;e.info.misc_sprite_base_list=c.initialize_misc_data(t,e.dbs.misc_animations_db,A),yield S;const k=new Promise(t=>{I=t});let N;e.info.iter_objs_sprite_base_list=d.initialize_interactable_objs_data(t,e.dbs.interactable_objects_db,I),yield k,e.info.shops_list=l.initialize_shops(e.dbs.shops_db),e.info.summons_list=u.initialize_summons(e.dbs.summons_db),e.info.field_abilities_list=a.initialize_field_abilities(t,e);const R=new Promise(t=>{N=t}),P=t.cache.getJSON("se_data");p.initialize_se(t,e,P,N),yield R}))}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_main_chars=e.initialize_classes=void 0;const s=i(27),n=i(12),a=i(14);e.initialize_classes=function(t){let e={};for(let i=0;i<t.classes.length;++i){const n=t.classes[i];e[n.key_name]=new s.Classes(n.key_name,n.name,n.required_venus_level,n.required_mercury_level,n.required_mars_level,n.required_jupiter_level,n.hp_boost,n.pp_boost,n.atk_boost,n.def_boost,n.agi_boost,n.luk_boost,n.ability_level_pairs,n.class_type,n.vulnerabilities)}return e},e.initialize_main_chars=function(t,e,i,s,_){let o=[],r={};for(let _=0;_<i.length;++_){const h=i[_],c=new a.SpriteBase(h.key_name,h.actions.map(t=>t.key));r[h.key_name]=new n.MainChar(h.key_name,e,c,h.walk_speed,h.dash_speed,h.climb_speed,h.name,h.hp_curve,h.pp_curve,h.atk_curve,h.def_curve,h.agi_curve,h.luk_curve,h.exp_curve,h.starting_level,s.class_table,h.battle_scale,h.venus_level_base,h.mercury_level_base,h.mars_level_base,h.jupiter_level_base,h.venus_power_base,h.mercury_power_base,h.mars_power_base,h.jupiter_power_base,h.venus_resist_base,h.mercury_resist_base,h.mars_resist_base,h.jupiter_resist_base,h.innate_abilities,h.in_party,h.djinni,h.items,h.battle_animations_variations),h.in_party&&e.party_data.members.push(r[h.key_name]);for(let t=0;t<h.actions.length;++t){const e=h.actions[t];c.setActionSpritesheet(e.key,e.spritesheet_img,e.spritesheet),c.setActionDirections(e.key,e.directions,e.directions_frames_number),c.setActionFrameRate(e.key,e.frame_rate),c.setActionLoop(e.key,e.loop)}let l;c.generateAllFrames();const d=new Promise(t=>{l=t});o.push(d),c.loadSpritesheets(t,!0,l)}return Promise.all(o).then(_),r}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_field_abilities=e.initialize_abilities=void 0;const s=i(13),n=i(70),a=i(73),_=i(74);e.initialize_abilities=function(t,e,i){let n={};for(let t=0;t<e.length;++t){const i=e[t];n[i.key_name]=new s.Ability(i.key_name,i.name,i.description,i.type,i.element,i.battle_target,i.range,i.pp_cost,i.ability_power,i.effects_outside_battle,i.is_battle_ability,i.is_field_psynergy,i.effects,i.ability_category,i.battle_animation_key,i.priority_move,i.has_critical,i.crit_mult_factor,i.can_switch_to_unleash,i.can_be_evaded,i.use_diminishing_ratio,i.msg_type,i.affects_pp,i.has_animation_variation)}return t.load.atlasJSONHash("abilities_icons","assets/images/icons/abilities/abilities_icons.png","assets/images/icons/abilities/abilities_icons.json").onLoadComplete.addOnce(i),t.load.start(),n},e.initialize_field_abilities=function(t,e){return{move:new n.MoveFieldPsynergy(t,e),frost:new a.FrostFieldPsynergy(t,e),growth:new _.GrowthFieldPsynergy(t,e)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MoveFieldPsynergy=void 0;const s=i(1),n=i(22),a=i(0),_=i(20);class o extends _.FieldAbilities{constructor(t,e){super(t,e,o.ABILITY_KEY_NAME,o.MOVE_MAX_RANGE,o.ACTION_KEY_NAME,!0),this.set_bootstrap_method(this.init_move.bind(this)),this.set_cast_finisher_method(this.unset_hue_shifter.bind(this)),this.hand_sprite_base=this.data.info.misc_sprite_base_list[o.MOVE_HAND_KEY_NAME];const i=this.hand_sprite_base.getActionKey(o.MOVE_HAND_KEY_NAME);this.hand_sprite=this.game.add.sprite(0,0,i),this.hand_sprite.visible=!1,this.hand_sprite_base.setAnimation(this.hand_sprite,o.MOVE_HAND_KEY_NAME),this.emitter=null,this.final_emitter=null}set_controls(){let t=[{key:this.data.gamepad.LEFT,on_down:()=>{this.controllable_char.trying_to_push_direction=a.directions.left,this.fire_push()}},{key:this.data.gamepad.RIGHT,on_down:()=>{this.controllable_char.trying_to_push_direction=a.directions.right,this.fire_push()}},{key:this.data.gamepad.UP,on_down:()=>{this.controllable_char.trying_to_push_direction=a.directions.up,this.fire_push()}},{key:this.data.gamepad.DOWN,on_down:()=>{this.controllable_char.trying_to_push_direction=a.directions.down,this.fire_push()}},{key:this.data.gamepad.B,on_down:()=>{this.finish_hand(),this.unset_hero_cast_anim()}}];this.data.control_manager.set_control(t)}fire_push(){if(this.data.map.collision_layer===this.target_object.base_collision_layer){let t=this.target_object.get_current_position(this.data.map);switch(this.controllable_char.trying_to_push_direction){case a.directions.up:t.y-=1;break;case a.directions.down:t.y+=1;break;case a.directions.left:t.x-=1;break;case a.directions.right:t.x+=1}!this.target_object.position_allowed(t.x,t.y)||this.controllable_char.tile_x_pos===t.x&&this.controllable_char.tile_y_pos===t.y||(this.data.control_manager.reset(),n.target_only_push(this.game,this.data,this.target_object,(t,e)=>{const i=this.hand_sprite.x+t,n=this.hand_sprite.y+e;this.game.add.tween(this.hand_sprite).to({x:i,y:n},s.PUSH_TIME,Phaser.Easing.Linear.None,!0),this.game.time.events.add(s.PUSH_TIME>>1,()=>{let t=!1;if([a.directions.up,a.directions.down].includes(this.cast_direction)&&[a.directions.left,a.directions.right].includes(this.controllable_char.trying_to_push_direction)?(this.cast_direction=a.join_directions(this.cast_direction,this.controllable_char.trying_to_push_direction),t=!0):[a.directions.up,a.directions.down].includes(this.controllable_char.trying_to_push_direction)&&[a.directions.left,a.directions.right].includes(this.cast_direction)&&(this.cast_direction=a.join_directions(this.controllable_char.trying_to_push_direction,this.cast_direction),t=!0),!t)return;this.controllable_char.set_direction(this.cast_direction),this.controllable_char.sprite.animations.stop();const e=a.reverse_directions[this.cast_direction],i=this.controllable_char.sprite_info.getAnimationKey(a.base_actions.CAST,e);this.controllable_char.sprite.animations.play(i),this.controllable_char.sprite.animations.currentAnim.stop();const s=this.controllable_char.sprite_info.getFrameName(a.base_actions.CAST,e,1);this.controllable_char.sprite.animations.frameName=s})},()=>{Math.pow(this.controllable_char.sprite.body.x-this.target_object.sprite.body.x,2)+Math.pow(this.controllable_char.sprite.body.y-this.target_object.sprite.body.y,2)<=Math.pow(s.HERO_BODY_RADIUS+this.data.dbs.interactable_objects_db[this.target_object.key_name].body_radius,2)&&(this.controllable_char.sprite.body.x=(this.controllable_char.tile_x_pos+.5)*this.data.map.sprite.tileWidth,this.controllable_char.sprite.body.y=(this.controllable_char.tile_y_pos+.5)*this.data.map.sprite.tileHeight,this.controllable_char.shadow.x=this.controllable_char.sprite.body.x,this.controllable_char.shadow.y=this.controllable_char.sprite.body.y),this.controllable_char.sprite.body.velocity.x=this.controllable_char.sprite.body.velocity.y=0,this.finish_hand(),this.unset_hero_cast_anim()},!1,()=>{this.data.map.sort_sprites()}))}}set_hand(){this.data.overlayer_group.add(this.hand_sprite),this.data.overlayer_group.bringToTop(this.hand_sprite),this.hand_sprite.visible=!0,this.hand_sprite.scale.setTo(1,1),this.hand_sprite.send_to_front=!0,this.hand_sprite.base_collision_layer=this.data.map.collision_layer,this.hand_sprite.animations.currentAnim.stop(!0),this.hand_sprite.frameName=this.hand_sprite_base.getFrameName(o.MOVE_HAND_KEY_NAME,a.reverse_directions[this.cast_direction],0),this.hand_sprite.anchor.x=.5,this.hand_sprite.centerX=this.controllable_char.sprite.centerX,this.hand_sprite.centerY=this.controllable_char.sprite.centerY}translate_hand(){let t=this.hand_sprite.centerX,e=this.hand_sprite.centerY;switch(this.cast_direction){case a.directions.up:this.target_found?(t=this.target_object.sprite.centerX,e=this.target_object.sprite.y):e-=o.MAX_HAND_TRANSLATE;break;case a.directions.down:this.target_found?(t=this.target_object.sprite.centerX,e=this.target_object.sprite.y-this.target_object.sprite.height+this.data.dbs.interactable_objects_db[this.target_object.key_name].body_radius):e+=o.MAX_HAND_TRANSLATE;break;case a.directions.right:this.target_found?(t=this.target_object.sprite.x-2*this.data.dbs.interactable_objects_db[this.target_object.key_name].body_radius,e=this.target_object.sprite.centerY):t+=o.MAX_HAND_TRANSLATE;break;case a.directions.left:this.target_found?(t=this.target_object.sprite.x+2*this.data.dbs.interactable_objects_db[this.target_object.key_name].body_radius,e=this.target_object.sprite.centerY):t-=o.MAX_HAND_TRANSLATE}this.data.audio.play_se("psynergy_se","psynergy_1"),this.game.add.tween(this.hand_sprite).to({centerX:t,centerY:e},200,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{const t=this.hand_sprite_base.getAnimationKey(o.MOVE_HAND_KEY_NAME,a.reverse_directions[this.cast_direction]);this.hand_sprite.animations.play(t),this.target_found?(this.target_object.sprite.filters=[this.target_object.color_filter],this.target_hueshift_timer=this.game.time.create(!1),this.target_hueshift_timer.loop(5,()=>{this.target_object.color_filter.hue_adjust=2*Math.random()*Math.PI}),this.target_hueshift_timer.start(),this.set_controls()):this.game.time.events.add(700,()=>{this.finish_hand(),this.unset_hero_cast_anim()})})}finish_hand(){this.data.control_manager.reset(),this.data.audio.play_se("psynergy_se","psynergy_4");let t=this.game.time.create(!1),e={x:1};t.loop(40,()=>{this.hand_sprite.scale.x=this.hand_sprite.scale.x>0?-e.x:e.x}),t.start();const i=this.hand_sprite.y-10;this.game.add.tween(this.hand_sprite).to({y:i},500,Phaser.Easing.Linear.None,!0),this.game.add.tween(e).to({x:0},500,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.hand_sprite.scale).to({y:0},500,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.start_final_emitter(this.hand_sprite.x,this.hand_sprite.y),this.stop_casting(),t.stop(),this.data.overlayer_group.remove(this.hand_sprite,!1),this.unset_emitter()})}set_emitter(){let t=0,e=0;switch(this.cast_direction){case a.directions.up:e=-o.MAX_HAND_TRANSLATE;break;case a.directions.down:e=o.MAX_HAND_TRANSLATE;break;case a.directions.left:t=-o.MAX_HAND_TRANSLATE;break;case a.directions.right:t=o.MAX_HAND_TRANSLATE}this.emitter=this.game.add.emitter(this.controllable_char.sprite.centerX+t,this.controllable_char.sprite.centerY+e,150),this.emitter.makeParticles("psynergy_particle"),this.emitter.minParticleSpeed.setTo(-15,-15),this.emitter.maxParticleSpeed.setTo(15,15),this.emitter.gravity=0,this.emitter.width=2*o.MOVE_MAX_RANGE,this.emitter.height=2*o.MOVE_MAX_RANGE,this.emitter.forEach(t=>{t.animations.add("vanish",null,4,!0,!1)})}start_emitter(){this.emitter.start(!1,Phaser.Timer.QUARTER,15,0),this.emitter.forEach(t=>{t.animations.play("vanish"),t.animations.currentAnim.setFrame(Math.random()*t.animations.frameTotal|0)})}unset_emitter(){this.emitter.destroy()}set_final_emitter(){this.final_emitter_particles_count=8,this.final_emitter=this.game.add.emitter(0,0,this.final_emitter_particles_count),this.final_emitter.makeParticles("psynergy_particle"),this.final_emitter.gravity=300,this.final_emitter.forEach(t=>{t.animations.add("vanish",null,4,!0,!1)})}start_final_emitter(t,e){this.data.audio.play_se("psynergy_se","psynergy_6"),this.final_emitter.x=t,this.final_emitter.y=e;const i=Phaser.Timer.QUARTER;this.final_emitter.start(!0,i,null,this.final_emitter_particles_count),this.final_emitter.forEach(t=>{t.animations.play("vanish"),t.animations.currentAnim.setFrame(Math.random()*t.animations.frameTotal|0)}),this.game.time.events.add(i,()=>{this.unset_final_emitter()})}unset_final_emitter(){this.final_emitter.destroy()}unset_hue_shifter(){this.target_found&&(this.target_object.sprite.filters=void 0,this.target_hueshift_timer.stop())}init_move(){this.set_emitter(),this.set_final_emitter(),this.search_for_target(),this.set_hand(),this.field_psynergy_window.close(),this.translate_hand(),this.start_emitter()}}e.MoveFieldPsynergy=o,o.ABILITY_KEY_NAME="move",o.ACTION_KEY_NAME="cast",o.MAX_HAND_TRANSLATE=16,o.MOVE_MAX_RANGE=26,o.MOVE_HAND_KEY_NAME="move_hand"},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function _(t){try{r(s.next(t))}catch(t){a(t)}}function o(t){try{r(s.throw(t))}catch(t){a(t)}}function r(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(_,o)}r((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.tint_map_layers=e.init_cast_aura=void 0,e.init_cast_aura=function(t,e,i,n,a,_,o){e.filters=[n];let r=[],h=!1,c=[];for(let s=0;s<2;++s){let n=i.create(0,0,"psynergy_aura"),a=i.create(0,0,"psynergy_aura");n.base_collision_layer=e.base_collision_layer,a.base_collision_layer=e.base_collision_layer,n.sort_function=()=>{i.setChildIndex(n,i.getChildIndex(e))},n.sort_function(),a.sort_function=()=>{i.setChildIndex(a,i.getChildIndex(e)+1)},a.sort_function();const _=(e.height+a.height-8)/3|0;a.anchor.setTo(.5,0),a.centerX=e.centerX,a.centerY=e.centerY+(e.height>>1)+(a.height>>1);const o=a.y;a.scale.setTo(0,0),n.anchor.setTo(.5,0),n.centerX=e.centerX,n.centerY=e.centerY+(e.height>>1)+(n.height>>1);const l=n.y;n.scale.setTo(0,0);let d=[{aura:a,initial_y:o,scale_factor:1},{aura:n,initial_y:l,scale_factor:-1}];r.push([]);for(let e=0;e<d.length;++e){let i,n=d[e].aura,a=d[e].initial_y,o=d[e].scale_factor,l=t.add.tween(n).to({y:a-_},250,Phaser.Easing.Linear.None),u=t.add.tween(n).to({y:a-2*_},250,Phaser.Easing.Linear.None),p=t.add.tween(n).to({y:a-3*_},250,Phaser.Easing.Linear.None);c.push(new Promise(t=>{i=t})),p.onComplete.add(()=>{n.y=a,h?i():(l.start(),m.start())});let m=t.add.tween(n.scale).to({x:o,y:o},375,Phaser.Easing.Quadratic.Out),g=t.add.tween(n.scale).to({x:0,y:0},375,Phaser.Easing.Quadratic.Out);r[s].push({aura:n,tween_a:l,tween_aa:m,tween_b:u,tween_c:p,tween_cc:g}),l.chain(u),u.chain(p),m.chain(g),s>0&&(m.onComplete.addOnce(()=>{r[0][e].aura.y=a,r[0][e].tween_a.start(),r[0][e].tween_aa.start()}),l.start(),m.start())}}let l=16,d=t.time.create(!1),u=t.time.create(!1);return d.loop(50,()=>{n.tint=l%2==0?[1,1,1]:[-1,-1,-1],--l,0===l&&(n.gray=.4,d.stop(),void 0!==a&&a(),u.start())}),u.loop(100,()=>{n.hue_adjust=2*Math.random()*Math.PI}),d.start(),()=>s(this,void 0,void 0,(function*(){void 0!==o&&o(),h=!0,u.stop(),d.stop(),n.tint=[-1,-1,-1],n.gray=0,n.hue_adjust=0,e.filters=void 0,yield Promise.all(c);for(let t=0;t<r.length;++t)for(let e=0;e<r[t].length;++e)r[t][e].tween_a.stop(),r[t][e].tween_aa.stop(),r[t][e].tween_b.stop(),r[t][e].tween_c.stop(),r[t][e].tween_cc.stop(),i.remove(r[t][e].aura,!0);void 0!==_&&_()}))},e.tint_map_layers=function(t,e,i,s){i.colorize_intensity=0,i.gray=0,i.colorize=Math.random();for(let t=0;t<e.layers.length;++t)e.layers[t].sprite.filters=[i];return t.add.tween(i).to({colorize_intensity:.4,gray:1},Phaser.Timer.QUARTER,Phaser.Easing.Linear.None,!0),()=>{t.add.tween(i).to({colorize_intensity:0,gray:0},Phaser.Timer.QUARTER,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{i.colorize=-1;for(let t=0;t<e.layers.length;++t)e.layers[t].sprite.filters=void 0;void 0!==s&&s()})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FieldPsynergyWindow=void 0;const s=i(2),n=i(0),a=i(1),_=(a.GAME_WIDTH>>1)-5,o=(a.GAME_HEIGHT>>1)+a.HERO_BODY_RADIUS+6;e.FieldPsynergyWindow=class{constructor(t,e){this.game=t,this.data=e,this.window=new s.Window(this.game,_,o,10,20),this.text=this.window.set_single_line_text("",!1,!0)}vertical_adjust(){let t=this.data.hero.sprite.y-this.game.camera.y;return t>90?t-90-56:0}open(t,e){const i=n.capitalize(t);this.window.update_text(i,this.text),this.window.update_size({width:10+this.text.text.width,height:20}),this.window.update_position({x:_-(this.text.text.width>>1)|0,y:o+this.vertical_adjust()|0}),this.window.show(()=>{void 0!==e&&e()},!1)}close(t){this.window.close(()=>{void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FrostFieldPsynergy=void 0;const s=i(1),n=i(0),a=i(16),_=i(20),o=i(3);class r extends _.FieldAbilities{constructor(t,e){super(t,e,r.ABILITY_KEY_NAME,r.FROST_MAX_RANGE,r.ACTION_KEY_NAME,!0),this.set_bootstrap_method(this.init_snowflakes.bind(this))}init_snowflakes(){this.field_psynergy_window.close(),this.data.audio.play_se("misc_se","ice_hitting",()=>{this.data.audio.play_se("misc_se","ice_hitting")});for(let t=0;t<r.SNOWFLAKES_COUNT;++t){let e=this.data.overlayer_group.create(0,0,"frost_snowflake");e.anchor.setTo(.5,.5);const i=o.random(5,8)/10,a=Math.random()*s.degree360;e.scale.setTo(i,i),e.rotation=a;let _=this.controllable_char.sprite.centerX,h=this.controllable_char.sprite.centerY+12;switch(this.cast_direction){case n.directions.left:_-=16;break;case n.directions.right:_+=16;break;case n.directions.up:h-=14;break;case n.directions.down:h+=12}const c={rad:r.TOTAL_TURNS_SNOWFLAKES},l=Math.sign(Math.random()-.5),d=Math.sign(Math.random()-.5),u=this.game.add.tween(c).to({rad:-Math.PI},r.SNOWFLAKE_DURATION,Phaser.Easing.Linear.None,!0,t*(Phaser.Timer.QUARTER/5));u.onUpdateCallback(()=>{e.centerX=l*r.SPIRAL_INTENSITY*Math.exp(r.POLAR_SLOPE*c.rad)*Math.cos(c.rad)+_,e.centerY=d*r.SPIRAL_INTENSITY*Math.exp(r.POLAR_SLOPE*c.rad)*Math.sin(c.rad)+h}),u.onComplete.addOnce(()=>{e.destroy(),t===r.SNOWFLAKES_COUNT-1&&(this.target_found?this.init_pillar():(this.unset_hero_cast_anim(),this.stop_casting()))})}}init_pillar(){this.target_object.get_events().forEach(t=>{t.is_set?(t.deactivate(),t.is_set=!1):(t.activate(),t.is_set=!0,a.JumpEvent.active_jump_surroundings(this.data,n.get_surroundings(t.x,t.y,!1,2),this.target_object.collider_layer_shift+this.target_object.base_collision_layer))}),this.target_object.sprite.send_to_back=!1,this.data.map.sort_sprites(),this.target_object.custom_data.color_filters=this.game.add.filter("ColorFilters"),this.target_object.sprite.filters=[this.target_object.custom_data.color_filters],this.data.audio.play_se("psynergy_se","psynergy_4");let t=16;const e=this.game.time.create(!1);e.loop(50,()=>{this.target_object.custom_data.color_filters.tint=t%2==0?[1,1,1]:[-1,-1,-1],--t,0===t&&(e.stop(),this.grow_pillar())}),e.start()}grow_pillar(){this.data.audio.play_se("psynergy_se","psynergy_7"),this.target_object.sprite.animations.play("frost_pool_pillar"),this.target_object.sprite.animations.currentAnim.onComplete.addOnce(()=>{this.set_permanent_blink(),this.unset_hero_cast_anim(),this.stop_casting()})}set_permanent_blink(){let t=this.game.time.create(!1),e=this.target_object;t.loop(150,()=>{e.custom_data.color_filters.hue_adjust=5.3,this.game.time.events.add(20,()=>{e.custom_data.color_filters.hue_adjust=0})}),t.start(),e.sprite.events.onDestroy.add(()=>{t.destroy()})}}e.FrostFieldPsynergy=r,r.ABILITY_KEY_NAME="frost",r.ACTION_KEY_NAME="cast",r.FROST_MAX_RANGE=12,r.SNOWFLAKES_COUNT=16,r.TOTAL_TURNS_SNOWFLAKES=7*Math.PI,r.POLAR_SLOPE=.15,r.SPIRAL_INTENSITY=8,r.SNOWFLAKE_DURATION=1650},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GrowthFieldPsynergy=void 0;const s=i(0),n=i(20),a=i(3);class _ extends n.FieldAbilities{constructor(t,e){super(t,e,_.ABILITY_KEY_NAME,_.GROWTH_MAX_RANGE,_.ACTION_KEY_NAME,!0),this.set_bootstrap_method(this.init_bubbles.bind(this)),this.sprite_base=this.data.info.iter_objs_sprite_base_list[_.ABILITY_KEY_NAME]}set_emitter(){let t=0,e=0,i=0,n=0,a=this.controllable_char.sprite.centerX,o=this.controllable_char.sprite.centerY+5,r=0,h=0;switch(this.increase_duration=0,this.cast_direction){case s.directions.up:e=-_.MAX_PARTICLE_SPEED,n=-_.MIN_PARTICLE_SPEED,t=i=_.X_PARTICLE_SPEED,o-=7,r=_.GROWTH_MAX_RANGE>>1,h=1.5*_.GROWTH_MAX_RANGE,this.increase_duration=80;break;case s.directions.down:e=_.MAX_PARTICLE_SPEED,n=_.MIN_PARTICLE_SPEED,t=i=_.X_PARTICLE_SPEED,o+=12,r=_.GROWTH_MAX_RANGE>>1,h=1.5*_.GROWTH_MAX_RANGE,this.increase_duration=80;break;case s.directions.left:t=-_.MAX_PARTICLE_SPEED,i=-_.MIN_PARTICLE_SPEED,e=n=_.Y_PARTICLE_SPEED,a-=16,r=1.5*_.GROWTH_MAX_RANGE,h=_.GROWTH_MAX_RANGE;break;case s.directions.right:t=_.MAX_PARTICLE_SPEED,i=_.MIN_PARTICLE_SPEED,e=n=_.Y_PARTICLE_SPEED,a+=16,r=1.5*_.GROWTH_MAX_RANGE,h=_.GROWTH_MAX_RANGE}this.emitter=this.game.add.emitter(a,o,20),this.emitter.makeParticles("psynergy_ball"),this.emitter.minParticleSpeed.setTo(i,n),this.emitter.maxParticleSpeed.setTo(t,e),this.emitter.gravity=0,this.emitter.width=r,this.emitter.height=h,this.particle_filter=this.game.add.filter("ColorFilters"),this.particle_filter.hue_adjust=3,this.emitter.maxParticleScale=.5,this.emitter.minParticleScale=.4,this.emitter.forEach(t=>{t.filters=[this.particle_filter],t.animations.add("shine",["ball/01","ball/02","ball/03"],4,!1,!1)})}init_bubbles(){this.field_psynergy_window.close();const t=e=>{0!==e&&(this.data.audio.play_se("psynergy_se","psynergy_6",void 0,.1),this.game.time.events.add(34,t.bind(this,--e)))};t(23),this.set_emitter(),this.emitter.start(!1,100+this.increase_duration,8,0),this.emitter.forEach(t=>{t.animations.play("shine")}),this.game.time.events.add(Phaser.Timer.SECOND,()=>{this.target_found?this.grow_sprout():this.miss_target()})}grow_sprout(){this.emitter.destroy(),this.target_object.get_events().forEach(t=>{t.activate()}),this.data.audio.play_se("battle_se","heal_1");const t=this.sprite_base.getAnimationKey(_.ABILITY_KEY_NAME,"growing");this.target_object.sprite.animations.play(t),this.target_object.sprite.animations.currentAnim.onComplete.addOnce(()=>{this.unset_hero_cast_anim(),this.stop_casting()})}miss_target(){this.emitter.destroy();let t=this.controllable_char.sprite.centerX,e=this.controllable_char.sprite.centerY+17;switch(this.cast_direction){case s.directions.up:e-=16;break;case s.directions.down:e+=16;break;case s.directions.left:t-=16;break;case s.directions.right:t+=16}this.data.audio.play_se("battle_se","hit_1");let i=new Array(_.NO_TARGET_SPROUT_COUNT);const n=this.sprite_base.getActionKey(_.ABILITY_KEY_NAME),o=this.sprite_base.getAnimationKey(_.ABILITY_KEY_NAME,"no_target"),r=this.sprite_base.getFrameName(_.ABILITY_KEY_NAME,"no_target",0);for(let s=0;s<_.NO_TARGET_SPROUT_COUNT;++s){const h=t+a.random(-13,13),c=e+a.random(-13,13),l=this.data.overlayer_group.create(h,c,n);let d;l.anchor.setTo(.5,1),this.sprite_base.setAnimation(l,_.ABILITY_KEY_NAME),l.frameName=r,i.push(new Promise(t=>{d=t})),this.game.time.events.add(40*s,()=>{l.animations.play(o),l.animations.currentAnim.onComplete.addOnce(()=>{l.destroy(),d()})})}Promise.all(i).then(()=>{this.unset_hero_cast_anim(),this.stop_casting()})}}e.GrowthFieldPsynergy=_,_.ABILITY_KEY_NAME="growth",_.ACTION_KEY_NAME="cast",_.GROWTH_MAX_RANGE=12,_.MAX_PARTICLE_SPEED=60,_.MIN_PARTICLE_SPEED=55,_.X_PARTICLE_SPEED=35,_.Y_PARTICLE_SPEED=35,_.NO_TARGET_SPROUT_COUNT=5},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_items=void 0;const s=i(8);e.initialize_items=function(t,e,i){let n={};for(let t=0;t<e.length;++t){const i=e[t];n[i.key_name]=new s.Item(i.key_name,i.name,i.type,i.description,i.use_type,i.curses_when_equipped,i.cant_be_removed,i.rare_item,i.important_item,i.carry_up_to_30,i.effects,i.attribute,i.unleash_ability,i.unleash_rate,i.use_ability,i.equipable_chars,i.price,i.granted_ability)}return t.load.atlasJSONHash("items_icons","assets/images/icons/items/items_icons.png","assets/images/icons/items/items_icons.json").onLoadComplete.addOnce(i),t.load.start(),n}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_djinni_sprites=e.initialize_djinni=void 0;const s=i(7),n=i(14),a=i(0);e.initialize_djinni=function(t){let e={};for(let i=0;i<t.length;++i){const n=t[i];e[n.key_name]=new s.Djinn(n.key_name,n.name,n.description,n.element,n.ability_key_name,n.hp_boost,n.pp_boost,n.atk_boost,n.def_boost,n.agi_boost,n.luk_boost,i)}return e},e.initialize_djinni_sprites=function(t,e){const i=["set","standby"],s={set:["down"],standby:["left","down"]},_={set:6,standby:2},o="assets/images/spritesheets/djinn/";let r=[],h={};for(let e in a.elements){const c=a.elements[e];if(c===a.elements.NO_ELEMENT)continue;h[c]=new n.SpriteBase(c+"_djinn",i);for(let t=0;t<i.length;++t){const e=i[t];h[c].setActionSpritesheet(e,`${o}${c}_djinn.png`,`${o}${c}_djinn.json`),h[c].setActionDirections(e,s[e],new Array(s[e].length).fill(4)),h[c].setActionFrameRate(e,_[e])}let l;h[c].generateAllFrames();const d=new Promise(t=>{l=t});r.push(d),h[c].loadSpritesheets(t,!0,l)}return Promise.all(r).then(e),h}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_enemies=void 0;const s=i(14);e.initialize_enemies=function(t,e,i){let n=[],a={};for(let i=0;i<e.length;++i){let _={data:e[i],sprite_base:null};_.sprite_base=new s.SpriteBase(_.data.key_name,["battle"]);const o=_.data.battle_spritesheet;if(void 0!==o){let e;_.sprite_base.setActionSpritesheet("battle",o.spritesheet_img,o.spritesheet),_.sprite_base.setActionDirections("battle",o.positions,o.frames_number),_.sprite_base.setActionFrameRate("battle",o.frame_rate),_.sprite_base.setActionLoop("battle",o.loop),_.sprite_base.generateAllFrames();const i=new Promise(t=>{e=t});n.push(i),_.sprite_base.loadSpritesheets(t,!0,e)}a[_.data.key_name]=_}return Promise.all(n).then(i),a}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_maps=void 0;const s=i(79);e.initialize_maps=function(t,e,i,n){var a,_;let o={};for(let n=0;n<i.length;++n){const r=i[n];o[r.key_name]=new s.Map(t,e,r.name,r.key_name,r.tileset_key_name,r.collision_key_names,r.tileset_files.image,r.tileset_files.json,r.collision_files,r.lazy_load,r.collision_embedded,null===(a=r.bgm)||void 0===a?void 0:a.key,null===(_=r.bgm)||void 0===_?void 0:_.path)}let r=[];for(let t in o){if(o[t].lazy_load)continue;let e;const i=new Promise(t=>{e=t});r.push(i),o[t].load_map_assets(!0,e)}return Promise.all(r).then(n),o}},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function _(t){try{r(s.next(t))}catch(t){a(t)}}function o(t){try{r(s.throw(t))}catch(t){a(t)}}function r(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(_,o)}r((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.Map=void 0;const n=i(0),a=i(24),_=i(28),o=i(6),r=i(1),h=i(16),c=i(80),l=i(29),d=i(81),u=i(82),p=i(83),m=i(19),g=i(3),y=i(84),w=i(14);class f{constructor(t,e,i,s,n,a,_,o,r,h,c,l,d){this.game=t,this.data=e,this.name=i,this.key_name=s,this.tileset_name=n,this.physics_names=void 0===a?[]:a,this.tileset_image_url=_,this.tileset_json_url=o,this.physics_jsons_url=void 0===r?[]:r,this.sprite=null,this.events={},this.npcs=[],this.interactable_objects=[],this.collision_layers_number=this.physics_names.length,this.collision_sprite=this.game.add.sprite(0,0),this.collision_sprite.width=this.collision_sprite.height=0,this.color_filter=this.game.add.filter("ColorFilters"),this.mode7_filter=this.game.add.filter("Mode7"),this.collision_layer=null,this.show_footsteps=!1,this.assets_loaded=!1,this.lazy_load=void 0!==h&&h,this.layers=[],this.collision_embedded=void 0!==c&&c,this.is_world_map=!1,this.bgm_key=l,this.bgm_url=d}sort_sprites(){let t=new Array(this.data.npc_group.children.length),e=new Array(this.data.npc_group.children.length),i=new Array(this.data.npc_group.children.length);this.data.npc_group.children.forEach((s,n)=>{s.y_sort=parseInt(s.base_collision_layer.toString()+s.y.toString()),s.sort_function?i[n]=s:s.send_to_back?t[n]=s:s.send_to_front&&(e[n]=s)}),this.data.npc_group.sort("y_sort",Phaser.Group.SORT_ASCENDING);let s=this.data.npc_group.getChildIndex(this.data.hero.sprite)-1;s>=-1&&s<this.data.npc_group.children.length&&(-1===s&&(s=0),this.data.npc_group.setChildIndex(this.data.hero.shadow,s)),t.forEach(t=>{t&&this.data.npc_group.sendToBack(t)}),e.forEach(t=>{t&&this.data.npc_group.bringToTop(t)}),i.forEach(t=>{t&&t.sort_function()})}freeze_body(){this.collision_sprite.body.velocity.y=this.collision_sprite.body.velocity.x=0}update(){this.freeze_body(),this.npcs.forEach(t=>t.update()),this.sort_sprites(),this.update_map_rotation()}update_map_rotation(){if(this.is_world_map){const t=Math.abs(this.mode7_filter.angle)<f.MAX_CAMERA_ROTATION*Math.abs(this.data.hero.x_speed),e=Math.sign(this.mode7_filter.angle)===this.data.hero.x_speed;this.data.hero.x_speed&&(t||e)?this.mode7_filter.angle-=Math.sign(this.data.hero.x_speed)*f.CAMERA_ROTATION_STEP:!this.data.hero.x_speed&&Math.abs(this.mode7_filter.angle)>0&&(this.mode7_filter.angle-=Math.sign(this.mode7_filter.angle)*f.CAMERA_ROTATION_STEP)}}load_map_assets(t,e){const i=[];let s,n;if(i.push(new Promise(t=>s=t)),this.game.load.tilemap(this.key_name,this.tileset_json_url,null,Phaser.Tilemap.TILED_JSON).onLoadComplete.addOnce(s),i.push(new Promise(t=>n=t)),this.game.load.image(this.key_name,this.tileset_image_url).onLoadComplete.addOnce(n),this.bgm_key){let t;i.push(new Promise(e=>t=e)),this.game.load.audio(this.bgm_key,[this.bgm_url]).onLoadComplete.addOnce(t)}for(let t=0;t<this.physics_names.length;++t){let e;i.push(new Promise(t=>e=t)),this.game.load.physics(this.physics_names[t],this.physics_jsons_url[t]).onLoadComplete.addOnce(e)}t&&(Promise.all(i).then(()=>{this.assets_loaded=!0,e()}),this.game.load.start())}config_body(t,e){if(this.game.physics.p2.enable(this.collision_sprite,!1),this.collision_sprite.body.clearShapes(),this.collision_embedded){this.collision_sprite.width=this.sprite.widthInPixels,this.collision_sprite.height=this.sprite.heightInPixels,this.collision_sprite.anchor.setTo(0,0);const t=this.sprite.objects[this.collision_layer];for(let e=0;e<t.length;++e){const i=t[e];if(i.polygon){const t=i.polygon.map(t=>[Math.round(i.x+t[0]),Math.round(i.y+t[1])]);this.collision_sprite.body.addPolygon({optimalDecomp:!1,skipSimpleCheck:!1,removeCollinearPoints:!1,remove:!1,adjustCenterOfMass:!1},t)}else i.rectangle?this.collision_sprite.body.addRectangle(Math.round(i.width),Math.round(i.height),Math.round(i.x)+(Math.round(i.width)>>1),Math.round(i.y)+(Math.round(i.height)>>1)):i.ellipse&&this.collision_sprite.body.addCircle(i.width>>1,Math.round(i.x)+(Math.round(i.width)>>1),Math.round(i.y)+(Math.round(i.height)>>1))}}else this.collision_sprite.body.loadPolygon(this.physics_names[e],this.physics_names[e]);this.collision_sprite.body.setCollisionGroup(t.map_collision_group),this.collision_sprite.body.damping=r.MAP_DAMPING,this.collision_sprite.body.angularDamping=r.MAP_DAMPING,this.collision_sprite.body.setZeroRotation(),this.collision_sprite.body.dynamic=!1,this.collision_sprite.body.static=!0}config_all_bodies(t,e){this.is_world_map||(this.npcs.forEach(e=>e.config_body(t)),this.interactable_objects.forEach(e=>e.config_body(t))),this.config_body(t,e)}get_current_tile(t,e){return void 0!==e?this.sprite.getTile(t.tile_x_pos,t.tile_y_pos,e):this.layers.map(e=>this.sprite.getTile(t.tile_x_pos,t.tile_y_pos,e.name)).filter(t=>t)}get_layer(t){return g.find(this.layers,{name:t})}create_tile_events(t){const e=JSON.parse(t),i=o.TileEvent.get_location_key(e.x,e.y);if(i in this.events||(this.events[i]=[]),e.type===o.event_types.CLIMB){const t=new l.ClimbEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,void 0===e.change_to_collision_layer?null:e.change_to_collision_layer);this.events[i].push(t)}else if(e.type===o.event_types.SPEED){const t=new p.SpeedEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,e.speed);this.events[i].push(t)}else if(e.type===o.event_types.TELEPORT){const t=new c.TeleportEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,e.active,e.target,e.x_target,e.y_target,e.advance_effect,e.dest_collision_layer?e.dest_collision_layer:0);this.events[i].push(t)}else if(e.type===o.event_types.SLIDER){const t=new y.SliderEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,e.x_target,e.y_target,e.dest_collision_layer?e.dest_collision_layer:0,e.show_dust);this.events[i].push(t)}else if(e.type===o.event_types.JUMP){const t=new h.JumpEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.initially_active||e.initially_active,void 0===e.is_set||e.is_set);this.events[i].push(t)}else if(e.type===o.event_types.STEP){const t=new d.StepEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,n.directions[e.step_direction]);this.events[i].push(t)}else if(e.type===o.event_types.COLLISION){const t=new u.CollisionEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,e.dest_collision_layer);this.events[i].push(t)}}create_npcs(t){const e=JSON.parse(t),i=this.data.dbs.npc_db[e.key_name],s=i.initial_action,n=void 0!==e.animation_key?e.animation_key:i.actions[s].initial_direction;this.npcs.push(new a.NPC(this.game,this.data,e.key_name,e.initial_x,e.initial_y,s,n,e.enable_footsteps,i.walk_speed,i.dash_speed,i.climb_speed,e.npc_type,e.movement_type,e.message,e.thought_message,e.avatar?e.avatar:null,e.shop_key,void 0===e.base_collision_layer?0:e.base_collision_layer,e.talk_range_factor,void 0===e.events?[]:e.events,this.data.dbs.npc_db[e.key_name].no_shadow))}create_interactable_objects(t){const e=JSON.parse(t),i=new _.InteractableObjects(this.game,this.data,e.key_name,e.x,e.y,void 0===e.allowed_tiles?[]:e.allowed_tiles,void 0===e.base_collision_layer?0:e.base_collision_layer,e.collider_layer_shift,e.not_allowed_tiles,e.object_drop_tiles,e.intermediate_collider_layer_shift);this.interactable_objects.push(i);for(let t in this.data.dbs.interactable_objects_db[e.key_name].psynergy_keys){this.data.dbs.interactable_objects_db[e.key_name].psynergy_keys[t].interaction_type===_.interactable_object_interaction_types.ONCE&&(i.custom_data[t+"_casted"]=!1)}this.data.dbs.interactable_objects_db[e.key_name].pushable&&void 0!==e.block_stair_collider_layer_shift&&(i.custom_data.block_stair_collider_layer_shift=e.block_stair_collider_layer_shift)}config_interactable_object(){for(let t=0;t<this.interactable_objects.length;++t){const e=this.interactable_objects[t];e.sprite_info=this.data.info.iter_objs_sprite_base_list[e.key_name],e.initial_config(this.sprite),e.initialize_related_events(this.events,this)}}config_npc(){return s(this,void 0,void 0,(function*(){for(let t=0;t<this.npcs.length;++t){const e=this.npcs[t],i=this.data.dbs.npc_db[e.key_name];let s=Object.keys(i.actions);const n=new w.SpriteBase(e.key_name,s);for(let t=0;t<s.length;++t){const e=s[t];n.setActionSpritesheet(e,i.actions[e].spritesheet.image,i.actions[e].spritesheet.json),n.setActionDirections(e,i.actions[e].directions,i.actions[e].frames_count),n.setActionFrameRate(e,i.actions[e].frame_rate),n.setActionLoop(e,i.actions[e].loop)}n.generateAllFrames(),yield new Promise(t=>{n.loadSpritesheets(this.game,!0,()=>{e.no_shadow||e.set_shadow(i.shadow_key,this.data.npc_group,e.base_collision_layer,i.shadow_anchor_x,i.shadow_anchor_y),e.set_sprite(this.data.npc_group,n,this.sprite,e.base_collision_layer,i.anchor_x,i.anchor_y,this.is_world_map),this.data.dbs.npc_db[e.key_name].ignore_world_map_scale&&(e.sprite.scale.setTo(1,1),e.shadow&&e.shadow.scale.setTo(1,1)),e.set_sprite_as_npc(),e.play(e.current_action,e.current_direction),t()})})}}))}config_layers(t,e){for(let i=0;i<this.layers.length;++i){let s=this.sprite.createLayer(this.layers[i].name);this.layers[i].sprite=s,s.layer_z=void 0===this.layers[i].properties.z?i:this.layers[i].properties.z,s.resizeWorld(),void 0!==this.layers[i].properties.blendMode&&(s.blendMode=PIXI.blendModes[this.layers[i].properties.blendMode]),void 0!==this.layers[i].alpha&&(s.alpha=this.layers[i].alpha);let n=!1;if(void 0!==this.layers[i].properties.over){const t=this.layers[i].properties.over.toString().split(",").map(t=>parseInt(t));n=t.length>this.collision_layer?Boolean(t[this.collision_layer]):Boolean(t[0])}n?t.add(s):e.add(s)}}mount_map(t){return s(this,void 0,void 0,(function*(){if(!this.assets_loaded){let t;const e=new Promise(e=>t=e);this.load_map_assets(!0,t),yield e}this.collision_layer=t,this.events={},o.TileEvent.reset(),m.GameEvent.reset(),this.sprite=this.game.add.tilemap(this.key_name),this.sprite.properties.world_map&&(this.is_world_map=!0),this.sprite.addTilesetImage(this.tileset_name,this.key_name),this.sprite.objects=g.mapKeys(this.sprite.objects,(t,e)=>parseInt(e));for(let t=0;t<this.sprite.tilesets.length;++t){const e=this.sprite.tilesets[t];for(let t in e.tileProperties)e.tileProperties[t].index=t}for(let t in this.sprite.properties){const e=this.sprite.properties[t];t.startsWith("event")?this.create_tile_events(e):t.startsWith("npc")?this.create_npcs(e):t.startsWith("interactable_object")&&this.create_interactable_objects(e)}return this.layers=this.sprite.layers.sort((t,e)=>t.properties.over!==e.properties.over||t.properties.z!==e.properties.z?t-e:void 0),this.config_layers(this.data.overlayer_group,this.data.underlayer_group),this.config_interactable_object(),yield this.config_npc(),this.sprite.properties.footprint&&(this.show_footsteps=!0),this.config_world_map(),this.data.audio.add_bgm(this.bgm_key,!0),this}))}config_world_map(){let t=r.HERO_BODY_RADIUS;this.is_world_map?(this.layers.forEach(t=>t.sprite.filters=[this.mode7_filter]),this.game.camera.bounds=null,this.npcs.forEach(t=>{this.data.dbs.npc_db[t.key_name].ignore_world_map_scale||t.sprite.scale.setTo(r.WORLD_MAP_SPRITE_SCALE_X,r.WORLD_MAP_SPRITE_SCALE_Y),t.sprite.data.mode7=!0,t.sprite.data.map=this,t.shadow&&(this.data.dbs.npc_db[t.key_name].ignore_world_map_scale||t.shadow.scale.setTo(r.WORLD_MAP_SPRITE_SCALE_X,r.WORLD_MAP_SPRITE_SCALE_Y),t.shadow.data.mode7=!0,t.shadow.data.map=this)}),this.interactable_objects.forEach(t=>t.sprite.data.mode7=!0),t=r.HERO_BODY_RADIUS_M7):(this.game.camera.bounds=new Phaser.Rectangle,this.game.camera.bounds.copyFrom(this.game.world.bounds)),this.data.hero&&t!==this.data.hero.body_radius&&(this.data.hero.config_body(this.data.collision,this.is_world_map?r.HERO_BODY_RADIUS_M7:r.HERO_BODY_RADIUS),this.is_world_map?(this.data.hero.sprite.scale.setTo(r.WORLD_MAP_SPRITE_SCALE_X,r.WORLD_MAP_SPRITE_SCALE_Y),this.data.hero.shadow.scale.setTo(r.WORLD_MAP_SPRITE_SCALE_X,r.WORLD_MAP_SPRITE_SCALE_Y),this.data.hero.create_half_crop_mask(this.is_world_map)):(this.data.hero.sprite.scale.setTo(1,1),this.data.hero.shadow.scale.setTo(1,1),this.data.hero.sprite.mask.destroy(),this.data.hero.sprite.mask=null))}unset_map(){this.data.underlayer_group.removeAll(),this.data.overlayer_group.removeAll(),this.collision_sprite.body.clearShapes(),this.show_footsteps&&this.data.hero.footsteps.clean_all();let t=[];for(let e=0;e<this.data.npc_group.children.length;++e){let i=this.data.npc_group.children[e];(i.is_npc||i.is_interactable_object)&&(i.is_interactable_object&&i.interactable_object.custom_data.blocking_stair_block&&(i.interactable_object.custom_data.blocking_stair_block.destroy(),i.interactable_object.custom_data.blocking_stair_block=void 0),t.push(i))}for(let e=0;e<t.length;++e){let i=t[e];this.data.npc_group.remove(i,!0)}this.npcs=[],this.interactable_objects=[],this.data.npc_group.removeAll(),this.data.npc_group.add(this.data.hero.shadow),this.data.npc_group.add(this.data.hero.sprite)}}e.Map=f,f.MAX_CAMERA_ROTATION=.035,f.CAMERA_ROTATION_STEP=.003},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function _(t){try{r(s.next(t))}catch(t){a(t)}}function o(t){try{r(s.throw(t))}catch(t){a(t)}}function r(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(_,o)}r((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.TeleportEvent=void 0;const n=i(0),a=i(6),_=i(1),o=i(3);class r extends a.TileEvent{constructor(t,e,i,s,n,_,o,r,h,c,l,d,u){super(t,e,a.event_types.TELEPORT,i,s,n,_,o,r,null),this.target=h,this.x_target=c,this.y_target=l,this.advance_effect=d,this.dest_collision_layer=u}fire(){if(this.check_position()&&this.data.hero_movement_allowed())if(this.data.tile_event_manager.on_event=!0,this.data.hero.teleporting=!0,this.advance_effect){if(!this.data.hero.stop_by_colliding)return this.data.tile_event_manager.on_event=!1,void(this.data.hero.teleporting=!1);this.data.hero.play(n.base_actions.WALK,n.reverse_directions[n.directions.up]),this.open_door(),this.game.physics.p2.pause();const t=400,e=this.data.map.sprite.tileWidth*(this.x+.5),i=this.data.hero.sprite.y-15;this.game.add.tween(this.data.hero.shadow).to({x:e,y:i},t,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.data.hero.sprite.body).to({x:e,y:i},t,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.camera_fade_in()})}else this.camera_fade_in()}camera_fade_in(){this.data.hero.stop_char(!0),this.game.camera.fade(),this.game.camera.onFadeComplete.addOnce(()=>{this.data.hero.set_direction(this.activation_directions[0]),this.data.hero.play(n.base_actions.IDLE,n.reverse_directions[this.data.hero.current_direction]),this.game.camera.lerp.setTo(1,1),this.change_map()})}change_map(){var t,e;return s(this,void 0,void 0,(function*(){this.data.map.unset_map();const i=this.target,s=this.dest_collision_layer;this.data.hero.shadow.base_collision_layer=s,this.data.hero.sprite.base_collision_layer=s,this.data.map=yield this.data.info.maps_list[i].mount_map(s),this.game.camera.setBoundsToWorld(),(null===(t=this.game.camera.bounds)||void 0===t?void 0:t.width)<_.GAME_WIDTH&&(this.game.camera.bounds.width=_.GAME_WIDTH),(null===(e=this.game.camera.bounds)||void 0===e?void 0:e.height)<_.GAME_HEIGHT&&(this.game.camera.bounds.height=_.GAME_HEIGHT),this.data.collision.config_collision_groups(this.data.map),this.data.map.config_all_bodies(this.data.collision,this.data.map.collision_layer),this.data.collision.config_collisions(this.data.map,this.data.map.collision_layer,this.data.npc_group),this.game.physics.p2.updateBoundsCollisionGroup(),this.data.debug.update_debug_physics(this.data.hero.sprite.body.debug),this.data.hero.sprite.body.x=(this.x_target+.5)*this.data.map.sprite.tileWidth,this.data.hero.sprite.body.y=(this.y_target+.5)*this.data.map.sprite.tileHeight,this.game.physics.p2.resume(),this.camera_fade_out()}))}camera_fade_out(){this.data.hero.update_shadow(),this.data.hero.update_half_crop(!0),this.data.map.sort_sprites(),this.data.map.npcs.forEach(t=>t.update()),this.game.camera.flash(0),this.game.camera.onFlashComplete.addOnce(()=>{this.game.camera.lerp.setTo(_.CAMERA_LERP,_.CAMERA_LERP),this.data.tile_event_manager.on_event=!1,this.data.hero.teleporting=!1})}open_door(){const t=o.find(this.data.map.sprite.layers,{name:this.data.map.sprite.properties.door_layer}),e=this.data.map.sprite.getTile(this.x,this.y-1,t.name),i=e.properties.door_type,s=o.filter(this.data.map.sprite.tilesets[0].tileProperties,t=>t.door_type===i&&"close_door"in t&&t.id===e.properties.id);let n,a,_,r,h,c,l;for(let e=0;e<s.length;++e)n=s[e],a=1+(0|n.index),_=n.close_door,r=n.base_offset.split(","),h=this.x+(0|r[0]),c=this.y+(0|r[1])-1,l=parseInt(o.findKey(this.data.map.sprite.tilesets[0].tileProperties,{open_door:_}))+1,this.data.map.sprite.replace(a,l,h,c,1,1,t.name)}}e.TeleportEvent=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.StepEvent=void 0;const s=i(0),n=i(6);class a extends n.TileEvent{constructor(t,e,i,s,a,_,o,r,h){super(t,e,n.event_types.STEP,i,s,a,_,o,r,null),this.step_direction=h,this.next_x=0,this.next_y=0,this.shift_y=0}set(){let t,e,i=this.y;this.step_direction===s.directions.up?e=-(this.data.map.sprite.tileHeight/a.STEP_SHIFT_FACTOR|0):this.step_direction===s.directions.down&&(e=this.data.map.sprite.tileHeight/a.STEP_SHIFT_FACTOR|0),this.activation_directions[0]===s.directions.left?t=this.x-1:this.activation_directions[0]===s.directions.right&&(t=this.x+1),this.next_x=t,this.next_y=i,this.shift_y=e,this.data.tile_event_manager.set_triggered_event(this)}fire(){if(this.data.hero.tile_x_pos===this.next_x&&this.data.hero.tile_y_pos===this.next_y){this.data.tile_event_manager.unset_triggered_event(this),this.data.hero.shadow_following=!1,this.data.hero.shadow.y+=this.shift_y;const t=this.game.add.tween(this.data.hero.sprite.body).to({y:this.data.hero.sprite.body.y+this.shift_y},this.shift_y>0?80:50,Phaser.Easing.Linear.None,!0);t.onComplete.addOnce(()=>{this.data.hero.shadow_following=!0}),t.onUpdateCallback(()=>{this.data.hero.shadow.x=this.data.hero.sprite.body.x})}else this.check_position()||this.data.tile_event_manager.unset_triggered_event(this)}}e.StepEvent=a,a.STEP_SHIFT_FACTOR=3},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CollisionEvent=void 0;const s=i(0),n=i(6);class a extends n.TileEvent{constructor(t,e,i,s,a,_,o,r,h){super(t,e,n.event_types.COLLISION,i,s,a,_,o,r,null),this.dest_collision_layer=h,this.next_x=0,this.next_y=0}set(){let t=this.x,e=this.y;this.activation_directions[0]===s.directions.left?t=this.x-1:this.activation_directions[0]===s.directions.right?t=this.x+1:this.activation_directions[0]===s.directions.up?e=this.y-1:this.activation_directions[0]===s.directions.down&&(e=this.y+1),this.next_x=t,this.next_y=e,this.data.tile_event_manager.set_triggered_event(this)}fire(){this.data.hero.tile_x_pos===this.next_x&&this.data.hero.tile_y_pos===this.next_y?(this.data.tile_event_manager.unset_triggered_event(this),this.data.collision.change_map_body(this.data,this.dest_collision_layer)):this.check_position()||this.data.tile_event_manager.unset_triggered_event(this)}}e.CollisionEvent=a},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SpeedEvent=void 0;const s=i(6);class n extends s.TileEvent{constructor(t,e,i,n,a,_,o,r,h){super(t,e,s.event_types.SPEED,i,n,a,_,o,r,null),this.speed=h}unset(){this.data.tile_event_manager.event_triggered(this)&&!this.check_position()&&(this.data.tile_event_manager.unset_triggered_event(this),this.data.hero.extra_speed-=this.speed)}fire(){this.data.tile_event_manager.event_triggered(this)||(this.data.tile_event_manager.set_triggered_event(this),this.data.hero.extra_speed+=this.speed)}}e.SpeedEvent=n},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SliderEvent=void 0;const s=i(0),n=i(6);class a extends n.TileEvent{constructor(t,e,i,s,a,_,o,r,h,c,l,d){super(t,e,n.event_types.SLIDER,i,s,a,_,o,r,null),this.x_target=h,this.y_target=c,this.dest_collision_layer=l,this.show_dust=void 0===d||d}fire(){if(!this.data.hero.stop_by_colliding||!this.check_position()||!this.data.hero_movement_allowed(!1))return;this.data.tile_event_manager.on_event=!0,this.data.hero.sliding=!0,this.game.physics.p2.pause();const t=this.data.map.sprite.tileWidth*(this.x+.5),e=this.data.map.sprite.tileHeight*(this.y+.6),i=this.data.map.sprite.tileHeight*this.y;this.data.hero.play(s.base_actions.JUMP,s.reverse_directions[s.directions.down],!1),this.game.time.events.add(200,()=>{this.data.hero.shadow.visible=!1,this.data.hero.current_action=s.base_actions.IDLE,this.data.hero.play(s.base_actions.IDLE,s.reverse_directions[s.directions.down],!1),this.game.add.tween(this.data.hero.sprite.body).to({x:t,y:[i,e]},150,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.data.audio.play_se("actions_se","slide"),this.show_dust&&this.dust_animation();const t=e+1.2*this.data.map.sprite.tileHeight;this.game.add.tween(this.data.hero.sprite.body).to({y:t},70,Phaser.Easing.Quadratic.Out,!0).onComplete.addOnce(()=>{this.data.hero.set_frame(s.directions.down_right),this.game.time.events.add(40,()=>{this.data.hero.set_frame(s.directions.down_left),this.game.time.events.add(40,()=>{this.data.hero.set_frame(s.directions.down)})});const t=this.data.map.sprite.tileWidth*(this.x_target+.5),e=this.data.map.sprite.tileHeight*(this.y_target+.5),i=Math.abs(this.y_target-this.y)*a.TIME_PER_TILE;this.game.add.tween(this.data.hero.sprite.body).to({x:t,y:e},i,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.data.hero.play(),this.data.hero.update_shadow(),this.data.hero.shadow.visible=!0,this.dest_collision_layer!==this.data.map.collision_layer&&this.data.collision.change_map_body(this.data,this.dest_collision_layer),this.game.time.events.add(80,()=>{this.data.hero.sliding=!1,this.game.physics.p2.resume(),this.data.tile_event_manager.on_event=!1})})})})})}dust_animation(){const t=this.data.info.misc_sprite_base_list[a.DUST_KEY],e=this.data.map.sprite.tileWidth*(this.x+.5);for(let i=0;i<a.DUST_COUNT;++i)this.game.time.events.add(40*i,()=>{const i=this.data.hero.sprite.body.x-Math.random()*this.data.map.sprite.tileWidth+(this.data.map.sprite.tileWidth>>1),s=this.data.hero.sprite.body.y-Math.random()*this.data.map.sprite.tileHeight+(this.data.map.sprite.tileHeight>>1),n=this.data.npc_group.create(i,s,a.DUST_KEY);n.base_collision_layer=this.dest_collision_layer,n.anchor.setTo(.5,.5),this.game.add.tween(n).to({x:i+(i<e?-1:1)*(this.data.map.sprite.tileHeight/3),y:s-(this.data.map.sprite.tileHeight>>1)},400,Phaser.Easing.Linear.None,!0),this.data.npc_group.setChildIndex(n,this.data.npc_group.getChildIndex(this.data.hero.sprite)),t.setAnimation(n,a.DUST_KEY);const _=t.getAnimationKey(a.DUST_KEY,"spread");n.animations.getAnimation(_).onComplete.addOnce(()=>{n.destroy()}),n.animations.play(_)})}}e.SliderEvent=a,a.TIME_PER_TILE=60,a.DUST_COUNT=6,a.DUST_KEY="dust"},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_misc_data=void 0;const s=i(14);e.initialize_misc_data=function(t,e,i){let n={},a=[];for(let i=0;i<e.length;++i){const _=e[i],o=new s.SpriteBase(_.key_name,_.actions.map(t=>t.key_name));n[_.key_name]=o;for(let t=0;t<_.actions.length;++t){const e=_.actions[t];o.setActionSpritesheet(e.key_name,e.spritesheet.image,e.spritesheet.json),o.setActionDirections(e.key_name,e.animations,e.frames_count),o.setActionFrameRate(e.key_name,e.frame_rate),o.setActionLoop(e.key_name,e.loop)}let r;o.generateAllFrames();const h=new Promise(t=>{r=t});a.push(h),o.loadSpritesheets(t,!0,r)}return Promise.all(a).then(i),n}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_shops=void 0;const s=i(87);e.initialize_shops=function(t){let e={};for(let i=0;i<t.length;++i){const n=t[i];e[n.key_name]=new s.Shop(n.key_name,n.dialog_key,n.avatar_key,n.item_list)}return e}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Shop=void 0;e.Shop=class{constructor(t,e,i,s){this.key_name=t,this.dialog_key=e,this.avatar_key=i,this.item_list=s}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_interactable_objs_data=void 0;const s=i(14);e.initialize_interactable_objs_data=function(t,e,i){let n={},a=[];for(let i in e){const _=e[i],o=new s.SpriteBase(_.key_name,[_.key_name]);let r;n[_.key_name]=o,o.setActionSpritesheet(_.key_name,_.spritesheet.image,_.spritesheet.json),o.setActionDirections(_.key_name,_.actions.animations,_.actions.frames_count),o.setActionFrameRate(_.key_name,_.actions.frame_rate),o.setActionLoop(_.key_name,_.actions.loop),o.generateAllFrames();const h=new Promise(t=>{r=t});a.push(h),o.loadSpritesheets(t,!0,r)}return Promise.all(a).then(i),n}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_summons=void 0;const s=i(90);e.initialize_summons=function(t){let e={};for(let i=0;i<t.length;++i){const n=t[i];e[n.key_name]=new s.Summon(n.key_name,i,n.requirements,n.available)}return e}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Summon=void 0;e.Summon=class{constructor(t,e,i,s){this.key_name=t,this.index=e,this.requirements=i,this.available=s}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_se=void 0,e.initialize_se=function(t,e,i,s){const n=[];for(let s in i){const a=i[s],_=t.load.audiosprite(s,a.audio,null,a.json);let o;n.push(new Promise(t=>o=t)),_.onLoadComplete.addOnce(()=>{e.audio.add_se(s),o()})}t.load.start(),Promise.all(n).then(s)}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_menu=e.MainMenu=void 0;const s=i(0),n=i(93),a=i(94),_=i(99),o=i(34),r=i(26),h=i(18);class c{constructor(t,e){this.game=t,this.data=e,this.buttons_keys=["psynergy","djinni","item","status"],this.current_index=0,this.chars_status_window=new r.CharsStatusWindow(this.game,this.data),this.horizontal_menu=new h.HorizontalMenu(this.game,this.data,this.buttons_keys,this.buttons_keys.map(t=>s.capitalize(t)),{on_press:this.button_press.bind(this),on_cancel:this.close_menu.bind(this)},c.TITLE_WINDOW_WIDTH),this.psynergy_menu=new n.MainPsynergyMenu(this.game,this.data),this.item_menu=new a.MainItemMenu(this.game,this.data),this.djinn_menu=new _.MainDjinnMenu(this.game,this.data),this.status_menu=new o.MainStatusMenu(this.game,this.data)}get is_active(){return this.horizontal_menu.menu_active}button_press(){switch(this.current_index=this.horizontal_menu.selected_button_index,this.buttons_keys[this.horizontal_menu.selected_button_index]){case"psynergy":this.button_press_action(this.psynergy_menu);break;case"djinni":this.button_press_action(this.djinn_menu);break;case"item":this.button_press_action(this.item_menu);break;case"status":this.button_press_action(this.status_menu)}}button_press_action(t){this.horizontal_menu.close(()=>{t.open_menu(t=>{t?this.close_menu():(this.chars_status_window.update_chars_info(),this.horizontal_menu.open(void 0,this.current_index))})},!1)}update_position(){this.chars_status_window.update_position(!0),this.horizontal_menu.update_position()}open_menu(){this.chars_status_window.update_chars_info(),this.chars_status_window.update_position(),this.chars_status_window.show(),this.horizontal_menu.open()}close_menu(){if(!this.horizontal_menu.menu_active)return;this.data.control_manager.reset(),this.data.cursor_manager.hide();let t,e=[],i=new Promise(e=>t=e);e.push(i),this.horizontal_menu.close(t),this.chars_status_window.close(t),Promise.all(e).then(()=>{this.data.menu_open=!1,this.current_index=0})}}e.MainMenu=c,c.TITLE_WINDOW_WIDTH=70,e.initialize_menu=function(t,e){let i=()=>{e.hero.in_action()||e.in_battle||!e.created||e.game_event_manager.on_event||e.menu_open||(e.menu_open=!0,e.hero.stop_char(),e.hero.update_shadow(),e.audio.play_se("menu_se","menu_move"),e.main_menu.open_menu())},s=[{key:e.gamepad.A,on_down:i},{key:e.gamepad.SELECT,on_down:i}];return e.control_manager.set_control(s,{persist:!0}),new c(t,e)}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainPsynergyMenu=void 0;const s=i(30),n=i(31),a=i(2),_=i(1),o=i(15),r=_.INSIDE_BORDER_WIDTH+_.OUTSIDE_BORDER_WIDTH,h=(132-2*(_.INSIDE_BORDER_WIDTH+1)-8*_.ICON_WIDTH)/7;e.MainPsynergyMenu=class{constructor(t,e){this.game=t,this.data=e,this.selected_char_index=0,this.is_open=!1,this.choosing_psynergy=!1,this.close_callback=null,this.guide_window_msgs={choosing_char:"Whose Psynergy?",choosing_psynergy:"Which Psynergy?"},this.psynergy_choose_window=new n.ItemPsynergyChooseWindow(this.game,this.data,!0,this.psynergy_change.bind(this)),this.chars_menu=new o.CharsMenu(this.game,this.data,this.char_change.bind(this)),this.basic_info_window=new s.BasicInfoWindow(this.game),this.guide_window=new a.Window(this.game,104,0,132,20),this.description_window=new a.Window(this.game,0,136,236,20),this.psynergy_overview_window=new a.Window(this.game,104,24,132,76),this.shortcuts_window=new a.Window(this.game,104,104,132,28),this.guide_window_text=this.guide_window.set_single_line_text(""),this.description_window_text=this.description_window.set_single_line_text(""),this.shortcuts_window.set_text(["Use a keyboard number","to set a shorcut."],void 0,7,3)}char_change(){this.selected_char_index!==this.chars_menu.selected_index&&(this.selected_char_index=this.chars_menu.selected_index,this.basic_info_window.set_char(this.data.info.party_data.members[this.chars_menu.selected_index]),this.set_psynergy_icons(),this.psynergy_choose_window.window_open&&(this.psynergy_choose_window.close(),this.psynergy_choose_window.open(this.chars_menu.selected_index)))}char_choose(){this.shortcuts_window.open&&this.shortcuts_window.close(void 0,!1),this.psynergy_overview_window.open&&this.psynergy_overview_window.close(void 0,!1),this.chars_menu.is_active&&this.chars_menu.deactivate(),this.choosing_psynergy=!0,this.set_guide_window_text(),this.psynergy_choose_window.window_open||this.psynergy_choose_window.open(this.chars_menu.selected_index,()=>{this.choosing_psynergy=!1,this.chars_menu.activate(),this.set_guide_window_text(),this.set_description_window_text()}),this.psynergy_choose_window.grant_control(this.open_char_select.bind(this),()=>{let t=this.psynergy_choose_window,e=t.element_list[t.elements[t.selected_element_index]];this.psynergy_choose(e)},this.chars_menu.next_char.bind(this.chars_menu),this.chars_menu.previous_char.bind(this.chars_menu))}psynergy_change(t){this.set_description_window_text(t.description)}psynergy_choose(t){t.key_name in this.data.info.field_abilities_list?(this.close_menu(!0),this.data.info.field_abilities_list[t.key_name].cast(this.data.hero,this.data.info.party_data.members[this.selected_char_index].key_name)):this.char_choose()}set_guide_window_text(){this.choosing_psynergy?this.guide_window.update_text(this.guide_window_msgs.choosing_psynergy,this.guide_window_text):this.guide_window.update_text(this.guide_window_msgs.choosing_char,this.guide_window_text)}set_description_window_text(t){this.choosing_psynergy?this.description_window.update_text(t,this.description_window_text):this.description_window.update_text(this.data.info.party_data.coins+"    Coins",this.description_window_text)}set_psynergy_icons(){this.psynergy_overview_window.remove_from_group();let t=0;for(let e=0;e<this.data.info.party_data.members[this.selected_char_index].abilities.length;++e){const i=this.data.info.party_data.members[this.selected_char_index].abilities[e];if(i in this.data.info.abilities_list){const e=this.data.info.abilities_list[i];if(e.is_field_psynergy||e.effects_outside_battle){const e=r+1+Math.ceil(t%8*(h+_.ICON_WIDTH)),s=r+5+(t/8|0)*(3+_.ICON_HEIGHT);this.psynergy_overview_window.create_at_group(e,s,"abilities_icons",void 0,i),++t}}}}open_char_select(){this.psynergy_choose_window.window_open&&this.psynergy_choose_window.close(),this.psynergy_overview_window.open||this.psynergy_overview_window.show(void 0,!1),this.shortcuts_window.open||this.shortcuts_window.show(void 0,!1),this.chars_menu.is_open||this.chars_menu.open(this.selected_char_index,o.CharsMenuModes.MENU),this.chars_menu.select_char(this.selected_char_index),this.chars_menu.grant_control(this.close_menu.bind(this),this.char_choose.bind(this))}open_menu(t){this.close_callback=t,this.basic_info_window.open(this.data.info.party_data.members[this.selected_char_index]),this.is_open=!0,this.set_psynergy_icons(),this.set_guide_window_text(),this.set_description_window_text(),this.guide_window.show(void 0,!1),this.description_window.show(void 0,!1),this.psynergy_overview_window.show(void 0,!1),this.shortcuts_window.show(void 0,!1),this.open_char_select()}close_menu(t=!1){this.data.cursor_manager.hide(),this.data.control_manager.reset(),this.chars_menu.close(),this.basic_info_window.close(),this.is_open=!1,this.guide_window.close(void 0,!1),this.description_window.close(void 0,!1),this.psynergy_overview_window.close(void 0,!1),this.shortcuts_window.close(void 0,!1),this.psynergy_choose_window.window_open&&this.psynergy_choose_window.close(),null!==this.close_callback&&this.close_callback(t)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainItemMenu=void 0;const s=i(30),n=i(31),a=i(2),_=i(1),o=i(95),r=i(98),h=i(8),c=i(15),l=i(32),d=_.INSIDE_BORDER_WIDTH+_.OUTSIDE_BORDER_WIDTH,u=(132-2*(_.INSIDE_BORDER_WIDTH+11)-5*_.ICON_WIDTH)/4;e.MainItemMenu=class{constructor(t,e){this.game=t,this.data=e,this.chars_menu=new c.CharsMenu(this.game,this.data,this.char_change.bind(this)),this.basic_info_window=new s.BasicInfoWindow(this.game),this.item_change_stats_window=new r.StatsCheckWithItemWindow(this.game,this.data),this.selected_char_index=0,this.selected_item_pos={page:0,index:0},this.is_open=!1,this.choosing_give_destination=!1,this.overview_shifted=!1,this.close_callback=null,this.guide_window=new a.Window(this.game,104,0,132,20),this.guide_window_text=this.guide_window.set_single_line_text(""),this.choosing_item=!1,this.guide_window_msgs={choosing_char:"Whose item?",choosing_item:"Which item?"},this.description_window=new a.Window(this.game,0,136,236,20),this.description_window_text=this.description_window.set_single_line_text(""),this.arrange_window=new a.Window(this.game,104,104,132,28),this.arrange_window_text=this.arrange_window.set_text(["Arrange info here..."],void 0,7,3),this.item_overview_window=new a.Window(this.game,104,24,132,76),this.item_choose_window=new n.ItemPsynergyChooseWindow(this.game,this.data,!1,this.item_change.bind(this)),this.item_options_window=new o.ItemOptionsWindow(this.game,this.data),this.item_quant_win=new l.ItemQuantityManagerWindow(this.game,this.data)}shift_item_overview(t,e=!0){this.overview_shifted!==t&&(e&&(t?(this.item_choose_window.hide(),this.item_options_window.hide()):(this.item_choose_window.show(),this.item_options_window.show())),this.item_overview_window.update_position({y:24+(t?16:0)}),this.item_overview_window.update_size({height:76+(t?16:0)}),this.overview_shifted=t)}char_change(){if(this.selected_char_index=this.chars_menu.selected_index,this.basic_info_window.set_char(this.data.info.party_data.members[this.selected_char_index]),this.set_item_icons(),this.choosing_give_destination){if(this.item_options_window.item.type===h.item_types.ABILITY_GRANTOR);else if(this.item_options_window.item.type!==h.item_types.GENERAL_ITEM){const t=Object.assign({},this.item_options_window.item_obj,{equipped:!1});this.item_change_stats_window.open(this.data.info.party_data.members[this.selected_char_index],this.item_options_window.item,t),this.item_change_stats_window.compare_items()}}else this.item_choose_window.window_open&&!this.item_options_window.window_open&&(this.item_choose_window.close(),this.item_choose_window.open(this.chars_menu.selected_index))}char_choose(){if(this.choosing_give_destination){if(this.data.info.party_data.members[this.selected_char_index].key_name===this.item_options_window.char.key_name)return;this.chars_menu.deactivate()}else this.chars_menu.deactivate(),this.choosing_item=!0,this.set_guide_window_text(),this.item_choose_window.open(this.selected_char_index,()=>{this.on_item_choose_close()},void 0,this.selected_item_pos);this.item_choose_window.grant_control(this.open_char_select.bind(this),()=>{const t=this.item_choose_window;this.selected_item_pos={page:t.page_index,index:t.selected_element_index};const e=t.element_list[t.elements[t.selected_element_index].key_name],i=t.item_objs[t.selected_element_index];this.item_choose(e,i)},this.chars_menu.next_char.bind(this.chars_menu),this.chars_menu.previous_char.bind(this.chars_menu))}on_item_choose_close(){this.choosing_item=!1,this.chars_menu.activate(),this.set_guide_window_text(),this.set_description_window_text(),this.set_item_icons(),this.item_change_stats_window.window_open&&this.item_change_stats_window.close()}item_change(t,e){this.set_description_window_text(t.description),this.item_change_stats_window.window_open&&this.item_change_stats_window.close(),t.type===h.item_types.ABILITY_GRANTOR||t.type!==h.item_types.GENERAL_ITEM&&this.item_change_stats_window.open(this.data.info.party_data.members[this.selected_char_index],t,e)}item_choose(t,e){this.data.control_manager.reset(),this.item_options_window.open(e,t,this.data.info.party_data.members[this.selected_char_index],this.item_change_stats_window,this,(t,e)=>{this.shift_item_overview(!1),t?(this.selected_char_index=e,this.open_char_select()):this.char_choose()},()=>{t.type===h.item_types.ABILITY_GRANTOR||t.type!==h.item_types.GENERAL_ITEM&&(this.item_change_stats_window.update_info(!1),this.item_change_stats_window.hide_arrows())}),this.item_choose_window.deactivate()}set_guide_window_text(){this.choosing_item?this.guide_window.update_text(this.guide_window_msgs.choosing_item,this.guide_window_text):this.guide_window.update_text(this.guide_window_msgs.choosing_char,this.guide_window_text)}set_description_window_text(t){this.choosing_item?this.description_window.update_text(t,this.description_window_text):this.description_window.update_text(this.data.info.party_data.coins+"    Coins",this.description_window_text)}set_item_icons(){this.item_overview_window.remove_from_group();let t=0;for(let e=0;e<this.data.info.party_data.members[this.selected_char_index].items.length;++e){const i=this.data.info.party_data.members[this.selected_char_index].items[e],s=i.key_name;if(s in this.data.info.items_list){const e=d+11+Math.ceil(t%5*(u+_.ICON_WIDTH)),n=d+12+(t/5|0)*(3+_.ICON_HEIGHT);if(this.item_overview_window.create_at_group(e,n,"items_icons",void 0,s),i.equipped&&this.item_overview_window.create_at_group(e+7,n+8,"equipped"),i.quantity>1){let t=this.game.add.bitmapText(e+7,n+8,"gs-item-bmp-font",i.quantity.toString());this.item_overview_window.add_sprite_to_group(t)}++t}}}open_char_select(){this.item_choose_window.window_open&&this.item_choose_window.close(),this.item_change_stats_window.window_open&&this.item_change_stats_window.close(),this.item_overview_window.open||this.item_overview_window.show(void 0,!1),this.arrange_window.open||this.arrange_window.show(void 0,!1),this.chars_menu.is_open||this.chars_menu.open(this.selected_char_index,c.CharsMenuModes.MENU),this.shift_item_overview(!1),this.chars_menu.select_char(this.selected_char_index),this.chars_menu.grant_control(this.close_menu.bind(this),this.char_choose.bind(this))}open_menu(t){this.basic_info_window.open(this.data.info.party_data.members[this.selected_char_index]),this.close_callback=t,this.is_open=!0,this.set_item_icons(),this.set_guide_window_text(),this.set_description_window_text(),this.guide_window.show(void 0,!1),this.description_window.show(void 0,!1),this.item_overview_window.show(void 0,!1),this.arrange_window.show(void 0,!1),this.open_char_select()}close_menu(t=!1){this.data.cursor_manager.hide(),this.data.control_manager.reset(),this.chars_menu.close(),this.basic_info_window.close(),this.item_change_stats_window.close(),this.is_open=!1,this.guide_window.close(void 0,!1),this.description_window.close(void 0,!1),this.item_overview_window.close(void 0,!1),this.arrange_window.close(void 0,!1),null!==this.close_callback&&this.close_callback(t)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ItemOptionsWindow=void 0;const s=i(2),n=i(1),a=i(96),_=i(32),o=i(97),r=i(8),h=i(4),c=8+n.FONT_SIZE,l=[96,136,176],d=[36,44];e.ItemOptionsWindow=class{constructor(t,e){this.game=t,this.data=e,this.item_obj=null,this.item=null,this.char=null,this.stats_window=null,this.item_menu=null,this.window_open=!1,this.window_active=!1,this.x=104,this.y=0,this.base_window=new s.Window(this.game,this.x,this.y,132,52),this.group=this.game.add.group(),this.text_sprites={use:this.base_window.set_text_in_position("Use",8,32),equip:this.base_window.set_text_in_position("Equip",48,32),details:this.base_window.set_text_in_position("Details",88,32),give:this.base_window.set_text_in_position("Give",8,32+n.FONT_SIZE),remove:this.base_window.set_text_in_position("Remove",48,32+n.FONT_SIZE),drop:this.base_window.set_text_in_position("Drop",88,32+n.FONT_SIZE)},this.horizontal_index=0,this.vertical_index=0,this.option_active={use:!0,equip:!0,details:!0,give:!0,remove:!0,drop:!0},this.give_item_options_window=new o.GiveItemWindow(this.game,this.data),this.item_quantity_manager_window=new _.ItemQuantityManagerWindow(this.game,this.data),this.drop_item_window=new a.DropItemWindow(this.game,this.data),this.action_message_window=new s.Window(this.game,122,66,67,20)}hide(){this.base_window.group.alpha=0}show(){this.base_window.group.alpha=1}hide_text(){for(let t in this.text_sprites)this.text_sprites[t].text.alpha=this.text_sprites[t].shadow.alpha=0}show_text(){for(let t in this.text_sprites)this.text_sprites[t].text.alpha=this.text_sprites[t].shadow.alpha=1}next_vertical(){this.vertical_index<1?this.choose_position(this.vertical_index+1,this.horizontal_index):this.choose_position(0,this.horizontal_index)}previous_vertical(){this.vertical_index>0?this.choose_position(this.vertical_index-1,this.horizontal_index):this.choose_position(1,this.horizontal_index)}next_horizontal(){this.horizontal_index<2?this.choose_position(this.vertical_index,this.horizontal_index+1):this.choose_position(this.vertical_index,0)}previous_horizontal(){this.horizontal_index>0?this.choose_position(this.vertical_index,this.horizontal_index-1):this.choose_position(this.vertical_index,2)}choose_position(t,e){this.vertical_index=t,this.horizontal_index=e;let i=l[this.horizontal_index],s=d[this.vertical_index],n={type:h.CursorManager.CursorTweens.POINT,variant:h.PointVariants.NORMAL};this.data.cursor_manager.move_to({x:i,y:s},{animate:!1,tween_config:n}),this.on_change()}set_available_options(){this.show_text(),!this.item.use_ability||this.item_obj.broken?(this.text_sprites.use.text.tint=6316128,this.option_active.use=!1):(this.text_sprites.use.text.tint=16777215,this.option_active.use=!0),this.item.equipable&&!this.item_obj.equipped&&this.item.equipable_chars.includes(this.char.key_name)?(this.text_sprites.equip.text.tint=16777215,this.option_active.equip=!0):(this.text_sprites.equip.text.tint=6316128,this.option_active.equip=!1),this.data.info.party_data.members.length<=1?(this.text_sprites.give.text.tint=6316128,this.option_active.give=!1):(this.text_sprites.give.text.tint=16777215,this.option_active.give=!0),this.item.equipable&&this.item_obj.equipped&&this.item.equipable_chars.includes(this.char.key_name)?(this.text_sprites.remove.text.tint=16777215,this.option_active.remove=!0):(this.text_sprites.remove.text.tint=6316128,this.option_active.remove=!1),this.item.important_item?(this.text_sprites.drop.text.tint=6316128,this.option_active.drop=!1):(this.text_sprites.drop.text.tint=16777215,this.option_active.drop=!0)}set_header(){this.icon_sprite=this.base_window.create_at_group(8,8,"items_icons",void 0,this.item.key_name),this.char_name=this.base_window.set_text_in_position(this.char.name,27,8),this.item_name=this.base_window.set_text_in_position(this.item.name,27,c),this.equip_sprite=null,this.item_obj.equipped&&(this.equip_sprite=this.base_window.create_at_group(15,16,"equipped")),this.item_count_sprite=null,this.item_obj.quantity>1&&(this.item_count_sprite=this.game.add.bitmapText(15,16,"gs-item-bmp-font",this.item_obj.quantity.toString()),this.base_window.add_sprite_to_group(this.item_count_sprite))}unset_header(){this.base_window.remove_from_group(this.icon_sprite),this.base_window.remove_text(this.char_name),this.base_window.remove_text(this.item_name),this.equip_sprite&&this.base_window.remove_from_group(this.equip_sprite),this.item_count_sprite&&this.base_window.remove_from_group(this.item_count_sprite)}update_position(){this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y}open_action_message_window(t,e){this.action_message_window.set_text([t]),this.data.cursor_manager.hide(),void 0!==this.stats_update_callback&&this.stats_update_callback(),this.action_message_window.show(void 0,!0,()=>{e()}),this.data.control_manager.simple_input(()=>{this.action_message_window.close(),this.data.control_manager.reset()})}on_choose(){0===this.horizontal_index?1===this.vertical_index&&this.option_active.give&&(this.deactivate(),this.give_item_options_window.open(this.item_obj,this.item,this.char,this.item_menu,()=>{this.data.cursor_manager.show(),this.item_menu.choosing_give_destination=!1,this.item_menu.shift_item_overview(!1),this.give_item_options_window.choosing_char&&this.open_options(this.vertical_index,this.horizontal_index)})):1===this.horizontal_index?(0===this.vertical_index&&this.option_active.equip&&(this.char.equip_item(this.item_obj.index),this.open_action_message_window("Equipped.",()=>{this.close(this.close_callback)})),1===this.vertical_index&&this.option_active.remove&&(this.char.unequip_item(this.item_obj.index),this.open_action_message_window("Removed.",()=>{this.close(this.close_callback)}))):2===this.horizontal_index&&1===this.vertical_index&&this.option_active.drop&&(this.deactivate(),this.drop_item_window.open(this.item_obj,this.item,this.char,this.item_menu,()=>{this.drop_item_window.dropped?(this.hide_text(),this.item_menu.item_choose_window.close(),this.item_menu.shift_item_overview(!0,!1),this.open_action_message_window("Dropped it.",()=>{this.close(this.close_callback)})):this.open_options(this.vertical_index,this.horizontal_index)}))}on_change(){this.stats_window.hide_arrows(),this.stats_window.window_open&&this.stats_window.close(),this.stats_window.open(this.char,this.item,this.item_obj),0===this.horizontal_index?(0===this.vertical_index&&this.option_active.use&&this.stats_window.hide(),1===this.vertical_index&&this.option_active.give&&this.item_obj.equipped&&this.stats_window.compare_items(!0)):1===this.horizontal_index?(0===this.vertical_index&&this.option_active.equip&&this.stats_window.compare_items(),1===this.vertical_index&&this.option_active.remove&&this.stats_window.compare_items(!0)):2===this.horizontal_index&&1===this.vertical_index&&this.option_active.drop&&this.item_obj.equipped&&this.stats_window.compare_items(!0)}open_options(t=0,e=0){this.set_header(),this.item_menu.item_choose_window.deactivate(),this.item.type===r.item_types.ABILITY_GRANTOR||this.item.type!==r.item_types.GENERAL_ITEM&&(this.item_menu.item_change_stats_window.open(this.data.info.party_data.members[this.item_menu.item_choose_window.char_index],this.item,this.item_obj),this.item_menu.item_change_stats_window.compare_items()),this.item_menu.chars_menu.select_char(this.item_menu.item_choose_window.char_index),this.item_menu.item_options_window.stats_window.compare_items(!0),this.choose_position(t,e);let i=[{key:this.data.gamepad.LEFT,on_down:this.previous_horizontal.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.next_horizontal.bind(this)},{key:this.data.gamepad.UP,on_down:this.next_vertical.bind(this)},{key:this.data.gamepad.DOWN,on_down:this.previous_vertical.bind(this)},{key:this.data.gamepad.A,on_down:this.on_choose.bind(this)},{key:this.data.gamepad.B,on_down:this.close.bind(this,this.close_callback)}];this.data.control_manager.set_control(i,{loop_configs:{vertical:!0,horizontal:!0}})}open(t,e,i,s,n,a,_,o){this.item_obj=t,this.item=e,this.char=i,this.stats_window=s,this.item_menu=n,this.close_callback=a,this.stats_update_callback=_,this.update_position(),this.set_available_options(),this.on_change(),this.open_options(),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0,void 0!==o&&o()},!1)}close(t){this.data.cursor_manager.hide(),this.data.control_manager.reset(),this.unset_header(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t()},!1)}activate(){this.set_header(),this.set_available_options(),this.on_change(),this.window_active=!0}deactivate(){this.unset_header(),this.data.cursor_manager.hide(),this.window_active=!1}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DropItemWindow=void 0;const s=i(2),n=i(4);e.DropItemWindow=class{constructor(t,e){this.game=t,this.data=e,this.item_menu=null,this.item_quant_win=null,this.base_window=new s.Window(this.game,104,26,132,76),this.item_obj=null,this.item=null,this.char=null,this.window_open=!1,this.window_active=!1,this.quantity_to_remove=0,this.answer_index=0,this.base_window.set_text(["Are you sure you","want to drop it?"],16,22,1),this.base_window.set_text_in_position("Yes",32,46),this.base_window.set_text_in_position("No",32,62),this.icon_name=this.base_window.set_text_in_position("",32,8),this.icon=null,this.item_count_sprite=null,this.group=this.game.add.group(),this.dropped=!1}change_answer(){46===this.answer_index?this.set_answer_index(62):this.set_answer_index(46)}set_answer_index(t){this.answer_index=t;let e=46===t?76:92,i={type:n.CursorManager.CursorTweens.POINT,variant:n.PointVariants.NORMAL};this.data.cursor_manager.move_to({x:114,y:e},{animate:!1,tween_config:i})}update_position(){this.group.x=this.game.camera.x+104,this.group.y=this.game.camera.y+26}set_info(){this.base_window.update_text(this.item.name,this.icon_name),this.icon=this.base_window.create_at_group(16,4,"items_icons",void 0,this.item.key_name),this.quantity_to_remove>1&&(this.item_count_sprite=this.game.add.bitmapText(23,12,"gs-item-bmp-font",this.quantity_to_remove.toString()),this.base_window.add_sprite_to_group(this.item_count_sprite))}unset_info(){this.base_window.remove_from_group(this.icon),this.item_count_sprite&&this.base_window.remove_from_group(this.item_count_sprite)}on_drop(){46===this.answer_index&&(this.char.remove_item(this.item_obj,this.quantity_to_remove),this.dropped=!0),this.close()}on_quantity_select(){this.quantity_to_remove=this.item_quant_win.window_open?this.item_quant_win.choosen_quantity:this.item_obj.quantity,this.set_answer_index(46),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0,void 0!==this.open_callback&&this.open_callback()},!1);let t=[{key:this.data.gamepad.UP,on_down:this.change_answer.bind(this)},{key:this.data.gamepad.DOWN,on_down:this.change_answer.bind(this)},{key:this.data.gamepad.A,on_down:this.on_drop.bind(this)},{key:this.data.gamepad.B,on_down:this.close.bind(this)}];this.data.control_manager.set_control(t,{loop_configs:{vertical:!0}})}on_item_select(){this.item_obj.quantity>1?(this.item_quant_win.open(this.item_obj,this.item,this.char),this.item_quant_win.grant_control(this.close.bind(this),this.on_quantity_select.bind(this))):this.on_quantity_select()}open(t,e,i,s,n,a){this.item_obj=t,this.item=e,this.char=i,this.item_menu=s,this.close_callback=n,this.open_callback=a,this.quantity_to_remove=0,this.item_quant_win=this.item_menu.item_options_window.item_quantity_manager_window,this.answer_index=0,this.dropped=!1,this.set_info(),this.update_position(),this.on_item_select()}close(){this.unset_info(),this.item_quant_win.window_open&&this.item_quant_win.close(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==this.close_callback&&this.close_callback()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GiveItemWindow=void 0;const s=i(2),n=i(1),a=i(4),_=8+n.FONT_SIZE,o=_+n.FONT_SIZE;e.GiveItemWindow=class{constructor(t,e){this.game=t,this.data=e,this.close_callback=null,this.item_menu=null,this.item_obj=null,this.item=null,this.char=null,this.answer_index=0,this.window_open=!1,this.window_active=!1,this.choosing_char=!1,this.asking_for_equip=!1,this.base_window=new s.Window(this.game,104,0,132,36),this.item_quantity_manager_window=null,this.group=this.game.add.group(),this.char_name=this.base_window.set_text_in_position("",27,8),this.item_name=this.base_window.set_text_in_position("",27,_),this.action_text=this.base_window.set_text_in_position("",8,o),this.yes_text=this.base_window.set_text_in_position("Yes",112,8),this.no_text=this.base_window.set_text_in_position("No",112,24),this.yes_text.text.alpha=this.no_text.text.alpha=0,this.yes_text.shadow.alpha=this.no_text.shadow.alpha=0,this.icon_sprite=null,this.equip_sprite=null,this.item_count_sprite=null}change_answer(){8===this.answer_index?this.set_answer_index(24):this.set_answer_index(8)}set_answer_index(t){this.answer_index=t;let e=8===t?12:28,i={type:a.CursorManager.CursorTweens.POINT,variant:a.PointVariants.NORMAL};this.data.cursor_manager.move_to({x:194,y:e},{animate:!1,tween_config:i})}update_position(){this.group.x=this.game.camera.x+104,this.group.y=this.game.camera.y+0}set_header(){this.unset_header(),this.icon_sprite=this.base_window.create_at_group(8,8,"items_icons",void 0,this.item.key_name),this.base_window.update_text(this.char.name,this.char_name,27,8),this.base_window.update_text(this.item.name,this.item_name,27,_),this.choosing_char?this.base_window.update_text("Give it to whom?",this.action_text,27,o):this.asking_for_equip&&(this.yes_text.text.alpha=this.no_text.text.alpha=1,this.yes_text.shadow.alpha=this.no_text.shadow.alpha=1,this.base_window.update_text("Equip this item?",this.action_text,8,o)),this.equip_sprite=null,this.item_obj.equipped&&(this.equip_sprite=this.base_window.create_at_group(15,16,"equipped")),this.item_count_sprite=null,this.item_obj.quantity>1&&(this.item_count_sprite=this.game.add.bitmapText(15,16,"gs-item-bmp-font",this.item_obj.quantity.toString()),this.base_window.add_sprite_to_group(this.item_count_sprite))}unset_header(){this.base_window.remove_from_group(this.icon_sprite),this.base_window.update_text("",this.char_name,27,8),this.base_window.update_text("",this.item_name,27,_),this.base_window.update_text("",this.action_text,8,o),this.yes_text.text.alpha=this.no_text.text.alpha=0,this.yes_text.shadow.alpha=this.no_text.shadow.alpha=0,this.equip_sprite&&this.base_window.remove_from_group(this.equip_sprite),this.item_count_sprite&&this.base_window.remove_from_group(this.item_count_sprite)}on_give(t){t||(t=8===this.answer_index);let e=this.item_menu.chars_menu,i=e.lines[e.current_line][e.selected_index],s={key_name:this.item_obj.key_name,equipped:t,quantity:this.item_quantity_manager_window.window_open?this.item_quantity_manager_window.choosen_quantity:this.item_obj.quantity};this.item_quantity_manager_window.window_open&&this.item_quantity_manager_window.close(),this.char.remove_item(this.item_obj,s.quantity),i.add_item(s.key_name,s.quantity,t),this.base_window.update_text("",this.action_text,8,o),this.yes_text.text.alpha=this.no_text.text.alpha=0,this.yes_text.shadow.alpha=this.no_text.shadow.alpha=0,this.item_menu.item_options_window.open_action_message_window("Given.",()=>{const t=this.data.info.party_data.members.indexOf(this.char);this.item_menu.item_options_window.close(()=>{this.item_menu.item_options_window.close_callback(!0,t)}),this.close()})}on_character_select(){this.choosing_char=!1,this.item_menu.choosing_give_destination=!1;let t=this.item_menu.chars_menu,e=t.lines[t.current_line][t.selected_index];if(this.asking_for_equip=this.item.equipable_chars.includes(e.key_name),this.asking_for_equip){this.set_header(),this.set_answer_index(8);let t=[{key:this.data.gamepad.UP,on_down:this.change_answer.bind(this)},{key:this.data.gamepad.DOWN,on_down:this.change_answer.bind(this)},{key:this.data.gamepad.A,on_down:this.on_give.bind(this)},{key:this.data.gamepad.B,on_down:this.on_give.bind(this,!1)}];this.data.control_manager.set_control(t,{loop_configs:{vertical:!0}})}else if(this.item_obj.quantity>1){let e=t.lines[t.current_line][t.selected_index];this.item_quantity_manager_window.open(this.item_obj,this.item,this.char,void 0,e),this.item_quantity_manager_window.grant_control(()=>{this.item_quantity_manager_window.close(),this.choosing_character()},this.on_give.bind(this))}else this.on_give(!1)}choosing_character(){this.choosing_char=!0,this.set_header(),this.item_menu.choosing_give_destination=!0,this.item_menu.chars_menu.select_char(this.item_menu.chars_menu.selected_index),this.item_menu.chars_menu.grant_control(this.close.bind(this),this.on_character_select.bind(this)),this.item_menu.item_overview_window.show(void 0,!1),this.item_menu.shift_item_overview(!0)}open(t,e,i,s,n,a){this.item_obj=t,this.item=e,this.char=i,this.choosing_char=!1,this.asking_for_equip=!1,this.item_menu=s,this.item_quantity_manager_window=this.item_menu.item_quant_win,this.answer_index=0,this.asking_for_equip&&this.set_answer_index(8),this.set_header(),this.update_position(),this.close_callback=n,this.base_window.show(()=>{this.window_open=!0,this.window_active=!0,a&&a()},!1),this.choosing_character()}close(){this.data.cursor_manager.hide(),this.unset_header(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,this.close_callback&&this.close_callback()},!1)}active(){this.window_active=!0,this.data.cursor_manager.hide()}deactive(){this.window_active=!1,this.data.cursor_manager.hide()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.StatsCheckWithItemWindow=void 0;const s=i(2),n=i(8),a=i(9),_=i(12),o=i(3),r=i(5);e.StatsCheckWithItemWindow=class{constructor(t,e){this.game=t,this.data=e,this.char=null,this.window_open=!1,this.x=0,this.y=40,this.base_window=new s.Window(this.game,this.x,this.y,100,92),this.avatar_group=t.add.group(),this.avatar_group.alpha=0,this.x_avatar=this.x+8,this.y_avatar=this.y+8,this.avatar=null,this.up_arrows={[a.effect_types.ATTACK]:this.base_window.create_at_group(53,46,"up_arrow"),[a.effect_types.DEFENSE]:this.base_window.create_at_group(53,62,"up_arrow"),[a.effect_types.AGILITY]:this.base_window.create_at_group(53,78,"up_arrow")},this.down_arrows={[a.effect_types.ATTACK]:this.base_window.create_at_group(53,46,"down_arrow"),[a.effect_types.DEFENSE]:this.base_window.create_at_group(53,62,"down_arrow"),[a.effect_types.AGILITY]:this.base_window.create_at_group(53,78,"down_arrow")},this.preview_stats_texts={[a.effect_types.ATTACK]:this.base_window.set_text_in_position("0",94,48,!0),[a.effect_types.DEFENSE]:this.base_window.set_text_in_position("0",94,64,!0),[a.effect_types.AGILITY]:this.base_window.set_text_in_position("0",94,80,!0)},this.hide_arrows(),this.base_window.set_text_in_position("Lv",48,24),this.base_window.set_text_in_position("Attack",8,40),this.base_window.set_text_in_position("Defense",8,56),this.base_window.set_text_in_position("Agility",8,72),this.name_text=this.base_window.set_text_in_position("0",40,8),this.lv_text=this.base_window.set_text_in_position("0",80,24),this.attack_text=this.base_window.set_text_in_position("0",40,48,!0),this.defense_text=this.base_window.set_text_in_position("0",40,64,!0),this.agility_text=this.base_window.set_text_in_position("0",40,80,!0)}update_position(){this.avatar_group.x=this.game.camera.x+this.x_avatar,this.avatar_group.y=this.game.camera.y+this.y_avatar}hide(){this.base_window.group.alpha=0,this.avatar_group.alpha=0}show(){this.window_open&&(this.base_window.group.alpha=1,this.avatar_group.alpha=1)}update_info(t=!0){this.base_window.update_text(this.char.name,this.name_text),this.base_window.update_text(this.char.level.toString(),this.lv_text),this.base_window.update_text(this.char.atk.toString(),this.attack_text),this.base_window.update_text(this.char.def.toString(),this.defense_text),this.base_window.update_text(this.char.agi.toString(),this.agility_text),this.avatar&&this.avatar.destroy(),this.avatar=this.avatar_group.create(0,0,"avatars",this.char.key_name),t&&this.compare_items()}set_compare_arrows(t,e,i,s){let n,_=o.find(this.item.effects,{type:t});if(void 0!==_){const i=null===this.char.equip_slots[e]?null:this.char.equip_slots[e].key_name;n=this.char.preview_stats_by_effect(t,_,i)}if(null===this.char.equip_slots[e]){if(void 0===_)return;this.update_preview_text(n,t),this.up_arrows[t].alpha=1}else{if(void 0===o.find(this.data.info.items_list[this.char.equip_slots[e].key_name].effects,{type:t})&&void 0===_)return;(void 0===_||s)&&(_={type:t,quantity:0,operator:a.effect_operators.PLUS},n=this.char.preview_stats_by_effect(t,_,this.char.equip_slots[e].key_name));const r=this.char[i];n>r?(this.up_arrows[t].alpha=1,this.update_preview_text(n,t)):n<r&&(this.down_arrows[t].alpha=1,this.update_preview_text(n,t))}}update_preview_text(t,e){this.preview_stats_texts[e].text.alpha=1,this.preview_stats_texts[e].shadow.alpha=1,this.base_window.update_text(t.toString(),this.preview_stats_texts[e])}hide_arrows(){for(let t in this.up_arrows)this.up_arrows[t].alpha=0,this.down_arrows[t].alpha=0,this.preview_stats_texts[t].text.alpha=0,this.preview_stats_texts[t].shadow.alpha=0}compare_items(t=!1){if(this.hide_arrows(),this.item_obj.equipped&&!t)return;if(!this.item.equipable_chars.includes(this.char.key_name))return;let e=null;switch(this.item.type){case n.item_types.WEAPONS:e="weapon";break;case n.item_types.HEAD_PROTECTOR:e="head";break;case n.item_types.CHEST_PROTECTOR:e="chest";break;case n.item_types.ARMOR:e="body"}this.set_compare_arrows(a.effect_types.ATTACK,_.item_equip_slot[this.item.type],r.main_stats.ATTACK,t),this.set_compare_arrows(a.effect_types.DEFENSE,_.item_equip_slot[this.item.type],r.main_stats.DEFENSE,t),this.set_compare_arrows(a.effect_types.AGILITY,_.item_equip_slot[this.item.type],r.main_stats.AGILITY,t)}open(t,e,i,s){this.update_position(),this.avatar_group.alpha=1,this.char=t,this.item=e,this.item_obj=i,this.update_info(),this.base_window.show(()=>{this.window_open=!0,void 0!==s&&s()},!1)}close(t){this.avatar_group.alpha=0,this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainDjinnMenu=void 0;const s=i(100),n=i(101),a=i(105);e.MainDjinnMenu=class{constructor(t,e){this.game=t,this.data=e,this.close_callback=null,this.is_open=!1,this.selected_char_index=0,this.chars_quick_info_window=new s.CharsQuickInfoDjinnWindow(this.game),this.djinn_action_window=new a.DjinnActionWindow(this.game),this.djinni_list_window=new n.DjinnListWindow(this.game,this.data)}open_menu(t){this.close_callback=t,this.selected_char_index=0,this.chars_quick_info_window.open(this.data.info.party_data.members[this.selected_char_index]),this.djinni_list_window.open(this.chars_quick_info_window,this.djinn_action_window,this.close_menu.bind(this)),this.djinn_action_window.open(),this.is_open=!0}close_menu(t=!1){this.data.cursor_manager.hide(),this.data.control_manager.reset(),this.is_open=!1,this.chars_quick_info_window.close(),this.djinni_list_window.window_open&&this.djinni_list_window.close(),this.djinn_action_window.close(),null!==this.close_callback&&this.close_callback(t)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CharsQuickInfoDjinnWindow=void 0;const s=i(2),n=i(1),a=8+n.FONT_SIZE;e.CharsQuickInfoDjinnWindow=class{constructor(t){this.game=t,this.char=null,this.window_open=!1,this.x=0,this.y=0,this.base_window=new s.Window(this.game,this.x,this.y,100,36),this.char_name=this.base_window.set_text_in_position("",8,8),this.char_class=this.base_window.set_text_in_position("",8,a),this.base_window.set_text_in_position("Lv",56,8),this.level_number=this.base_window.set_text_in_position("",94,8,!0)}update_text(){this.base_window.update_text(this.char.name,this.char_name),this.base_window.update_text(this.char.class.name,this.char_class),this.base_window.update_text(this.char.level.toString(),this.level_number)}set_char(t){this.char=t,this.update_text()}open(t,e){this.char=t,this.update_text(),this.base_window.show(()=>{this.window_open=!0,void 0!==e&&e()},!1)}close(t){this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DjinnListWindow=void 0;const s=i(2),n=i(7),a=i(1),_=i(0),o=i(102),r=i(103),h=i(104),c=0,l=1,d=2;e.DjinnListWindow=class{constructor(t,e){this.game=t,this.data=e,this.close_callback=null,this.base_window=new s.Window(this.game,0,40,236,116),this.group=this.game.add.group(),this.group.alpha=0,this.chars_sprites_group=this.game.add.group(),this.group.add(this.chars_sprites_group),this.window_open=!1,this.window_active=!1,this.selected_char_index=0,this.selected_djinn_index=0,this.action_text_selected=!1,this.page_index=0,this.chars_sprites={},this.djinns_sprites=[],this.djinn_description=this.base_window.set_text_in_position("",8,104),this.page_number_bar_highlight=this.get_highlight_bar(),this.on_action_bar_highlight=this.get_highlight_bar(),this.on_action_bar_highlight.alpha=0,this.sizes=[],this.djinn_names=[],this.active_djinn_sprite=null,this.djinn_status_change_header_window=new o.DjinnModeHeaderWindow(this.game,this.data),this.djinn_char_stats_window_left=new r.DjinnCharStatsWindow(this.game),this.djinn_char_stats_window_right=new r.DjinnCharStatsWindow(this.game,120),this.djinn_psynergy_window=new h.DjinnPsynergyWindow(this.game,this.data),this.init_djinn_sprites(),this.init_djinni_status_texts()}get_highlight_bar(){const t=this.game.add.graphics(0,0);return t.blendMode=PIXI.blendModes.SCREEN,this.group.add(t),t.beginFill(this.base_window.color,1),t.drawRect(0,0,48,8),t.endFill(),t}update_position(){this.group.x=this.game.camera.x+0,this.group.y=this.game.camera.y+40}next_character(){this.selected_char_index!==this.sizes.length-1&&(this.setting_djinn_status&&(this.selected_char_index+1===this.setting_djinn_status_char_index||this.sizes[this.selected_char_index+1]<this.sizes[this.setting_djinn_status_char_index]&&this.action_text_selected)?(this.selected_char_index=this.selected_char_index+1,this.select_action_text(),this.on_char_change()):(this.action_text_selected&&(this.selected_djinn_index=0),this.select_djinn(this.selected_char_index+1,this.selected_djinn_index)))}previous_character(){0!==this.selected_char_index&&(this.setting_djinn_status&&(this.selected_char_index-1===this.setting_djinn_status_char_index||this.sizes[this.selected_char_index-1]<this.sizes[this.setting_djinn_status_char_index]&&this.action_text_selected)?(this.selected_char_index=this.selected_char_index-1,this.select_action_text(),this.on_char_change()):(this.action_text_selected&&(this.selected_djinn_index=0),this.select_djinn(this.selected_char_index-1,this.selected_djinn_index)))}next_djinni(){this.setting_djinn_status&&this.selected_char_index===this.setting_djinn_status_char_index||this.sizes[this.selected_char_index]<=1||(this.setting_djinn_status&&this.selected_djinn_index===this.sizes[this.selected_char_index]-1&&!this.action_text_selected&&this.sizes[this.selected_char_index]<this.sizes[this.setting_djinn_status_char_index]?this.select_action_text():this.action_text_selected||this.selected_djinn_index===this.sizes[this.selected_char_index]-1?this.select_djinn(this.selected_char_index,0,!0):this.select_djinn(this.selected_char_index,this.selected_djinn_index+1))}previous_djinni(){this.setting_djinn_status&&this.selected_char_index===this.setting_djinn_status_char_index||this.sizes[this.selected_char_index]<=1||(this.setting_djinn_status&&0===this.selected_djinn_index&&!this.action_text_selected&&this.sizes[this.selected_char_index]<this.sizes[this.setting_djinn_status_char_index]?this.select_action_text():this.action_text_selected||0===this.selected_djinn_index?this.select_djinn(this.selected_char_index,this.sizes[this.selected_char_index]-1,!0):this.select_djinn(this.selected_char_index,this.selected_djinn_index-1))}select_action_text(){this.action_text_selected=!0,this.set_highlight_bar(),this.selected_char_index===this.setting_djinn_status_char_index?this.set_djinn_sprite():this.active_djinn_sprite.alpha=0,this.data.cursor_manager.clear_tweens(),this.move_cursor(0+58*this.selected_char_index,60)}select_djinn(t,e,i=!1){this.action_text_selected=!1,(this.selected_djinn_index!==e||i)&&(this.selected_djinn_index=e,this.on_djinn_change()),(this.selected_char_index!==t||i)&&(this.selected_char_index=t,this.on_char_change()),this.data.cursor_manager.clear_tweens(),this.move_cursor(0+58*t,68+8*e)}init_djinn_sprites(){for(let t=0;t<4;++t){this.djinns_sprites.push({});for(let e in _.elements){const i=_.elements[e];if(i===_.elements.NO_ELEMENT)continue;const s=50+58*t;this.djinns_sprites[t][i]=this.chars_sprites_group.create(s,23,i+"_djinn_set"),this.djinns_sprites[t][i].anchor.setTo(.5,1),this.djinns_sprites[t][i].scale.x=-1,this.djinns_sprites[t][i].alpha=0}}}init_djinni_status_texts(){this.djinni_status_texts=[];for(let t=0;t<4;++t){const e=16+58*t,i=16;this.djinni_status_texts.push(this.base_window.set_text_in_position("",e,i))}}set_djinn_sprite(t=!0){const e=this.data.info.party_data.members[this.selected_char_index];if(this.setting_djinn_status&&this.selected_djinn_index===e.djinni.length)return;const i=this.data.info.djinni_list[e.djinni[this.selected_djinn_index]];null!==this.active_djinn_sprite&&(this.active_djinn_sprite.alpha=0,this.active_djinn_sprite.animations.stop());const s=this.djinns_sprites[this.selected_char_index][i.element];let a,_;switch(this.active_djinn_sprite=s,t&&(s.scale.setTo(0,0),this.game.add.tween(s.scale).to({x:-1,y:1},Phaser.Timer.QUARTER>>1,Phaser.Easing.Linear.None,!0)),s.alpha=1,i.status){case n.djinn_status.RECOVERY:_="left";case n.djinn_status.STANDBY:_="down",a="standby";break;case n.djinn_status.SET:_="down",a="set"}this.data.info.djinni_sprites[i.element].setAnimation(s,a),s.animations.play(a+"_"+_)}load_page(){this.sizes=new Array(this.data.info.party_data.members.length),this.djinn_names=[],this.stars=[];for(let t=0;t<4;++t){const e=4*this.page_index+t;if(e>=this.data.info.party_data.members.length)continue;const i=this.data.info.party_data.members[e],s=i.key_name;if(!(s in this.chars_sprites)){const t=i.sprite_base.getActionKey(_.base_actions.IDLE);this.chars_sprites[s]=this.chars_sprites_group.create(0,0,t),this.chars_sprites[s].anchor.setTo(.5,1),i.sprite_base.setAnimation(this.chars_sprites[s],_.base_actions.IDLE)}const n=i.sprite_base.getAnimationKey(_.base_actions.IDLE,_.reverse_directions[_.directions.down]);this.chars_sprites[s].animations.play(n);const a=32+58*t;this.chars_sprites[s].x=a,this.chars_sprites[s].y=23,this.chars_sprites[s].alpha=1,this.djinn_names.push([]),this.stars.push([]),this.update_djinn_list(t)}}update_djinn_list(t){this.djinn_names[t].forEach(t=>{this.base_window.remove_text(t)}),this.stars[t].forEach(t=>{this.base_window.remove_from_group(t,!0)});const e=this.data.info.party_data.members[t].djinni;let i=[],s=[];for(let _=0;_<e.length;++_){const o=this.data.info.djinni_list[e[_]],r=17+58*t,h=25+_*a.FONT_SIZE;s.push(this.base_window.create_at_group(r,h,o.element+"_star"));const c=24+58*t,l=24+_*a.FONT_SIZE;let d;switch(o.status){case n.djinn_status.SET:d=n.djinn_font_colors[n.djinn_status.SET];break;case n.djinn_status.STANDBY:d=n.djinn_font_colors[n.djinn_status.STANDBY];break;case n.djinn_status.RECOVERY:d=n.djinn_font_colors[n.djinn_status.RECOVERY]}const u=this.base_window.set_text_in_position(o.name,c,l,!1,!1,d);i.push(u)}this.sizes[t]=e.length,this.djinn_names[t]=i,this.stars[t]=s}unset_page(){for(let t in this.chars_sprites)this.chars_sprites[t].animations.stop(),this.chars_sprites[t].alpha=0;this.base_window.remove_from_group();for(let t=0;t<this.djinn_names.length;++t){const e=this.djinn_names[t];for(let t=0;t<e.length;++t)this.base_window.remove_text(e[t])}}set_highlight_bar(){this.setting_djinn_status&&this.action_text_selected?this.page_number_bar_highlight.alpha=0:(this.page_number_bar_highlight.alpha=1,this.page_number_bar_highlight.x=16+58*this.selected_char_index,this.page_number_bar_highlight.y=24+this.selected_djinn_index*a.FONT_SIZE),this.setting_djinn_status?(this.on_action_bar_highlight.alpha=1,this.on_action_bar_highlight.x=16+58*this.setting_djinn_status_char_index,this.on_action_bar_highlight.y=24+this.setting_djinn_status_djinn_index*a.FONT_SIZE):this.on_action_bar_highlight.alpha=0}update_djinn_description(){if(this.setting_djinn_status&&this.selected_djinn_index===this.data.info.party_data.members[this.selected_char_index].djinni.length)this.base_window.update_text("",this.djinn_description);else{const t=this.data.info.party_data.members[this.selected_char_index],e=this.data.info.djinni_list[t.djinni[this.selected_djinn_index]];this.base_window.update_text(e.description,this.djinn_description)}}set_action_text(){if(this.setting_djinn_status);else{const t=this.data.info.party_data.members[this.selected_char_index],e=this.data.info.djinni_list[t.djinni[this.selected_djinn_index]];this.djinn_action_window.set_action_text(e.status)}}on_char_change(){this.setting_djinn_status&&this.selected_char_index===this.setting_djinn_status_char_index?this.selected_djinn_index=this.setting_djinn_status_djinn_index:this.selected_djinn_index>=this.sizes[this.selected_char_index]&&(this.selected_djinn_index=this.sizes[this.selected_char_index]-1,this.move_cursor(0+58*this.selected_char_index,68+8*this.selected_djinn_index)),this.set_highlight_bar();const t=this.data.info.party_data.members[this.selected_char_index];this.chars_quick_info_window.set_char(t),this.set_action_text(),this.update_djinn_description(),this.set_djinn_sprite()}on_djinn_change(){this.set_highlight_bar(),this.set_action_text(),this.update_djinn_description(),this.set_djinn_sprite()}move_cursor(t,e,i){this.data.cursor_manager.move_to({x:t,y:e},{animate:!1},i)}grant_control(t,e,i){let s=[{key:this.data.gamepad.LEFT,on_down:this.previous_character.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.next_character.bind(this)},{key:this.data.gamepad.UP,on_down:this.previous_djinni.bind(this)},{key:this.data.gamepad.DOWN,on_down:this.next_djinni.bind(this)},{key:this.data.gamepad.A,on_down:e},{key:this.data.gamepad.B,on_down:t},{key:this.data.gamepad.R,on_down:i}];this.data.control_manager.set_control(s,{loop_configs:{vertical:!0,horizontal:!0}})}darken_font_color(t=!0){const e=this.data.info.party_data.members[this.setting_djinn_status_char_index];for(let i=0;i<this.djinn_names[this.setting_djinn_status_char_index].length;++i){const s=this.data.info.djinni_list[e.djinni[i]],a=t?_.change_brightness(n.djinn_font_colors[s.status],.7):n.djinn_font_colors[s.status];t&&i===this.setting_djinn_status_djinn_index||this.base_window.update_text_color(a,this.djinn_names[this.setting_djinn_status_char_index][i])}}set_djinn_operation(){const t=this.data.info.party_data.members[this.setting_djinn_status_char_index],e=this.data.info.djinni_list[t.djinni[this.setting_djinn_status_djinn_index]];if(this.setting_djinn_status_char_index!==this.selected_char_index){const i=this.data.info.party_data.members[this.selected_char_index];let s,a,_,o,r,h;this.action_text_selected?(s=[e.status===n.djinn_status.STANDBY?n.djinn_status.ANY:n.djinn_status.STANDBY],a=[e.status===n.djinn_status.STANDBY?n.djinn_status.ANY:e.status],_=[e],o=[e],r="Give"):(h=this.data.info.djinni_list[i.djinni[this.selected_djinn_index]],s=[h.status===n.djinn_status.STANDBY?n.djinn_status.ANY:h.status,e.status===n.djinn_status.STANDBY?n.djinn_status.ANY:n.djinn_status.STANDBY],a=[e.status===n.djinn_status.STANDBY?n.djinn_status.ANY:e.status,h.status===n.djinn_status.STANDBY?n.djinn_status.ANY:n.djinn_status.STANDBY],_=[h,e],o=[e,h],r="Trade"),this.djinn_char_stats_window_left.open(t,_,s,r),this.djinn_char_stats_window_right.open(i,o,a,r),this.djinn_char_stats_window_right.base_window.update_position({x:120}),this.djinn_status_change_header_window.open([t,i],o,s,r),this.deactivate(),this.view_state=c,this.djinn_psynergy_window.open(t,_,s,s=>{this.djinn_status_change_header_window.close(),this.djinn_char_stats_window_left.close(),this.djinn_char_stats_window_right.close(),s?("Trade"===r?(t.replace_djinn(e.key_name,h.key_name),i.replace_djinn(h.key_name,e.key_name)):"Give"===r&&(t.remove_djinn(e.key_name),i.add_djinn(e.key_name),this.selected_djinn_index=0),this.update_djinn_list(this.selected_char_index),this.update_djinn_list(this.setting_djinn_status_char_index),this.cancel_djinn_status_set()):this.grant_control(this.cancel_djinn_status_set.bind(this,!0),this.set_djinn_operation.bind(this)),this.activate()},!0,()=>{switch(++this.view_state,this.view_state>d&&(this.view_state=c),this.view_state){case c:this.djinn_psynergy_window.base_window.close(void 0,!1),this.djinn_char_stats_window_left.base_window.show(void 0,!1),this.djinn_char_stats_window_right.base_window.update_position({x:120}),this.djinn_status_change_header_window.set_action_info_text(`: ${t.name}'s Psy`);break;case l:this.djinn_psynergy_window.update_info(t,_,s),this.djinn_psynergy_window.base_window.show(void 0,!1),this.djinn_char_stats_window_right.base_window.close(void 0,!1),this.djinn_status_change_header_window.set_action_info_text(`: ${i.name}'s Psy`);break;case d:this.djinn_psynergy_window.update_info(i,o,a),this.djinn_char_stats_window_left.base_window.close(void 0,!1),this.djinn_char_stats_window_right.base_window.show(void 0,!1),this.djinn_char_stats_window_right.base_window.update_position({x:0}),this.djinn_status_change_header_window.set_action_info_text(": Status")}},r),this.djinn_psynergy_window.grant_control()}else{let i;switch(e.status){case n.djinn_status.SET:i=n.djinn_status.STANDBY;break;case n.djinn_status.STANDBY:i=n.djinn_status.SET}this.deactivate(),this.djinn_status_change_header_window.open([t],[e],[i]),this.djinn_char_stats_window_left.open(t,[e],[i]),this.djinn_psynergy_window.open(t,[e],[i],t=>{this.djinn_status_change_header_window.close(),this.djinn_char_stats_window_left.close(),t?(this.change_djinn_status(),this.cancel_djinn_status_set(!0)):this.grant_control(this.cancel_djinn_status_set.bind(this,!0),this.set_djinn_operation.bind(this)),this.activate()}),this.djinn_psynergy_window.grant_control()}}change_djinn_status(){let t=this.setting_djinn_status?this.setting_djinn_status_djinn_index:this.selected_djinn_index;const e=this.data.info.party_data.members[this.selected_char_index],i=this.data.info.djinni_list[e.djinni[t]];i.status===n.djinn_status.SET?(i.set_status(n.djinn_status.STANDBY,e),this.base_window.update_text_color(n.djinn_font_colors[n.djinn_status.STANDBY],this.djinn_names[this.selected_char_index][this.selected_djinn_index]),this.chars_quick_info_window.update_text(),this.set_action_text(),this.set_djinn_sprite(!1)):i.status===n.djinn_status.STANDBY&&(i.set_status(n.djinn_status.SET,e),this.base_window.update_text_color(n.djinn_font_colors[n.djinn_status.SET],this.djinn_names[this.selected_char_index][this.selected_djinn_index]),this.chars_quick_info_window.update_text(),this.set_action_text(),this.set_djinn_sprite(!1))}cancel_djinn_status_set(t=!1){if(this.setting_djinn_status){for(let t in this.chars_sprites)this.chars_sprites[t].y+=a.FONT_SIZE;for(let t=0;t<4;++t){for(let e in _.elements){const i=_.elements[e];i!==_.elements.NO_ELEMENT&&(this.djinns_sprites[t][i].y+=a.FONT_SIZE)}this.base_window.update_text("",this.djinni_status_texts[t]);const e=this.data.info.party_data.members[t];void 0!==e&&(this.sizes[t]=e.djinni.length)}t&&(this.selected_char_index=this.setting_djinn_status_char_index,this.selected_djinn_index=this.setting_djinn_status_djinn_index,this.set_highlight_bar()),this.darken_font_color(!1),this.setting_djinn_status_char_index=-1,this.setting_djinn_status_djinn_index=-1,this.setting_djinn_status=!1,this.set_highlight_bar(),this.set_action_text(),this.update_djinn_description(),this.set_djinn_sprite(),this.select_djinn(this.selected_char_index,this.selected_djinn_index),this.grant_control(this.close.bind(this),this.on_choose.bind(this),this.change_djinn_status.bind(this))}}on_choose(){const t=this.data.info.party_data.members[this.selected_char_index],e=this.data.info.djinni_list[t.djinni[this.selected_djinn_index]];if(!this.setting_djinn_status&&e.status!==n.djinn_status.RECOVERY){for(let t in this.chars_sprites)this.chars_sprites[t].y-=a.FONT_SIZE;for(let t=0;t<4;++t)for(let e in _.elements){const i=_.elements[e];i!==_.elements.NO_ELEMENT&&(this.djinns_sprites[t][i].y-=a.FONT_SIZE)}for(let i=0;i<4;++i){let s;if(i===this.selected_char_index)switch(e.status){case n.djinn_status.SET:s=_.capitalize(n.djinn_status.STANDBY);break;case n.djinn_status.STANDBY:s=_.capitalize(n.djinn_status.SET)}else{const e=this.data.info.party_data.members[i];if(void 0===e)continue;s=e.djinni.length<t.djinni.length?"Give":"Trade"}this.base_window.update_text(s,this.djinni_status_texts[i])}this.setting_djinn_status_char_index=this.selected_char_index,this.setting_djinn_status_djinn_index=this.selected_djinn_index,this.setting_djinn_status=!0,this.djinn_action_window.set_action_for_specific_djinn(t,e),this.darken_font_color(),this.select_action_text(),this.selected_djinn_index=0,this.grant_control(this.cancel_djinn_status_set.bind(this,!0),this.set_djinn_operation.bind(this))}}open(t,e,i,s){this.selected_char_index=0,this.selected_djinn_index=0,this.page_index=0,this.group.alpha=1,this.setting_djinn_status_char_index=-1,this.setting_djinn_status_djinn_index=-1,this.setting_djinn_status=!1,this.chars_quick_info_window=t,this.djinn_action_window=e,this.load_page(),this.update_position(),this.set_highlight_bar(),this.set_action_text(),this.update_djinn_description(),this.set_djinn_sprite(),this.select_djinn(0,0),this.window_open=!0,this.window_active=!0,this.changing_djinn_status=!1,this.close_callback=i,this.grant_control(this.close.bind(this),this.on_choose.bind(this),this.change_djinn_status.bind(this)),this.base_window.show(void 0,!1),s&&s()}close(){this.window_open=!1,this.window_active=!1,this.data.cursor_manager.hide(),this.unset_page(),this.group.alpha=0,this.base_window.close(void 0,!1),this.close_callback&&this.close_callback()}activate(){this.window_active=!0,this.select_djinn(this.selected_char_index,this.selected_djinn_index)}deactivate(){this.window_active=!1,this.data.cursor_manager.hide()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DjinnModeHeaderWindow=void 0;const s=i(2),n=i(0),a=i(7),_=i(1),o=[32,99],r=[21,37],h=[16,117],c=[34,34];e.DjinnModeHeaderWindow=class{constructor(t,e){this.game=t,this.data=e,this.sprites=[],this.djinn_sprites=[],this.tweens=[],this.window_open=!1,this.x=0,this.y=0,this.base_window=new s.Window(this.game,this.x,this.y,236,36),this.group=t.add.group(),this.ok_msg_text=this.base_window.set_text_in_position("Is this OK?",104,24),this.djinn_status_text=this.base_window.set_text_in_position("",104,8),this.djinn_name_before_text=this.base_window.set_text_in_position("",56,8),this.djinn_name_after_text=this.base_window.set_text_in_position("",56,24),this.djinn_status_arrow=this.base_window.create_at_group(64,16,"arrow_change"),this.spacebar_key={shadow:this.base_window.create_at_group(133,25,"spacebar_keyboard",0),text:this.base_window.create_at_group(132,24,"spacebar_keyboard")},this.action_info_text=this.base_window.set_text_in_position("",this.spacebar_key.text.width+132+2,24),this.init_arrow_blinks()}update_position(){this.group.x=this.game.camera.x+0,this.group.y=this.game.camera.y+0}init_arrow_blinks(){this.djinn_status_arrow_blink_timer=this.game.time.create(!1),this.djinn_status_arrow_blink_timer.loop(90,()=>{this.djinn_status_arrow.alpha=this.djinn_status_arrow.alpha?0:1}),this.djinn_status_arrow_blink_timer.start(),this.djinn_status_arrow_blink_timer.pause()}set_action_info_text(t){this.base_window.update_text(t,this.action_info_text)}mount_window(){this.update_position(),1===this.chars.length?(this.action_text=n.capitalize(this.next_djinni_status[0]),this.base_window.update_text(this.action_text,this.djinn_status_text,104),this.spacebar_key.text.alpha=this.spacebar_key.shadow.alpha=0,this.base_window.update_text("",this.action_info_text),this.base_window.update_text_position({x:104,y:24},this.ok_msg_text),this.base_window.update_text(this.djinni[0].name,this.djinn_name_before_text),this.base_window.update_text_color(a.djinn_font_colors[this.djinni[0].status],this.djinn_name_before_text),this.base_window.update_text_position({x:56,y:8},this.djinn_name_before_text),this.base_window.update_text_position({x:56},this.djinn_name_after_text),this.base_window.update_text(this.djinni[0].name,this.djinn_name_after_text),this.base_window.update_text_color(a.djinn_font_colors[this.next_djinni_status[0]],this.djinn_name_after_text),this.sprites.push(this.base_window.create_at_group(49,9,this.djinni[0].element+"_star")),this.sprites.push(this.base_window.create_at_group(49,25,this.djinni[0].element+"_star")),this.djinn_status_arrow.alpha=1,this.djinn_status_arrow_blink_timer.resume()):(this.base_window.update_text(this.action_text,this.djinn_status_text,132),this.spacebar_key.text.alpha=this.spacebar_key.shadow.alpha=1,this.base_window.update_text(`: ${this.chars[0].name}'s Psy`,this.action_info_text),this.base_window.update_text_position({x:132,y:16},this.ok_msg_text),this.base_window.update_text(this.djinni[0].name,this.djinn_name_before_text),this.base_window.update_text_color(a.djinn_font_colors[this.djinni[0].status],this.djinn_name_before_text),"Trade"===this.action_text?(this.sprites.push(this.base_window.create_at_group(44,9,this.djinni[0].element+"_star")),this.base_window.update_text(this.djinni[1].name,this.djinn_name_after_text),this.base_window.update_text_color(a.djinn_font_colors[this.djinni[1].status],this.djinn_name_after_text),this.sprites.push(this.base_window.create_at_group(44,25,this.djinni[1].element+"_star")),this.base_window.update_text_position({x:51},this.djinn_name_after_text),this.base_window.update_text_position({x:51,y:8},this.djinn_name_before_text)):"Give"===this.action_text&&(this.base_window.update_text("",this.djinn_name_after_text),this.base_window.update_text_position({x:51,y:8+_.FONT_SIZE},this.djinn_name_before_text),this.sprites.push(this.base_window.create_at_group(44,9+_.FONT_SIZE,this.djinni[0].element+"_star"))),this.djinn_status_arrow.alpha=0),this.set_char_and_djinn_sprite()}set_char_and_djinn_sprite(){for(let t=0;t<this.chars.length;++t){const e=this.chars[t],i=this.djinni[t];let s,a;["Trade","Give"].includes(this.action_text)?(s=o[t],a=r[t]):(s=32,a=31);const _=e.sprite_base.getActionKey(n.base_actions.IDLE),l=this.base_window.create_at_group(h[t],c[t],_);l.anchor.setTo(.5,1);const d=e.sprite_base.getAnimationKey(n.base_actions.IDLE,n.reverse_directions[n.directions.down]);if(l.animations.add(d,e.sprite_base.animations.idle.down,e.sprite_base.actions.idle.frame_rate,!0),l.animations.play(d,e.sprite_base.actions.idle.frame_rate,!0),this.sprites.push(l),"Give"===this.action_text&&1===t)break;const u=this.group.create(s,a,i.element+"_djinn_"+i.status);if(u.anchor.setTo(.5,1),u.scale.x=-.8,u.scale.y=.8,this.data.info.djinni_sprites[i.element].setAnimation(u,i.status),u.animations.play(i.status+"_down"),this.djinn_sprites.push(u),["Trade","Give"].includes(this.action_text)){const e=0===t?1:-1,i=17*e,n=33*e,_=5*-e,o=this.game.add.tween(u).to({y:[a,a+_,a+_,a],x:[s,s+i,s+i+n,s+i+n+i]},700,Phaser.Easing.Linear.None,!0,0,-1,!1);o.repeatDelay(300),this.tweens.push(o)}}}unmount_window(){this.sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)}),this.djinn_sprites.forEach(t=>{t.destroy()}),this.tweens.forEach(t=>{t.stop()}),this.sprites=[],this.djinn_sprites=[],this.tweens=[],this.djinn_status_arrow.alpha=0,this.djinn_status_arrow_blink_timer.paused||this.djinn_status_arrow_blink_timer.pause()}open(t,e,i,s,n){this.chars=t,this.djinni=e,this.next_djinni_status=i,this.action_text=s,this.mount_window(),this.base_window.show(()=>{this.window_open=!0,void 0!==n&&n()},!1)}close(t){this.unmount_window(),this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DjinnCharStatsWindow=void 0;const s=i(2),n=i(1),a=i(0),_=i(5),o=["HP","PP","Attack","Defense","Agility","Luck"],r=a.ordered_elements.slice().reverse();e.DjinnCharStatsWindow=class{constructor(t,e=0){this.game=t,this.window_open=!1,this.sprites=[],this.djinn_number_texts={},this.stats_current_texts={},this.stats_next_texts={},this.base_window=new s.Window(this.game,e,40,116,116),this.char_name_text=this.base_window.set_text_in_position("",48,8),this.base_window.set_text_in_position("Lv",48,24),this.level_number_text=this.base_window.set_text_in_position("",110,24,!0),this.class_text=this.base_window.set_text_in_position("",8,40),this.new_class_text=this.base_window.set_text_in_position("",8,56),r.forEach((t,e)=>{const i=110-17*e;this.djinn_number_texts[t]=this.base_window.set_text_in_position("",i,48,!0)}),o.forEach((t,e)=>{const i=64+e*n.FONT_SIZE;this.base_window.set_text_in_position(t,8,i);let s=0;["HP","PP"].includes(t)&&(s=-8),this.stats_current_texts[t]=this.base_window.set_text_in_position("",78+s,i,!0),this.stats_next_texts[t]=this.base_window.set_text_in_position("",110,i,!0)}),this.class_name_arrow=this.base_window.create_at_group(24,48,"arrow_change"),this.init_arrow_blinks()}init_arrow_blinks(){this.class_name_arrow_blink_timer=this.game.time.create(!1),this.class_name_arrow_blink_timer.loop(90,()=>{this.class_name_arrow.alpha=this.class_name_arrow.alpha?0:1}),this.class_name_arrow_blink_timer.start(),this.class_name_arrow_blink_timer.pause(),this.class_name_arrow.alpha=0}mount_window(){const t=this.base_window.create_at_group(8,8,"avatars",void 0,this.char.key_name);this.sprites.push(t),this.base_window.update_text(this.char.name,this.char_name_text),this.base_window.update_text(this.char.level.toString(),this.level_number_text),this.base_window.update_text(this.char.class.name,this.class_text),r.forEach((t,e)=>{this.base_window.update_text(this.char[t+"_djinni"].length.toString(),this.djinn_number_texts[t]);const i=97-17*e,s=this.base_window.create_at_group(i,49,t+"_star");this.sprites.push(s)});const e=this.char.preview_djinn_change(_.ordered_main_stats,this.djinni.map(t=>t.key_name),this.next_djinni_status,this.action);e.class_key_name!==this.char.class.key_name?(this.base_window.update_text(e.class_name,this.new_class_text),this.class_name_arrow_blink_timer.resume()):this.base_window.update_text("",this.new_class_text),o.forEach((t,i)=>{const s=this.char[_.ordered_main_stats[i]],a=e[_.ordered_main_stats[i]];this.base_window.update_text(s.toString(),this.stats_current_texts[t]),this.base_window.update_text(a.toString(),this.stats_next_texts[t]);const o=64+i*n.FONT_SIZE-3;let r=0;if(["HP","PP"].includes(t)&&(r=-8),s!==a){const t=this.base_window.create_at_group(78+r,o,"stat_"+(a>s?"up":"down"));this.sprites.push(t)}})}unmount_window(){this.sprites.forEach(t=>{t.destroy()}),this.class_name_arrow.alpha=0,this.class_name_arrow_blink_timer.paused||this.class_name_arrow_blink_timer.pause()}open(t,e,i,s,n){this.char=t,this.djinni=e,this.next_djinni_status=i,this.action=s,this.mount_window(),this.base_window.show(()=>{this.window_open=!0,void 0!==n&&n()},!1)}close(t){this.unmount_window(),this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DjinnPsynergyWindow=void 0;const s=i(2),n=i(1),a=n.YELLOW_FONT_COLOR,_=n.RED_FONT_COLOR,o=97+n.FONT_SIZE;e.DjinnPsynergyWindow=class{constructor(t,e){this.game=t,this.data=e,this.window_open=!1,this.text_sprites_in_window=[],this.icon_sprites_in_window=[],this.base_window=new s.Window(this.game,120,40,116,116),this.base_window.set_text_in_position("PP",86,8),this.psy_info_1_text=this.base_window.set_text_in_position("",8,96),this.psy_info_2_text=this.base_window.set_text_in_position("",8,o)}previous_page(){this.change_page(-1)}next_page(){this.change_page(1)}grant_control(){let t=[{key:this.data.gamepad.LEFT,on_down:this.previous_page.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.next_page.bind(this)},{key:this.data.gamepad.R,on_down:this.next_state_callback},{key:this.data.gamepad.A,on_down:()=>{this.execute_operation=!0,this.close(this.close_callback)}},{key:this.data.gamepad.B,on_down:()=>{this.execute_operation=!1,this.close(this.close_callback)}}];this.data.control_manager.set_control(t,{loop_configs:{horizontal:!0}})}set_page_number(){const t=this.all_abilities.length;this.page_number=1+((t-1)/5|0),this.page_index>=this.page_number&&(this.page_index=this.page_number-1),this.base_window.page_indicator.initialize(this.page_number,this.page_index)}change_page(t){this.page_index+=t,this.page_index===this.page_number?this.page_index=0:this.page_index<0&&(this.page_index=this.page_number-1),this.set_abilities_list(),this.base_window.page_indicator.select_page(this.page_index)}set_abilities_list(){this.clear_sprites(),this.abilities=this.all_abilities.slice(5*this.page_index,5*(this.page_index+1));for(let t=0;t<this.abilities.length;++t){const e=this.abilities[t],i=8,s=12+t*(n.ICON_HEIGHT+2),o=i+(n.ICON_WIDTH>>1),r=s+(n.ICON_HEIGHT>>1),h=8+n.ICON_WIDTH+2,c=this.base_window.set_text_in_position(this.data.info.abilities_list[e].name,h,s+4);this.text_sprites_in_window.push(c),this.icon_sprites_in_window.push(this.base_window.create_at_group(o,r,"abilities_icons",void 0,e)),this.icon_sprites_in_window[t].anchor.setTo(.5,.5);const l=this.base_window.set_text_in_position(this.data.info.abilities_list[e].pp_cost,109,s+4,!0);this.text_sprites_in_window.push(l),this.gained_abilities.includes(e)?(this.base_window.update_text_color(a,c),this.base_window.update_text_color(a,l)):this.lost_abilities.includes(e)&&(this.base_window.update_text_color(_,c),this.base_window.update_text_color(_,l))}}set_abilities(){this.current_abilities=this.char.abilities.filter(t=>t in this.data.info.abilities_list);const t=this.char.preview_djinn_change([],this.djinni.map(t=>t.key_name),this.next_djinni_status,this.action);this.next_abilities=t.abilities.filter(t=>t in this.data.info.abilities_list);let e=new Set(this.current_abilities),i=new Set(this.next_abilities);this.gained_abilities=[...i].filter(t=>!e.has(t)),this.lost_abilities=[...e].filter(t=>!i.has(t)),this.intersection_abilities=[...e].filter(t=>i.has(t)),this.all_abilities=this.gained_abilities.concat(this.intersection_abilities,this.lost_abilities),0===this.gained_abilities.length&&0===this.lost_abilities.length?(this.base_window.update_text("* No change",this.psy_info_1_text),this.base_window.update_text_color(n.DEFAULT_FONT_COLOR,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):this.gained_abilities.length&&0===this.lost_abilities.length?(this.base_window.update_text("* Psynergy Gained",this.psy_info_1_text),this.base_window.update_text_color(a,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):0===this.gained_abilities.length&&this.lost_abilities.length?(this.base_window.update_text("* Psynergy Lost",this.psy_info_1_text),this.base_window.update_text_color(_,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):this.gained_abilities.length&&this.lost_abilities.length&&(this.base_window.update_text("* Psynergy Gained",this.psy_info_1_text),this.base_window.update_text_color(a,this.psy_info_1_text),this.base_window.update_text("* Psynergy Lost",this.psy_info_2_text),this.base_window.update_text_color(_,this.psy_info_2_text))}mount_window(){this.set_abilities(),this.set_abilities_list(),this.set_page_number()}clear_sprites(){for(let t=0;t<this.icon_sprites_in_window.length;++t)this.base_window.remove_from_group(this.icon_sprites_in_window[t]);this.icon_sprites_in_window=[];for(let t=0;t<this.text_sprites_in_window.length;++t)this.base_window.remove_text(this.text_sprites_in_window[t]);this.text_sprites_in_window=[]}update_info(t,e,i){this.clear_sprites(),this.base_window.page_indicator.terminante(),this.char=t,this.djinni=e,this.next_djinni_status=i,this.page_index=0,this.mount_window()}open(t,e,i,s,n=!1,a,_,o){this.char=t,this.djinni=e,this.next_djinni_status=i,this.close_callback=s,this.execute_operation=!1,this.page_index=0,this.mount_window(),this.next_state_callback=a,this.action=_,n?this.window_open=!0:this.base_window.show(()=>{this.window_open=!0,void 0!==o&&o()},!1)}close(t){this.clear_sprites(),this.base_window.page_indicator.terminante(),this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t(this.execute_operation)},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DjinnActionWindow=void 0;const s=i(2),n=i(7);e.DjinnActionWindow=class{constructor(t){this.game=t,this.window_open=!1,this.star_sprite=null,this.base_window=new s.Window(this.game,104,0,132,36),this.action_description_text=this.base_window.set_text_in_position("",8,8),this.char_name_text=this.base_window.set_text_in_position("",8,16),this.djinn_name_text=this.base_window.set_text_in_position("",64,16),this.action_text=this.base_window.set_text_in_position("",31,24),this.shift_key={shadow:this.base_window.create_at_group(9,25,"shift_keyboard",0),text:this.base_window.create_at_group(8,24,"shift_keyboard")}}set_action_text(t){switch(this.base_window.update_text("Choose a djinn.",this.action_description_text),this.base_window.update_text("",this.char_name_text),this.base_window.update_text("",this.djinn_name_text),this.shift_key.text.alpha=this.shift_key.shadow.alpha=1,this.star_sprite&&(this.star_sprite.destroy(),this.star_sprite=null),t){case n.djinn_status.SET:this.base_window.update_text(": Standby",this.action_text);break;case n.djinn_status.STANDBY:this.base_window.update_text(": Set",this.action_text)}}set_action_for_specific_djinn(t,e){this.star_sprite=this.base_window.create_at_group(57,17,e.element+"_star"),this.base_window.update_text("What will you do?",this.action_description_text),this.base_window.update_text(t.name+"'s",this.char_name_text),this.base_window.update_text(e.name,this.djinn_name_text),this.base_window.update_text("",this.action_text),this.shift_key.text.alpha=this.shift_key.shadow.alpha=0}open(t){this.base_window.show(()=>{this.window_open=!0,void 0!==t&&t()},!1)}close(t){this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainStatusStatistics=e.MainStatistics=void 0;const s=i(10),n=i(4),a=i(5),_=i(0),o=i(34);var r;!function(t){t[t.NAME=0]="NAME",t[t.EXP=1]="EXP",t[t.HP=2]="HP",t[t.PP=3]="PP",t[t.DJINN=4]="DJINN",t[t.ELEM_LEVELS=5]="ELEM_LEVELS",t[t.ELEM_POWER=6]="ELEM_POWER",t[t.ELEM_RESIST=7]="ELEM_RESIST"}(r=e.MainStatistics||(e.MainStatistics={}));class h extends s.StatusComponent{constructor(t,e,i,s,n){super(t,e,i,s,n),this.djinn_group=this.game.add.group()}select_option(){if(this.state===o.MainStatusStates.CHARACTERS)return;const t={x:0,y:0,width:0,height:0};let e=0,i=0;if(0!==this.current_col)t.x=h.HIGHLIGHT[this.current_line].X,t.y=h.HIGHLIGHT[this.current_line].Y,t.width=h.HIGHLIGHT[this.current_line].WIDTH,t.height=h.HIGHLIGHT[this.current_line].HEIGHT,e=h.CURSOR[this.current_line].X,i=h.CURSOR[this.current_line].Y;else{let s=h.HIGHLIGHT.EFFECT.SHIFT;t.x=h.HIGHLIGHT.EFFECT.X,t.y=h.HIGHLIGHT.EFFECT.Y+s*this.current_line,t.width=h.HIGHLIGHT.EFFECT.WIDTH,t.height=h.HIGHLIGHT.EFFECT.HEIGHT;const n=h.CURSOR.EFFECT.SHIFT;e=h.CURSOR.EFFECT.X,i=h.CURSOR.EFFECT.Y+n*this.current_line}this.update_highlight(t);const s={type:n.CursorManager.CursorTweens.POINT,variant:n.PointVariants.NORMAL};this.data.cursor_manager.move_to({x:e,y:i},{animate:!1,tween_config:s})}on_change(){this.select_option();let t=null;if(0===this.current_col)t=0===this.battle_status_effects.length?h.MenuStatusMsgs.normal:h.MenuStatusMsgs[this.battle_status_effects[this.current_line].key];else if(t={line1:null,line2:null},t.line1=h.MenuDescriptions[this.current_line].line1,this.current_line===r.EXP){const e=this.selected_char.exp_curve[this.selected_char.level]-this.selected_char.current_exp;t.line2=h.MenuDescriptions[this.current_line].line2(e)}else t.line2=h.MenuDescriptions[this.current_line].line2;this.update_description(t.line1,t.line2)}on_left(){if(this.state===o.MainStatusStates.CHARACTERS)return;const t=this.battle_status_effects.length;this.current_col=(this.current_col+1)%2,0===this.current_col&&this.current_line>=t&&(this.current_line=0===t?0:t-1),this.on_change()}on_right(){if(this.state===o.MainStatusStates.CHARACTERS)return;const t=this.battle_status_effects.length;this.current_col=(this.current_col+1)%2,0===this.current_col&&this.current_line>=t&&(this.current_line=0===t?0:t-1),this.on_change()}on_up(){if(this.state===o.MainStatusStates.CHARACTERS)return;const t=this.battle_status_effects.length;if(0===this.current_col){if(t<=1)return;this.current_line=(this.current_line+t-1)%t}else this.current_line=(this.current_line+h.LINES-1)%h.LINES;this.on_change()}on_down(){if(this.state===o.MainStatusStates.CHARACTERS)return;const t=this.battle_status_effects.length;if(0===this.current_col){if(t<=1)return;this.current_line=(this.current_line+1)%t}else this.current_line=(this.current_line+1)%h.LINES;this.on_change()}initialize(){this.djinn_group.x=this.game.camera.x,this.djinn_group.y=this.game.camera.y+h.DJINN_GROUP_Y_OFFSET,this.state=this.manager.state;const t=["venus_star","mercury_star","mars_star","jupiter_star"];for(let e=0;e<t.length;e++){const i=h.ELEM.STARS.X+e*h.ELEM.STARS_SHIFT;let s=h.ELEM.STARS.Y;this.state===o.MainStatusStates.CHARACTERS&&(s+=h.ELEM.DOWN_SHIFT);const n=this.window.create_at_group(i,s,t[e],void 0,void 0,h.GROUP_KEY);this.state_sprites.push(n)}const e=["Djinn","Lv","Power","Resist"];for(let t=0;t<e.length;t++){const i=h.ELEM.LABEL.X;let s=h.ELEM.LABEL.Y+t*h.ELEM.LABEL_SHIFT;this.state===o.MainStatusStates.CHARACTERS&&(s+=h.ELEM.DOWN_SHIFT);const n=this.window.set_text_in_position(e[t],i,s,!1,!1,void 0,!1,h.GROUP_KEY);if(this.state_sprites.push(n.text,n.shadow),this.state===o.MainStatusStates.CHARACTERS&&0===t)break}for(let t=0;t<_.ordered_elements.length;t++){const e=this.get_djinn_counts(_.ordered_elements[t]),i=this.get_elemental_stats(_.ordered_elements[t]),s=h.ELEM.NUMBERS.END_X+t*h.ELEM.NUMBERS.X_SHIFT;let n=h.ELEM.NUMBERS.Y,a=e.set+"/"+e.total;this.state===o.MainStatusStates.CHARACTERS&&(n+=h.ELEM.DOWN_SHIFT,a=String(e.total));let r=this.window.set_text_in_position(a,s,n,!0,!1,void 0,!1,h.GROUP_KEY);this.state_sprites.push(r.text,r.shadow),this.state!==o.MainStatusStates.CHARACTERS&&(n+=h.ELEM.NUMBERS.Y_SHIFT,a=String(i.level),r=this.window.set_text_in_position(a,s,n,!0,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(r.text,r.shadow),n+=h.ELEM.NUMBERS.Y_SHIFT,a=String(i.power),r=this.window.set_text_in_position(a,s,n,!0,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(r.text,r.shadow),n+=h.ELEM.NUMBERS.Y_SHIFT,a=String(i.resistance),r=this.window.set_text_in_position(a,s,n,!0,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(r.text,r.shadow));for(let t=0;t<_.ordered_elements.length;t++){const e=_.ordered_elements[t],i=h.ELEM.DJINN.CENTER_X+t*h.ELEM.DJINN.X_SHIFT;let s=h.ELEM.DJINN.Y;this.state===o.MainStatusStates.CHARACTERS&&(s+=h.ELEM.DOWN_SHIFT);const n=this.get_djinni_sprite(e,this.djinn_group,{x:i,y:s});this.state_sprites.push(n)}let c=this.window.set_text_in_position("Exp",h.EXP.LABEL_X,h.EXP.LABEL_Y,!1,!1,void 0,!1,h.GROUP_KEY);this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position(this.selected_char.current_exp,h.EXP.VALUE_END_X,h.EXP.VALUE_Y,!0,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position("HP",h.HP.LABEL_X,h.HP.LABEL_Y,!1,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position(this.selected_char.max_hp,h.HP.MAX_END_X,h.HP.MAX_Y,!0,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position(this.selected_char.current_hp+"/",h.HP.CURR_END_X,h.HP.CURR_Y,!0,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position("PP",h.PP.LABEL_X,h.PP.LABEL_Y,!1,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position(this.selected_char.max_pp,h.PP.MAX_END_X,h.PP.MAX_Y,!0,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position(this.selected_char.current_pp+"/",h.PP.CURR_END_X,h.PP.CURR_Y,!0,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow);const l=h.STATS.LINE_SHIFT;c=this.window.set_text_in_position("Attack",h.STATS.LABEL_X,h.STATS.LABEL_Y,!1,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position(this.selected_char.atk,h.STATS.VALUE_END_X,h.STATS.VALUE_Y,!0,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position("Defense",h.STATS.LABEL_X,h.STATS.LABEL_Y+l,!1,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position(this.selected_char.def,h.STATS.VALUE_END_X,h.STATS.VALUE_Y+l,!0,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position("Agility",h.STATS.LABEL_X,h.STATS.LABEL_Y+2*l,!1,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position(this.selected_char.agi,h.STATS.VALUE_END_X,h.STATS.VALUE_Y+2*l,!0,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position("Luck",h.STATS.LABEL_X,h.STATS.LABEL_Y+3*l,!1,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position(this.selected_char.luk,h.STATS.VALUE_END_X,h.STATS.VALUE_Y+3*l,!0,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow)}this.init_status_effects()}init_status_effects(){if(0===this.battle_status_effects.length){let t=this.window.set_text_in_position("Normal",h.NORMAL_STATUS.X,h.NORMAL_STATUS.Y,!1,!1,void 0,!1,h.GROUP_KEY);this.state_sprites.push(t.text,t.shadow)}else for(let t=0;t<this.battle_status_effects.length;t++){const e=this.battle_status_effects[t];let i=h.EFFECTS.NAME_X,s=h.EFFECTS.NAME_Y+t*h.EFFECTS.SHIFT,n=this.window.set_text_in_position(h.EFFECT_LABELS[e.key],i,s,!1,!1,void 0,!1,h.GROUP_KEY);this.state_sprites.push(n.text,n.shadow),i=h.EFFECTS.ICON_X,s=h.EFFECTS.ICON_Y+t*h.EFFECTS.SHIFT;const a=this.window.create_at_group(i,s,"battle_effect_icons",void 0,e.key,h.GROUP_KEY);this.state_sprites.push(a)}}}e.MainStatusStatistics=h,h.MenuStatusMsgs={[a.permanent_status.DOWNED]:{line1:"You are down. Revive at a Sanctum",line2:"or with the Water of Life."},[a.permanent_status.POISON]:{line1:"You're afflicted by poison.",line2:"Cure with Antidote or Cure Poison."},[a.permanent_status.VENOM]:{line1:"You're afflicted by venom.",line2:"Cure with Antidote or Cure Poison."},[a.permanent_status.EQUIP_CURSE]:{line1:"A cursed item immoblizes you.",line2:"Remove it at a Sanctum."},[a.permanent_status.HAUNT]:{line1:"You receve damage from spirits.",line2:"Exorcise the spirits at a Sanctum."},normal:{line1:"Your status is normal.",line2:""}},h.MenuDescriptions={[r.NAME]:{line1:"Your name and level. Experience",line2:"points increase your level."},[r.EXP]:{line1:"Experience points. You need",line2:t=>t+" more to reach the next level."},[r.HP]:{line1:"Your current and max Hit Points.",line2:"At zero HP you cannot fight."},[r.PP]:{line1:"Your Psynergy Points. They",line2:"recover as you travel."},[r.DJINN]:{line1:"Your Djinn. This also shows",line2:"which ones are set."},[r.ELEM_LEVELS]:{line1:"Elemental Levels indicate the skill",line2:"level of the elemental attribute."},[r.ELEM_POWER]:{line1:"Power reflects the damage you",line2:"can do with each element."},[r.ELEM_RESIST]:{line1:"Resist reflects your defensive",line2:"strength against each element."}},h.EFFECT_LABELS={[a.permanent_status.DOWNED]:"Downed",[a.permanent_status.EQUIP_CURSE]:"Cursed",[a.permanent_status.HAUNT]:"Haunt",[a.permanent_status.POISON]:"Poison",[a.permanent_status.VENOM]:"Venom"},h.CURSOR={[r.NAME]:{X:34,Y:54},[r.EXP]:{X:34,Y:62},[r.HP]:{X:34,Y:70},[r.PP]:{X:34,Y:78},[r.DJINN]:{X:58,Y:118},[r.ELEM_LEVELS]:{X:58,Y:126},[r.ELEM_POWER]:{X:58,Y:134},[r.ELEM_RESIST]:{X:58,Y:142},EFFECT:{X:0,Y:94,SHIFT:16}},h.HIGHLIGHT={[r.NAME]:{X:48,Y:8,WIDTH:104,HEIGHT:8},[r.EXP]:{X:48,Y:16,WIDTH:104,HEIGHT:8},[r.HP]:{X:48,Y:24,WIDTH:104,HEIGHT:8},[r.PP]:{X:48,Y:32,WIDTH:104,HEIGHT:8},[r.DJINN]:{X:72,Y:72,WIDTH:160,HEIGHT:8},[r.ELEM_LEVELS]:{X:72,Y:80,WIDTH:160,HEIGHT:8},[r.ELEM_POWER]:{X:72,Y:88,WIDTH:160,HEIGHT:8},[r.ELEM_RESIST]:{X:72,Y:96,WIDTH:160,HEIGHT:8},EFFECT:{X:8,Y:48,WIDTH:40,HEIGHT:8,SHIFT:16}},h.ELEM={STARS:{X:128,Y:65},STARS_SHIFT:32,LABEL:{X:72,Y:72},LABEL_SHIFT:8,NUMBERS:{END_X:133,Y:72,X_SHIFT:32,Y_SHIFT:8},DJINN:{CENTER_X:130,Y:66,X_SHIFT:32},DOWN_SHIFT:24},h.EXP={LABEL_X:48,LABEL_Y:16,VALUE_END_X:149,VALUE_Y:16},h.NORMAL_STATUS={X:8,Y:48},h.STATS={LABEL_X:160,LABEL_Y:8,VALUE_END_X:229,VALUE_Y:8,LINE_SHIFT:8},h.HP={LABEL_X:48,LABEL_Y:24,MAX_END_X:149,MAX_Y:24,CURR_END_X:117,CURR_Y:24},h.PP={LABEL_X:48,LABEL_Y:32,MAX_END_X:149,MAX_Y:32,CURR_END_X:117,CURR_Y:32},h.EFFECTS={ICON_X:9,ICON_Y:48,NAME_X:24,NAME_Y:48,SHIFT:16},h.LINES=8,h.DJINN_GROUP_Y_OFFSET=40},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainStatusDjinn=void 0;const s=i(10),n=i(0),a=i(3);class _ extends s.StatusComponent{constructor(t,e,i,s,n){super(t,e,i,s,n),this.djinn_group=this.game.add.group()}select_option(){}on_change(){}on_left(){this.djinn_pages.length<=1||(this.current_page=(this.current_page+this.djinn_pages.length-1)%this.djinn_pages.length,this.load_page())}on_right(){this.djinn_pages.length<=1||(this.current_page=(this.current_page+1)%this.djinn_pages.length,this.load_page())}on_up(){}on_down(){}initialize(){this.djinn_group.x=this.game.camera.x,this.djinn_group.y=this.game.camera.y,this.make_pages(),this.window.page_indicator.initialize(this.djinn_pages.length,this.current_page),this.current_page=0,this.load_page()}load_page(){this.clear(),this.window.page_indicator.select_page(this.current_col);const t=this.djinn_pages[this.current_page];for(let e=0;e<n.ordered_elements.length;e++){const i=n.ordered_elements[e],s=t[n.ordered_elements[e]];for(let t=0;t<s.length;t++){let i=_.STARS.X+e*_.STARS.X_SHIFT,a=_.STARS.Y+t*_.STARS.Y_SHIFT;const o=this.window.create_at_group(i,a,n.ordered_elements[e]+"_star",void 0,void 0,_.GROUP_KEY);this.state_sprites.push(o),i=_.NAMES.X+e*_.NAMES.X_SHIFT,a=_.NAMES.Y+t*_.NAMES.Y_SHIFT;const r=this.window.set_text_in_position(s[t].name,i,a,!1,!1,void 0,!1,_.GROUP_KEY);this.state_sprites.push(r.text,r.shadow)}const a=_.SPRITES.CENTER_X+e*_.SPRITES.SHIFT,o=_.SPRITES.Y,r=this.get_djinni_sprite(i,this.djinn_group,{x:a,y:o});this.state_sprites.push(r)}const e=_.SEPARATOR.X,i=_.SEPARATOR.Y,s=_.SEPARATOR.WIDTH;this.window.draw_separator(e,i,e+s,i,!1);const a=this.window.set_text_in_position("Current Djinn",_.CURRENT_DJINN.X,_.CURRENT_DJINN.Y,!1,!1,void 0,!1,_.GROUP_KEY,!0);this.state_sprites.push(a.text,a.shadow)}make_pages(){let t=this.get_djinn_by_element();const e=_.DJINN_PER_LINE,i=a.maxBy(Object.values(t),t=>t.length).length;let s=i/e|0;i%e&&s++,this.djinn_pages=[];for(let i=0;i<s;i++){const s=n.ordered_elements.reduce((s,n)=>(s[n]=t[n].slice(e*i,e*(i+1)-1),s),{});this.djinn_pages.push(s)}}get_djinn_by_element(){return n.ordered_elements.reduce((t,e)=>{const i=this.data.info.party_data.members.map(t=>t[e+"_djinni"]).flat();return t[e]=a.sortBy(i.map(t=>this.data.info.djinni_list[t]),t=>t.index),t},{})}}e.MainStatusDjinn=_,_.STARS={X:17,Y:17,X_SHIFT:56,Y_SHIFT:8},_.NAMES={X:24,Y:16,X_SHIFT:56,Y_SHIFT:8},_.SPRITES={CENTER_X:32,Y:57,SHIFT:56},_.SEPARATOR={X:4,Y:91,WIDTH:232},_.CURRENT_DJINN={X:14,Y:100},_.DJINN_PER_LINE=9},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainStatusPsynergy=void 0;const s=i(10),n=i(4);class a extends s.StatusComponent{constructor(t,e,i,s,n){super(t,e,i,s,n)}select_option(){const t={x:a.HIGHLIGHT.X,y:a.HIGHLIGHT.Y+a.SHIFT*this.current_line,width:a.HIGHLIGHT.WIDTH,height:a.HIGHLIGHT.HEIGHT};this.update_highlight(t);const e=a.CURSOR.X,i=a.CURSOR.Y+a.SHIFT*this.current_line,s={type:n.CursorManager.CursorTweens.POINT,variant:n.PointVariants.NORMAL};this.data.cursor_manager.move_to({x:e,y:i},{animate:!1,tween_config:s}),this.window.page_indicator.select_page(this.current_col)}on_change(){this.ability_pages[this.current_col][this.current_line]||(this.current_line=this.ability_pages[this.current_col].length-1);const t=this.ability_pages[this.current_col][this.current_line];this.select_option(),this.update_description(t.description);let e="Can be used in ";t.is_field_psynergy||t.effects_outside_battle?e+="Towns":e+="Battle",this.window.update_text(e,this.use_text)}on_left(){if(this.ability_pages.length<=1)return;const t=this.ability_pages.length;this.current_col=(this.current_col+t-1)%t,this.ability_pages[this.current_col][this.current_line]||(this.current_line=this.ability_pages[this.current_col].length-1),this.reset()}on_right(){if(this.ability_pages.length<=1)return;const t=this.ability_pages.length;this.current_col=(this.current_col+1)%t,this.ability_pages[this.current_col][this.current_line]||(this.current_line=this.ability_pages[this.current_col].length-1),this.reset()}on_up(){if(this.ability_pages[this.current_col].length<=1)return;const t=this.ability_pages[this.current_col].length;this.current_line=(this.current_line+t-1)%t,this.on_change()}on_down(){if(this.ability_pages[this.current_col].length<=1)return;const t=this.ability_pages[this.current_col].length;this.current_line=(this.current_line+1)%t,this.on_change()}initialize(){this.update_abilities(),this.ability_pages[this.current_col]||(this.current_col=this.ability_pages.length-1);this.ability_pages[this.current_col].forEach((t,e)=>{const i=t.key_name,s=t.name,n=t.pp_cost,_=t.element+"_star",o=String(t.range);let r=a.PSYNERGY.ICON_X,h=a.PSYNERGY.ICON_Y+e*a.SHIFT;const c=this.window.create_at_group(r,h,"abilities_icons",void 0,i,a.GROUP_KEY);this.state_sprites.push(c),r=a.PSYNERGY.NAME_X,h=a.PSYNERGY.NAME_Y+e*a.SHIFT;const l=this.window.set_text_in_position(s,r,h,!1,!1,void 0,!1,a.GROUP_KEY);this.state_sprites.push(l.text,l.shadow),r=a.PSYNERGY.PP_VALUE_END_X,h=a.PSYNERGY.PP_VALUE_Y+e*a.SHIFT;const d=this.window.set_text_in_position(n,r,h,!0,!1,void 0,!1,a.GROUP_KEY);this.state_sprites.push(d.text,d.shadow),r=a.PSYNERGY.STAR_X,h=a.PSYNERGY.STAR_Y+e*a.SHIFT;const u=this.window.create_at_group(r,h,_,void 0,void 0,a.GROUP_KEY);this.state_sprites.push(u),r=a.PSYNERGY.RANGE_CENTER_X,h=a.PSYNERGY.RANGE_Y+e*a.SHIFT;const p=this.window.create_at_group(r,h,"ranges",void 0,o,a.GROUP_KEY);p.x-=p.width/2|0,this.state_sprites.push(p)});let t=a.PSYNERGY.PP_LABEL_X,e=a.PSYNERGY.PP_LABEL_Y;const i=this.window.set_text_in_position("PP",t,e,!1,!1,void 0,!1,a.GROUP_KEY);this.state_sprites.push(i.text,i.shadow),t=a.USE_TEXT.X,e=a.USE_TEXT.Y,this.use_text=this.window.set_text_in_position("",t,e,!1,!1,void 0,!1,a.GROUP_KEY),this.state_sprites.push(this.use_text.text,this.use_text.shadow),this.window.page_indicator.initialize(this.ability_pages.length,this.current_line),this.select_option()}update_abilities(){const t=this.selected_char.abilities,e=t.filter(t=>{const e=this.data.info.abilities_list[t];return!e||!(e.is_field_psynergy||e.effects_outside_battle)}),i=t.filter(t=>{const e=this.data.info.abilities_list[t];return!!e&&(e.is_field_psynergy||e.effects_outside_battle)}).concat(e);let s=[];this.ability_pages=[];let n=0;i.forEach(t=>{n===a.MAX_LINES&&(this.ability_pages.push(s),s=[],n=0),this.data.info.abilities_list[t]?(s.push(this.data.info.abilities_list[t]),n++):console.warn(`Ability "${t}" does not exist in the database.`)}),s.length>0&&this.ability_pages.push(s)}}e.MainStatusPsynergy=a,a.CURSOR={X:65,Y:66},a.HIGHLIGHT={X:80,Y:24,WIDTH:152,HEIGHT:8},a.PSYNERGY={ICON_X:81,ICON_Y:19,NAME_X:96,NAME_Y:24,PP_LABEL_X:184,PP_LABEL_Y:8,PP_VALUE_END_X:194,PP_VALUE_Y:24,STAR_X:201,STAR_Y:25,RANGE_CENTER_X:220,RANGE_Y:24},a.USE_TEXT={X:8,Y:104},a.MAX_LINES=5,a.SHIFT=16},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainStatusItems=void 0;const s=i(10),n=i(4),a=i(12);class _ extends s.StatusComponent{constructor(t,e,i,s,n){super(t,e,i,s,n)}select_option(){const t={x:_.HIGHLIGHT.X,y:_.HIGHLIGHT.Y+_.SHIFT*this.current_line,width:_.HIGHLIGHT.WIDTH,height:_.HIGHLIGHT.HEIGHT};this.update_highlight(t);const e=_.CURSOR.X,i=_.CURSOR.Y+_.SHIFT*this.current_line,s={type:n.CursorManager.CursorTweens.POINT,variant:n.PointVariants.NORMAL};this.data.cursor_manager.move_to({x:e,y:i},{animate:!1,tween_config:s}),this.window.page_indicator.select_page(this.current_col)}on_change(){this.char_items[this.current_col][this.current_line]||(this.current_line=this.char_items[this.current_col].length-1);const t=this.char_items[this.current_col][this.current_line];this.select_option();const e=a.item_equip_slot[this.data.info.items_list[t.key_name].type],i={x:0,y:0,width:0,height:0};if([a.equip_slots.WEAPON,a.equip_slots.BODY,a.equip_slots.CHEST,a.equip_slots.HEAD].includes(e)&&t.equipped){const t=_.EQ_HIGHLIGHT.SHIFT*_.EQ_HIGHLIGHT.POS[e];i.x=_.EQ_HIGHLIGHT.X,i.y=_.EQ_HIGHLIGHT.Y+t,i.width=_.EQ_HIGHLIGHT.WIDTH,i.height=_.EQ_HIGHLIGHT.HEIGHT}this.manager.update_eq_highlight(i),this.update_description(this.data.info.items_list[t.key_name].description)}on_left(){if(this.char_items.length<=1)return;const t=this.char_items.length;this.current_col=(this.current_col+t-1)%t,this.char_items[this.current_col][this.current_line]||(this.current_line=this.char_items[this.current_col].length-1),this.reset()}on_right(){if(this.char_items.length<=1)return;const t=this.char_items.length;this.current_col=(this.current_col+1)%t,this.char_items[this.current_col][this.current_line]||(this.current_line=this.char_items[this.current_col].length-1),this.reset()}on_up(){this.char_items[this.current_col].length<=1||(0===this.current_line?(0===this.current_col?(this.current_col=this.char_items.length-1,this.current_line=this.char_items[this.char_items.length-1].length-1):(this.current_col=this.current_col-1,this.current_line=this.char_items[this.current_col].length-1),this.reset()):(this.current_line--,this.on_change()))}on_down(){this.char_items[this.current_col].length<=1||(this.current_line+1===this.char_items[this.current_col].length?(this.current_col===this.char_items.length-1?(this.current_col=0,this.current_line=0):(this.current_col=this.current_col+1,this.current_line=0),this.reset()):(this.current_line++,this.on_change()))}initialize(){this.update_items(),this.char_items[this.current_col]||(this.current_col=this.char_items.length-1);this.char_items[this.current_col].forEach((t,e)=>{const i=t.key_name,s=this.data.info.items_list[t.key_name].name,n=t.broken,a=t.equipped,o=t.quantity<=1?void 0:t.quantity;let r=_.ITEM.ICON_X,h=_.ITEM.ICON_Y+e*_.SHIFT;const c=this.window.make_item_obj(i,{x:r,y:h},{broken:n,equipped:a,quantity:o,internal_group:_.GROUP_KEY});for(let t in c)c[t]&&this.state_sprites.push(c[t]);r=_.ITEM.NAME_X,h=_.ITEM.NAME_Y+e*_.SHIFT;const l=this.window.set_text_in_position(s,r,h,!1,!1,void 0,!1,_.GROUP_KEY);this.state_sprites.push(l.text,l.shadow)});let t=this.window.set_text_in_position("Attack",_.STATS.LABEL_X,_.STATS.LABEL_Y,!1,!1,void 0,!1,_.GROUP_KEY);this.state_sprites.push(t.text,t.shadow),t=this.window.set_text_in_position(this.selected_char.atk,_.STATS.VALUE_END_X,_.STATS.VALUE_Y,!0,!1,void 0,!1,_.GROUP_KEY),this.state_sprites.push(t.text,t.shadow),t=this.window.set_text_in_position("Defense",_.STATS.LABEL_X,_.STATS.LABEL_Y+_.STATS.LINE_SHIFT,!1,!1,void 0,!1,_.GROUP_KEY),this.state_sprites.push(t.text,t.shadow),t=this.window.set_text_in_position(this.selected_char.def,_.STATS.VALUE_END_X,_.STATS.VALUE_Y+_.STATS.LINE_SHIFT,!0,!1,void 0,!1,_.GROUP_KEY),this.state_sprites.push(t.text,t.shadow),this.window.page_indicator.initialize(this.char_items.length,this.current_line),this.select_option()}update_items(){const t=[...this.selected_char.items];this.char_items=[];let e=[],i=0;t.forEach(t=>{i===_.MAX_LINES&&(this.char_items.push(e),e=[],i=0),e.push(t),i++}),e.length>0&&this.char_items.push(e)}}e.MainStatusItems=_,_.CURSOR={X:106,Y:58},_.HIGHLIGHT={X:120,Y:16,WIDTH:112,HEIGHT:8},_.ITEM={ICON_X:121,ICON_Y:11,NAME_X:144,NAME_Y:16},_.STATS={LABEL_X:40,LABEL_Y:24,VALUE_END_X:109,VALUE_Y:24,LINE_SHIFT:8},_.EQ_HIGHLIGHT={X:16,Y:16,WIDTH:96,HEIGHT:8,SHIFT:16,POS:{[a.equip_slots.WEAPON]:0,[a.equip_slots.HEAD]:1,[a.equip_slots.CHEST]:2,[a.equip_slots.BODY]:3}},_.MAX_LINES=5,_.SHIFT=16},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ShopMenu=void 0;const s=i(111),n=i(112),a=i(113),_=i(0),o=i(114),r=i(115),h=i(116),c=i(117),l=i(118),d=i(2),u=i(15),p=i(18),m=i(3);e.ShopMenu=class{constructor(t,e){this.game=t,this.data=e,this.shop_key=null,this.close_callback=null,this.items_db=this.data.info.items_list,this.shops_db=m.mapKeys(this.data.dbs.shops_db,t=>t.key_name),this.shopkeep_dialog_db=this.data.dbs.shopkeep_dialog_db,this.normal_item_list={},this.artifact_list={},this.buttons_keys=["buy","sell","artifacts","repair"],this.windows_mode="buy",this.current_index=0,this.horizontal_menu=new p.HorizontalMenu(this.game,this.data,this.buttons_keys,this.buttons_keys.map(t=>_.capitalize(t)),{on_press:this.button_press.bind(this),on_cancel:this.close_menu.bind(this)}),this.npc_dialog=new s.ShopkeepDialog(this.game,this.data),this.yesno_action=new c.YesNoMenu(this.game,this.data),this.inv_win=new o.InventoryWindow(this.game,this.data,this.on_inv_win_change.bind(this)),this.buy_select=new r.BuySelectMenu(this.game,this.data,this.on_buy_select_change.bind(this)),this.eq_compare=new h.EquipCompare(this.game,this.data),this.quant_win=new l.ShopItemQuantityWindow(this.game,this.data),this.char_display=new u.CharsMenu(this.game,this.data,this.on_char_display_change.bind(this)),this.item_price_win=new d.Window(this.game,0,64,116,28),this.your_coins_win=new d.Window(this.game,144,56,92,28),this.item_desc_win=new d.Window(this.game,0,136,236,20),this.buy_menu=new n.BuyArtifactsMenu(this.game,this.data,this),this.sell_menu=new a.SellRepairMenu(this.game,this.data,this),this.your_coins_label=this.your_coins_win.set_text_in_position("Your Coins: ",8,8),this.your_coins_text=this.your_coins_win.set_text_in_position("",85,16,!0),this.item_name_text=this.item_price_win.set_text_in_position("",8,8),this.item_price_label=this.item_price_win.set_text_in_position("Price",8,16),this.item_price_val_text=this.item_price_win.set_text_in_position("",77,16,!0),this.item_price_coins_label=this.item_price_win.set_text_in_position("Coins",80,16),this.item_desc_text=this.item_desc_win.set_text_in_position("",8,8)}on_submenu_close(){this.open_horizontal_menu()}on_char_display_change(t){this.eq_compare.is_open&&this.eq_compare.change_character(t),this.inv_win.is_open&&this.inv_win.change_character(t)}on_inv_win_change(t,e){if(this.item_price_win.open&&this.sell_menu.active){let i=this.sell_menu.is_repair_menu,s=this.inv_win.item_grid[t][e];if(s){let t=this.data.info.items_list[s.key_name].price,e=this.data.info.items_list[s.key_name].important_item,n=t;n=i?t*(1/4)|0:t*(s.broken?.5:3/4)|0,this.update_item_info(s.key_name,n,i?!s.broken:e,!i||s.broken,e)}}}on_buy_select_change(t){this.update_item_info(t)}set_item_lists(){let t=[],e=[],i=this.shops_db[this.shop_key].item_list;for(let s=0;s<i.length;s++){let n=this.items_db[i[s].key_name];0!==i[s].quantity&&(!0===n.rare_item?e.push(i[s]):t.push(i[s]))}this.normal_item_list=m.mapKeys(t,t=>t.key_name),this.artifact_list=m.mapKeys(e,t=>t.key_name)}update_your_coins(){this.your_coins_win.update_text(String(this.data.info.party_data.coins),this.your_coins_text)}update_item_info(t,e,i=!1,s=!1,n=!1){let a=this.data.info.items_list[t];this.item_desc_win.update_text(a.description,this.item_desc_text),this.item_price_win.update_text(a.name,this.item_name_text);let _=i?"":"Coins";this.item_price_win.update_text(_,this.item_price_coins_label);let o="Price";i&&!s?o="It's not broken.":i&&n&&(o="We can't buy that."),this.item_price_win.update_text(o,this.item_price_label);let r=e||a.price,h=i?"":r;this.item_price_win.update_text(h,this.item_price_val_text)}alternate_window_pos(t){this.windows_mode!==t&&("buy"===t?(this.item_price_win.update_position({x:0,y:64}),this.item_desc_win.update_position({x:0,y:136}),this.your_coins_win.update_position({x:144,y:56}),this.windows_mode="buy"):(this.item_price_win.update_position({x:120,y:64}),this.item_desc_win.update_position({x:0,y:40}),this.your_coins_win.update_position({x:0,y:72}),this.windows_mode="sell"))}button_press(){this.horizontal_menu.close(()=>{switch(this.current_index=this.horizontal_menu.selected_button_index,this.buttons_keys[this.horizontal_menu.selected_button_index]){case"buy":this.alternate_window_pos("buy"),this.buy_menu.open_menu(!1,this.on_submenu_close.bind(this));break;case"sell":this.alternate_window_pos("sell"),this.sell_menu.open_menu(!1,this.on_submenu_close.bind(this));break;case"artifacts":this.alternate_window_pos("buy"),this.buy_menu.open_menu(!0,this.on_submenu_close.bind(this));break;case"repair":this.alternate_window_pos("sell"),this.sell_menu.open_menu(!0,this.on_submenu_close.bind(this))}this.npc_dialog.is_active||this.npc_dialog.close_dialog()})}update_items(){let t=this.buy_menu.active?this.buy_menu:this.sell_menu.active?this.sell_menu:null;this.set_item_lists(),t===this.buy_menu&&(this.buy_menu.item_list=this.buy_menu.is_artifacts_menu?this.artifact_list:this.normal_item_list,this.buy_select.items=this.buy_menu.item_list)}update_position(){this.npc_dialog.update_position(),this.horizontal_menu.update_position()}open_horizontal_menu(t="cancel_option"){this.npc_dialog.is_active?this.npc_dialog.update_dialog(t):this.npc_dialog.open(this.shop_key,this.data.info.shops_list[this.shop_key].avatar_key,this.data.info.shops_list[this.shop_key].dialog_key),this.horizontal_menu.open(void 0,this.current_index)}open_menu(t,e){this.shop_key=t,this.close_callback=e,this.data.hero.in_action()&&(this.data.hero.stop_char(),this.data.hero.update_shadow()),this.set_item_lists(),this.data.shop_open=!0,this.open_horizontal_menu()}end_dialog(){this.shop_key=null,this.npc_dialog.close(),this.data.shop_open=!1,this.data.control_manager.reset(),this.close_callback&&this.close_callback(),this.close_callback=null}close_menu(){this.horizontal_menu.menu_active&&(this.horizontal_menu.close(),this.data.cursor_manager.hide(),this.npc_dialog.update_dialog("goodbye"),this.normal_item_list={},this.artifact_list={},this.current_index=0,this.data.control_manager.simple_input(this.end_dialog.bind(this)))}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ShopkeepDialog=void 0;const s=i(23),n=i(3);e.ShopkeepDialog=class{constructor(t,e){this.game=t,this.data=e,this.shop_key=null,this.avatar_key=null,this.dialog_key=null,this.dialog_manager=new s.DialogManager(this.game,this.data),this.messages=null,this.current_message=null,this.is_active=!1}open(t,e,i){this.shop_key=t,this.avatar_key=e,this.dialog_key=i,this.messages=n.mapKeys(this.data.shop_menu.shopkeep_dialog_db[this.dialog_key].messages,t=>t.key),this.update_dialog("welcome")}update_position(){this.dialog_manager.update_position()}replace_text(t,e,i,s){do{t.includes("${HERO}")&&(t=t.replace("${HERO}",e)),t.includes("${ITEM}")&&(t=t.replace("${ITEM}",i)),t.includes("${PRICE}")&&(t=t.replace("${PRICE}",s))}while(t.includes("${HERO}")||t.includes("${ITEM}")||t.includes("${PRICE}"));return t}get_message(t){return this.messages[t].text}update_dialog(t,e=!1,i=!0,s){this.current_message=i?this.messages[t].text:t,this.is_active=!0,this.dialog_manager.quick_next(this.current_message,s,this.avatar_key,void 0,{x:40,y:0},{x:0,y:0},e)}close_dialog(t,e=!0){this.is_active=!1,this.dialog_manager.kill_dialog(t,e)}close(t){this.close_dialog(t,!1),this.shop_key=null,this.avatar_key=null,this.dialog_key=null,this.messages=null,this.current_message=null}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BuyArtifactsMenu=e.WindowNames=void 0;const s=i(8),n=i(15),a=i(2);e.WindowNames={ITEM_DESC_WIN:"item_desc_win",ITEM_PRICE_WIN:"item_price_win",YOUR_COINS_WIN:"your_coins_win",CHAR_DISPLAY:"char_display",INV_WIN:"inv_win",YESNO_ACTION:"yesno_action",QUANT_WIN:"quant_win",BUY_SELECT:"buy_select",EQ_COMPARE:"eq_compare"};e.BuyArtifactsMenu=class{constructor(t,e,i){this.game=t,this.data=e,this.parent=i,this.close_callback=null,this.item_desc_win=this.parent.item_desc_win,this.your_coins_win=this.parent.your_coins_win,this.item_price_win=this.parent.item_price_win,this.char_display=this.parent.char_display,this.inv_win=this.parent.inv_win,this.quant_win=this.parent.quant_win,this.buy_select=this.parent.buy_select,this.eq_compare=this.parent.eq_compare,this.yesno_action=this.parent.yesno_action,this.npc_dialog=this.parent.npc_dialog,this.is_artifacts_menu=null,this.active=!1,this.item_list={},this.selected_item=null,this.buy_select_pos={page:0,index:0,is_last:!1,should_change:!1},this.old_item=null,this.selected_character=null,this.selected_char_index=0}update_game_ticket_step(){let t=this.data.info.party_data.game_tickets.tickets_bought;return t>=1&&t<6?300:t>=6&&t<11?500:t>=11&&t<16?1e3:t>=16&&t<21?2e3:t>=21&&t<26?4e3:t>=26?8e3:void 0}check_game_ticket(){let t=!1;this.data.info.party_data.game_tickets.coins_remaining-=this.data.info.items_list[this.selected_item.key_name].price,this.data.info.party_data.game_tickets.coins_remaining<=0&&(t=!0,this.data.info.party_data.game_tickets.tickets_bought+=1,this.data.info.party_data.game_tickets.coins_remaining+=this.update_game_ticket_step()),t?(this.npc_dialog.update_dialog("game_ticket",!0),this.data.control_manager.simple_input(this.open_inventory_view.bind(this,!0))):this.open_buy_select()}sell_old_equip(t,e){let i=t.rare_item?"after_sell_artifact":"after_sell_normal";if(this.npc_dialog.update_dialog(i,!0),t.rare_item){let e=this.data.info.shops_list[this.parent.shop_key].item_list,i=!1;for(let s=0;s<e.length;s++)e[s].key_name===t.key_name&&(i=!0,this.data.info.shops_list[this.parent.shop_key].item_list[s].quantity+=1);i||this.data.info.shops_list[this.parent.shop_key].item_list.push({key_name:t.key_name,quantity:1}),this.buy_select_pos.should_change&&(this.buy_select_pos.should_change=!1)}for(let e=0;e<this.selected_character.items.length;e++)this.selected_character.items[e].key_name===t.key_name&&this.selected_character.items.splice(e,1);let s=e.broken?.5*this.old_item.price:this.old_item.price*(3/4);this.data.info.party_data.coins+=0|s,this.parent.update_your_coins(),this.parent.update_items(),this.data.control_manager.simple_input(this.check_game_ticket.bind(this))}equip_new_item(){let t=this.data.info.items_list[this.selected_item.key_name].type,e=this.selected_character.equip_slots;this.npc_dialog.update_dialog("equip_compliment",!0),this.old_item=null;let i=null,n=["WEAPONS","ARMOR","CHEST_PROTECTOR","HEAD_PROTECTOR","RING","LEG_PROTECTOR","UNDERWEAR"],a=["weapon","body","chest","head","ring","boots","underwear"];for(let _=0;_<n.length;_++)t===s.item_types[n[_]]&&e[a[_]]&&(i=e[a[_]]);if(i&&(this.old_item=this.data.info.items_list[i.key_name]),this.old_item)for(let t=0;t<this.selected_character.items.length;t++){let e=this.selected_character.items[t];if(e.key_name===this.old_item.key_name&&e.equipped){this.selected_character.unequip_item(t);break}}for(let t=this.selected_character.items.length-1;t>0;t--){if(this.selected_character.items[t].key_name===this.selected_item.key_name){this.selected_character.equip_item(t);break}}if(this.old_item){let t=()=>{let t=i.broken?.5*this.old_item.price:this.old_item.price*(3/4),e=this.npc_dialog.get_message("sell_current");e=this.npc_dialog.replace_text(e,void 0,this.old_item.name,String(0|t)),this.npc_dialog.update_dialog(e,!1,!1),this.yesno_action.open({yes:this.sell_old_equip.bind(this,this.old_item,i),no:()=>{let t=this.old_item.rare_item?"decline_sell_artifact":"decline_sell_normal";this.npc_dialog.update_dialog(t,!0),this.data.control_manager.simple_input(this.check_game_ticket.bind(this))}},{x:56,y:40})};this.data.control_manager.simple_input(t.bind(this))}else this.data.control_manager.simple_input(this.check_game_ticket.bind(this))}on_purchase_success(t=!1,e=!1){let i=1,s=e?"game_ticket":this.selected_item.key_name,n=this.data.info.items_list[s];if(this.quant_win.is_open&&!e&&(i=this.quant_win.chosen_quantity),this.data.info.party_data.coins-this.data.info.items_list[this.selected_item.key_name].price*i<0&&!e){this.npc_dialog.update_dialog("not_enough_coins",!0),this.data.cursor_manager.hide();let t=()=>{this.data.control_manager.simple_input(this.open_buy_select.bind(this))};this.quant_win.is_open?this.quant_win.close(t):t()}else{this.npc_dialog.update_dialog("after_buy",!0),this.data.cursor_manager.hide();let s=()=>{e||(this.data.info.party_data.coins-=this.data.info.items_list[this.selected_item.key_name].price*i);let s=!1;for(let t=0;t<this.selected_character.items.length;t++){this.selected_character.items[t].key_name===n.key_name&&this.data.info.items_list[n.key_name].carry_up_to_30&&(s=!0,this.selected_character.items[t].quantity+=i)}let a=this.selected_character.items.length;if(s||(n.equipable?this.selected_character.items.push({key_name:n.key_name,quantity:1,equipped:!1,index:a}):this.selected_character.items.push({key_name:n.key_name,quantity:i,index:a})),e)this.data.control_manager.simple_input(this.open_buy_select.bind(this));else{let e=this.data.info.shops_list[this.parent.shop_key].item_list,s=!1;for(let t=0;t<e.length;t++)e[t].key_name===this.selected_item.key_name&&-1!==e[t].quantity&&(this.data.info.shops_list[this.parent.shop_key].item_list[t].quantity-=i,0===this.data.info.shops_list[this.parent.shop_key].item_list[t].quantity&&(s=!0));if(this.buy_select_pos.is_last&&s&&(this.buy_select_pos.should_change=!0),this.parent.update_items(),t){let t=()=>{let t=this.npc_dialog.get_message("equip_now");t=this.npc_dialog.replace_text(t,this.selected_character.name),this.npc_dialog.update_dialog(t,!1,!1),this.yesno_action.open({yes:this.equip_new_item.bind(this),no:this.check_game_ticket.bind(this)},{x:56,y:40})};this.data.control_manager.simple_input(t.bind(this))}else this.data.control_manager.simple_input(this.check_game_ticket.bind(this))}};this.quant_win.is_open?this.quant_win.close(()=>{s()}):s()}}on_buy_equip_select(){if(this.selected_character=this.char_display.lines[this.char_display.current_line][this.char_display.selected_index],this.selected_char_index=this.char_display.selected_index,15===this.selected_character.items.length){let t=this.npc_dialog.get_message("inventory_full");t=this.npc_dialog.replace_text(t,this.selected_character.name),this.npc_dialog.update_dialog(t,!1,!1),this.char_display.grant_control(this.on_cancel_char_select.bind(this),this.on_buy_equip_select.bind(this))}else if(this.data.info.items_list[this.selected_item.key_name].equipable_chars.includes(this.selected_character.key_name))this.on_purchase_success(!0);else{let t=this.npc_dialog.get_message("cant_equip");t=this.npc_dialog.replace_text(t,this.selected_character.name),this.npc_dialog.update_dialog(t,!1,!1),this.yesno_action.open({yes:this.on_purchase_success.bind(this,!1,!1),no:this.open_equip_compare.bind(this)},{x:56,y:40})}}on_buy_item_select(t=!1){this.selected_character=this.char_display.lines[this.char_display.current_line][this.char_display.selected_index],this.selected_char_index=this.char_display.selected_index;let e=0;for(let t=0;t<this.selected_character.items.length;t++){let i=this.selected_character.items[t];i.key_name===this.selected_item.key_name&&(e=i.quantity)}if(15===this.selected_character.items.length){let e=this.npc_dialog.get_message("inventory_full");e=this.npc_dialog.replace_text(e,this.selected_character.name),this.npc_dialog.update_dialog(e,!1,!1),this.char_display.grant_control(t?this.on_cancel_game_ticket.bind(this):this.on_cancel_char_select.bind(this),this.on_buy_item_select.bind(this,t))}else if(30===e){let e=this.data.info.items_list[this.selected_item.key_name].name,i=this.npc_dialog.get_message("stack_full");i=this.npc_dialog.replace_text(i,this.selected_character.name,e),this.npc_dialog.update_dialog(i,!1,!1),this.char_display.grant_control(t?this.on_cancel_game_ticket.bind(this):this.on_cancel_char_select.bind(this),this.on_buy_item_select.bind(this,t))}else if(t)this.on_purchase_success(!1,t);else if(this.data.info.party_data.coins-this.data.info.items_list[this.selected_item.key_name].price<0&&!t){this.npc_dialog.update_dialog("not_enough_coins",!0),this.data.cursor_manager.hide();let t=()=>{this.data.control_manager.simple_input(this.open_buy_select.bind(this))};this.quant_win.is_open?this.quant_win.close(t):t()}else{this.npc_dialog.update_dialog("buy_quantity");let t=this.data.info.shops_list[this.parent.shop_key].item_list.filter(t=>t.key_name===this.selected_item.key_name)[0],e={key_name:t.key_name,quantity:-1===t.quantity?30:t.quantity},i=this.selected_character.items.filter(t=>t.key_name===this.selected_item.key_name),s=0!==i.length?i[0]:null;this.quant_win.is_open||this.quant_win.open(e,s,!0),this.quant_win.grant_control(this.open_inventory_view.bind(this),this.on_purchase_success.bind(this))}}on_cancel_char_select(){this.inv_win.is_open&&this.inv_win.close(),this.eq_compare.is_open&&this.eq_compare.close(),this.char_display.is_open&&this.char_display.close();let t=[e.WindowNames.INV_WIN,e.WindowNames.EQ_COMPARE,e.WindowNames.CHAR_DISPLAY];this.close_windows(t,this.open_buy_select.bind(this))}on_cancel_game_ticket(){this.npc_dialog.update_dialog("game_ticket_decline",!0),this.data.control_manager.simple_input(this.on_cancel_char_select.bind(this))}open_equip_compare(){this.buy_select_pos={page:this.buy_select.current_page,index:this.buy_select.selected_index,is_last:this.buy_select.is_last(this.buy_select.current_page,this.buy_select.selected_index),should_change:!1};let t=[e.WindowNames.BUY_SELECT,e.WindowNames.ITEM_DESC_WIN];this.close_windows(t,()=>{this.npc_dialog.update_dialog("character_select");let t=this.selected_character?this.selected_character.key_name:this.data.info.party_data.members[0].key_name,i=[{name:e.WindowNames.CHAR_DISPLAY,arguments:[this.selected_char_index,n.CharsMenuModes.SHOP]},{name:e.WindowNames.EQ_COMPARE,arguments:[t,this.selected_item.key_name]}];this.show_windows(i,()=>{this.char_display.grant_control(this.on_cancel_char_select.bind(this),this.on_buy_equip_select.bind(this))})})}open_inventory_view(t=!1){!t&&this.buy_select.is_open&&(this.buy_select_pos={page:this.buy_select.current_page,index:this.buy_select.selected_index,is_last:this.buy_select.is_last(this.buy_select.current_page,this.buy_select.selected_index),should_change:!1});let i=[e.WindowNames.ITEM_DESC_WIN,e.WindowNames.BUY_SELECT,e.WindowNames.QUANT_WIN,e.WindowNames.EQ_COMPARE];this.close_windows(i,()=>{t?this.npc_dialog.update_dialog("game_ticket_select"):this.npc_dialog.update_dialog("character_select");let e=t?"game_ticket":this.selected_item.key_name,i=()=>{let i=this.selected_character?this.selected_character.key_name:this.data.info.party_data.members[0].key_name,s=()=>{this.char_display.grant_control(t?this.on_cancel_game_ticket.bind(this):this.on_cancel_char_select.bind(this),this.on_buy_item_select.bind(this,t))};this.inv_win.is_open?(this.inv_win.refresh(i,e),s()):this.inv_win.open(i,e,!0,s)};this.char_display.is_open?(this.char_display.select_char(this.selected_char_index),i()):this.char_display.open(this.selected_char_index,n.CharsMenuModes.SHOP,i)})}on_buy_select(){this.selected_item=this.buy_select.pages[this.buy_select.current_page][this.buy_select.selected_index],this.data.control_manager.reset(),this.data.info.items_list[this.selected_item.key_name].equipable?this.open_equip_compare():this.open_inventory_view()}open_buy_select(t="sell_follow_up"){if(0===Object.keys(this.item_list).length)this.close_menu();else{this.buy_select_pos.should_change&&(0===this.buy_select_pos.index?(this.buy_select_pos.page-=1,this.buy_select_pos.index=6):this.buy_select_pos.index-=1),this.npc_dialog.update_dialog(t);let i=[e.WindowNames.CHAR_DISPLAY,e.WindowNames.INV_WIN,e.WindowNames.EQ_COMPARE];this.close_windows(i,()=>{let t=[{name:e.WindowNames.BUY_SELECT,arguments:[this.item_list,this.buy_select_pos.index,this.buy_select_pos.page]},{name:e.WindowNames.YOUR_COINS_WIN,arguments:[]},{name:e.WindowNames.ITEM_PRICE_WIN,arguments:[]},{name:e.WindowNames.ITEM_DESC_WIN,arguments:[]}];this.show_windows(t,()=>{this.selected_item=this.buy_select.pages[this.buy_select.current_page][this.buy_select.selected_index],this.parent.update_item_info(this.selected_item.key_name),this.parent.update_your_coins(),this.buy_select.grant_control(this.close_menu.bind(this),this.on_buy_select.bind(this))})})}}open_menu(t,e){this.is_artifacts_menu=t,this.close_callback=e,this.active=!0,this.item_list=this.is_artifacts_menu?this.parent.artifact_list:this.parent.normal_item_list,t?0===Object.keys(this.item_list).length?(this.npc_dialog.update_dialog("no_artifacts",!0),this.data.control_manager.simple_input(this.close_menu.bind(this),{reset_on_press:!0})):(this.npc_dialog.update_dialog("artifacts_menu",!0),this.data.control_manager.simple_input(this.open_buy_select.bind(this,"buy_select"),{reset_on_press:!0})):this.open_buy_select("buy_select")}close_menu(){this.data.cursor_manager.hide(),this.data.control_manager.reset(),this.is_artifacts_menu=null,this.item_list={},this.selected_item=null,this.selected_character=null,this.selected_char_index=0,this.old_item=null,this.buy_select_pos={page:0,index:0,is_last:!1,should_change:!1},this.active=!1;let t=[e.WindowNames.ITEM_DESC_WIN,e.WindowNames.ITEM_PRICE_WIN,e.WindowNames.YOUR_COINS_WIN,e.WindowNames.CHAR_DISPLAY,e.WindowNames.INV_WIN,e.WindowNames.YESNO_ACTION,e.WindowNames.QUANT_WIN,e.WindowNames.BUY_SELECT,e.WindowNames.EQ_COMPARE];this.close_windows(t,()=>{this.close_callback(),this.close_callback=null})}show_windows(t,e){let i=[],s=Object.keys(t).length;for(let e=0;e<s;e++){let s=t[e].arguments?t[e].arguments:[],n=this[t[e].name]instanceof a.Window;if(!(n?this[t[e].name].open:this[t[e].name].is_open)){let a,_=new Promise(t=>a=t);i.push(_),s.push(a),n?this[t[e].name].show.apply(this[t[e].name],s):this[t[e].name].open.apply(this[t[e].name],s)}}Promise.all(i).then(()=>{e()})}close_windows(t,e){let i=[];for(let e in t){if(this[t[e]]instanceof a.Window?this[t[e]].open:this[t[e]].is_open){let s,n=new Promise(t=>s=t);i.push(n),this[t[e]].close(s)}}Promise.all(i).then(()=>{e()})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SellRepairMenu=e.WindowNames=void 0;const s=i(2),n=i(15),a=6*Phaser.Timer.SECOND;e.WindowNames={ITEM_DESC_WIN:"item_desc_win",ITEM_PRICE_WIN:"item_price_win",YOUR_COINS_WIN:"your_coins_win",CHAR_DISPLAY:"char_display",INV_WIN:"inv_win",YESNO_ACTION:"yesno_action",QUANT_WIN:"quant_win"};e.SellRepairMenu=class{constructor(t,e,i){this.game=t,this.data=e,this.parent=i,this.close_callback=null,this.item_desc_win=this.parent.item_desc_win,this.your_coins_win=this.parent.your_coins_win,this.item_price_win=this.parent.item_price_win,this.char_display=this.parent.char_display,this.inv_win=this.parent.inv_win,this.quant_win=this.parent.quant_win,this.yesno_action=this.parent.yesno_action,this.npc_dialog=this.parent.npc_dialog,this.is_repair_menu=null,this.active=!1,this.selected_item=null,this.inv_win_pos={line:0,col:0},this.selected_character=null,this.selected_char_index=0}on_item_repair(){let t=()=>{this.inv_win.kill_item_at(this.inv_win_pos.line,this.inv_win_pos.col),this.data.control_manager.reset(),this.game.time.events.add(a,()=>{this.selected_item.broken=!1,this.data.info.party_data.coins-=this.data.info.items_list[this.selected_item.key_name].price*(1/4)|0,this.npc_dialog.update_dialog("repair_done",!0),this.parent.update_your_coins(),this.data.control_manager.simple_input(this.on_character_select.bind(this,"repair_follow_up",this.inv_win_pos))},this)};this.npc_dialog.dialog_manager.window.open?(this.npc_dialog.dialog_manager.dialog_crystal.visible=!1,this.npc_dialog.dialog_manager.window.close(t)):t()}on_repair_item_select(){let t=()=>{if(this.inv_win_pos=this.inv_win.cursor_pos,this.selected_item=this.inv_win.item_grid[this.inv_win_pos.line][this.inv_win_pos.col],this.selected_item.broken){let t=this.data.info.items_list[this.selected_item.key_name].price*(1/4)|0,e=this.npc_dialog.get_message("repair_deal");e=this.npc_dialog.replace_text(e,void 0,this.data.info.items_list[this.selected_item.key_name].name,String(t)),this.npc_dialog.update_dialog(e,!1,!1),this.yesno_action.open({yes:()=>{this.npc_dialog.update_dialog("repair_deal_accept",!0),this.data.control_manager.simple_input(this.on_item_repair.bind(this))},no:()=>{this.npc_dialog.update_dialog("repair_deal_decline",!0),this.data.control_manager.simple_input(this.on_character_select.bind(this,"repair_follow_up",this.inv_win_pos))}},{x:56,y:40})}else{let t="breaks_when_use"===this.data.info.items_list[this.selected_item.key_name].use_type?"cant_repair":"repair_decline",e=this.npc_dialog.get_message(t);e=this.npc_dialog.replace_text(e,void 0,this.data.info.items_list[this.selected_item.key_name].name),this.npc_dialog.update_dialog(e,!0,!1),this.data.control_manager.simple_input(this.on_character_select.bind(this,"repair_follow_up",this.inv_win_pos))}};this.item_desc_win.open?this.item_desc_win.close(t):t()}on_sale_success(t=1){let e=()=>{let e=this.data.info.items_list[this.selected_item.key_name].rare_item?"after_sell_artifact":"after_sell_normal";this.npc_dialog.update_dialog(e,!0);let i=this.data.info.items_list[this.selected_item.key_name].price*(this.selected_item.broken?.5:3/4)|0;this.data.info.party_data.coins+=i*t,this.parent.update_your_coins();for(let e=0;e<this.selected_character.items.length;e++){this.selected_character.items[e].key_name===this.selected_item.key_name&&(this.selected_character.items[e].quantity-=t,0===this.selected_character.items[e].quantity&&this.selected_character.items.splice(e,1))}if(this.data.info.items_list[this.selected_item.key_name].rare_item){let e=!1,i=this.data.info.shops_list[this.parent.shop_key].item_list;for(let s=0;s<i.length;s++)i[s].key_name===this.selected_item.key_name&&(e=!0,this.data.info.shops_list[this.parent.shop_key].item_list[s].quantity+=t);e||i.push({key_name:this.selected_item.key_name,quantity:t})}this.parent.set_item_lists(),this.data.control_manager.simple_input(this.on_character_select.bind(this,"sell_follow_up",this.inv_win_pos))};this.inv_win.is_open?(this.inv_win.refresh(this.selected_character.key_name,void 0),e()):this.inv_win.open(this.selected_character.key_name,void 0,!1,e)}on_sell_item_select(){let t=()=>{if(this.inv_win_pos=this.inv_win.cursor_pos,this.selected_item=this.inv_win.item_grid[this.inv_win_pos.line][this.inv_win_pos.col],this.data.info.items_list[this.selected_item.key_name].important_item)this.npc_dialog.update_dialog("cant_sell",!0),this.data.control_manager.simple_input(this.on_character_select.bind(this,"sell_follow_up",this.inv_win_pos));else if(1===this.selected_item.quantity){let t=this.data.info.items_list[this.selected_item.key_name].rare_item?"sell_artifact":"sell_normal",e=this.npc_dialog.get_message(t),i="sell_normal"===t?this.data.info.items_list[this.selected_item.key_name].name:void 0,s=this.data.info.items_list[this.selected_item.key_name].price*(this.selected_item.broken?.5:3/4)|0;e=this.npc_dialog.replace_text(e,void 0,i,String(s)),this.npc_dialog.update_dialog(e,!1,!1),this.yesno_action.open({yes:this.on_sale_success.bind(this,1),no:()=>{let t=this.data.info.items_list[this.selected_item.key_name].rare_item?"decline_sell_artifact":"decline_sell_normal";this.npc_dialog.update_dialog(t,!0),this.data.control_manager.simple_input(this.on_character_select.bind(this,"sell_follow_up",this.inv_win_pos))}},{x:56,y:40})}else{this.npc_dialog.update_dialog("sell_quantity_select");let t=this.selected_character.items.filter(t=>t.key_name===this.selected_item.key_name),e=0!==t.length?t[0]:null,i=()=>{this.quant_win.grant_control(this.on_character_select.bind(this,"sell_follow_up",this.selected_char_index,this.inv_win_pos),()=>{let t=1;t=this.quant_win.chosen_quantity,this.quant_win.close(),this.data.cursor_manager.hide();let e=this.npc_dialog.get_message("sell_quantity_confirm"),i=this.data.info.items_list[this.selected_item.key_name].price*(this.selected_item.broken?.5:3/4)|0;e=this.npc_dialog.replace_text(e,void 0,void 0,String(i*t)),this.npc_dialog.update_dialog(e,!1,!1),this.yesno_action.open({yes:this.on_sale_success.bind(this,t),no:()=>{let t=this.data.info.items_list[this.selected_item.key_name].rare_item?"decline_sell_artifact":"decline_sell_normal";this.npc_dialog.update_dialog(t,!0),this.data.control_manager.simple_input(this.on_character_select.bind(this,"sell_follow_up",this.inv_win_pos))}},{x:56,y:40})})};this.quant_win.is_open?i():this.quant_win.open(e,void 0,!1,i)}};this.item_desc_win.open?this.item_desc_win.close(t):t()}on_character_select(t="sell_follow_up",i={line:0,col:0}){let s=()=>{let s=[{name:e.WindowNames.ITEM_DESC_WIN},{name:e.WindowNames.ITEM_PRICE_WIN}];this.show_windows(s,()=>{t&&this.npc_dialog.update_dialog(t),this.selected_character=this.char_display.lines[this.char_display.current_line][this.char_display.selected_index],this.selected_char_index=this.char_display.selected_index;let e=()=>{this.inv_win.set_cursor(i.line,i.col),this.inv_win.item_grid[i.line][i.col]||this.inv_win.previous_col(),this.inv_win.grant_control(this.open_inventory_view.bind(this),this.is_repair_menu?this.on_repair_item_select.bind(this):this.on_sell_item_select.bind(this))};this.inv_win.is_open?(this.inv_win.refresh(this.selected_character.key_name,void 0),e()):this.inv_win.open(this.selected_character.key_name,void 0,!1,e)})};this.quant_win.is_open?this.quant_win.close(()=>{}):s()}open_inventory_view(t="sell_follow_up"){let i=[e.WindowNames.ITEM_DESC_WIN,e.WindowNames.ITEM_PRICE_WIN,e.WindowNames.QUANT_WIN];this.close_windows(i,()=>{this.npc_dialog.update_dialog(t);let e=()=>{this.game.world.bringToTop(this.char_display.char_group);let t=this.selected_character?this.selected_character.key_name:this.data.info.party_data.members[0].key_name,e=()=>{this.your_coins_win.open||this.your_coins_win.show(),this.parent.update_your_coins(),this.char_display.grant_control(this.close_menu.bind(this),this.on_character_select.bind(this))};this.inv_win.is_open?(this.inv_win.refresh(t),e()):this.inv_win.open(t,void 0,!1,e)};this.char_display.is_open?(this.char_display.select_char(this.selected_char_index),e()):this.char_display.open(this.selected_char_index,n.CharsMenuModes.SHOP,e)})}open_menu(t,e){this.is_repair_menu=t,this.close_callback=e,this.active=!0,t?(this.npc_dialog.update_dialog("repair_menu",!0),this.data.control_manager.simple_input(this.open_inventory_view.bind(this,"repair_select"))):this.open_inventory_view("sell_select")}close_menu(){this.data.cursor_manager.hide(),this.data.control_manager.reset(),this.is_repair_menu=null,this.selected_item=null,this.inv_win_pos={line:0,col:0},this.selected_character=null,this.selected_char_index=0,this.active=!1;let t=[e.WindowNames.ITEM_DESC_WIN,e.WindowNames.ITEM_PRICE_WIN,e.WindowNames.YOUR_COINS_WIN,e.WindowNames.CHAR_DISPLAY,e.WindowNames.INV_WIN,e.WindowNames.YESNO_ACTION,e.WindowNames.QUANT_WIN];this.close_windows(t,()=>{this.close_callback(),this.close_callback=null})}show_windows(t,e){let i=[],n=Object.keys(t).length;for(let e=0;e<n;e++){let n=t[e].arguments?t[e].arguments:[],a=this[t[e].name]instanceof s.Window;if(!(a?this[t[e].name].open:this[t[e].name].is_open)){let s,_=new Promise(t=>s=t);i.push(_),n.push(s),a?this[t[e].name].show.apply(this[t[e].name],n):this[t[e].name].open.apply(this[t[e].name],n)}}Promise.all(i).then(()=>{e()})}close_windows(t,e){let i=[];for(let e in t){if(this[t[e]]instanceof s.Window?this[t[e]].open:this[t[e]].is_open){let s,n=new Promise(t=>s=t);i.push(n),this[t[e]].close(s)}}Promise.all(i).then(()=>{e()})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.InventoryWindow=void 0;const s=i(2),n=i(0),a=i(4);e.InventoryWindow=class{constructor(t,e,i){this.game=t,this.data=e,this.on_change=i,this.expanded=!1,this.is_open=!1,this.window=new s.Window(this.game,128,96,108,60),this.text=this.window.set_text_in_position("",8,8),this.text.text.alpha=0,this.text.shadow.alpha=0,this.char=null,this.item_grid=[],this.selected_item=null,this.cursor_pos={line:0,col:0},this.sprite_group=this.window.define_internal_group("sprites",{x:16,y:8}),this.icon_group=this.window.define_internal_group("icons",{x:23,y:16})}check_expand(t){if(t&&this.set_text(),this.expanded===t)return;let e=t?1:-1;this.window.update_size({height:this.window.height+8*e}),this.window.update_position({y:this.window.y-8*e}),this.sprite_group.y=this.sprite_group.y+8*e,this.icon_group.y=this.icon_group.y+8*e,this.window.update(),this.expanded=t}set_text(){let t=null,e=!1,i=!1;for(let s=0;s<3;s++){for(let n=0;n<5;n++){if(!this.item_grid[s][n]){i=!0;break}if(this.item_grid[s][n].key_name===this.selected_item){t=this.item_grid[s][n],e=!0;break}}if(e||i)break}e?this.window.update_text("You have "+t.quantity,this.text):this.window.update_text("None in stock",this.text),this.text.text.alpha=1,this.text.shadow.alpha=1}change_character(t){this.char=this.data.info.party_data.members.filter(e=>e.key_name===t)[0],this.make_item_grid(),n.kill_all_sprites(this.sprite_group),n.kill_all_sprites(this.icon_group),this.expanded&&this.set_text(),this.set_sprites()}make_item_grid(){this.item_grid=[];let t=this.char.items.filter(t=>t.key_name in this.data.info.items_list),e=[];for(let i=0;i<1+(t.length/5|0);i++){let s=[];for(let e=0;e<5;e++)t[5*i+e]&&s.push(t[5*i+e]);e.push(s)}this.item_grid=e}kill_item_at(t,e){let i=this.sprite_group.children.filter(i=>!0===i.alive&&"items_icons"===i.key&&i.x===16*e&&i.y===16*t),s=this.sprite_group.children.filter(i=>!0===i.alive&&"item_border"===i.key&&i.x===16*e&&i.y===16*t);if(i[0].kill(),s[0].kill(),this.item_grid[t][e].broken){this.sprite_group.children.filter(i=>!0===i.alive&&"broken"===i.key&&i.x===16*e&&i.y===16*t)[0].kill()}if(this.item_grid[t][e].equipped){this.icon_group.children.filter(i=>!0===i.alive&&"equipped"===i.key&&i.x===16*e&&i.y===16*t)[0].kill()}}grant_control(t,e){let i=[{key:this.data.gamepad.LEFT,on_down:this.previous_col.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.next_col.bind(this)},{key:this.data.gamepad.UP,on_down:this.previous_line.bind(this)},{key:this.data.gamepad.DOWN,on_down:this.next_line.bind(this)},{key:this.data.gamepad.A,on_down:e},{key:this.data.gamepad.B,on_down:t}];this.data.control_manager.set_control(i,{loop_configs:{vertical:!0,horizontal:!0}})}next_col(){1===this.item_grid.length&&1===this.item_grid[this.cursor_pos.line].length||(this.cursor_pos.col<this.item_grid[this.cursor_pos.line].length-1?this.set_cursor(this.cursor_pos.line,this.cursor_pos.col+1):this.cursor_pos.line===this.item_grid.length-1?this.set_cursor(0,0):this.set_cursor(this.cursor_pos.line+1,0))}previous_col(){1===this.item_grid.length&&1===this.item_grid[this.cursor_pos.line].length||(this.cursor_pos.col>0?this.set_cursor(this.cursor_pos.line,this.cursor_pos.col-1):0===this.cursor_pos.line?this.set_cursor(this.item_grid.length-1,this.item_grid[this.item_grid.length-1].length-1):this.set_cursor(this.cursor_pos.line-1,4))}next_line(){1!==this.item_grid.length&&(this.cursor_pos.line===this.item_grid.length-1?this.set_cursor(0,this.cursor_pos.col):this.cursor_pos.col>this.item_grid[this.cursor_pos.line+1].length-1?this.set_cursor(this.cursor_pos.line+1,this.item_grid[this.cursor_pos.line+1].length-1):this.set_cursor(this.cursor_pos.line+1,this.cursor_pos.col))}previous_line(){1!==this.item_grid.length&&(0===this.cursor_pos.line?this.cursor_pos.col>this.item_grid[this.item_grid.length-1].length-1?this.set_cursor(this.item_grid.length-1,this.item_grid[this.item_grid.length-1].length-1):this.set_cursor(this.item_grid.length-1,this.cursor_pos.col):this.set_cursor(this.cursor_pos.line-1,this.cursor_pos.col))}set_cursor(t,e){this.cursor_pos={line:t,col:e};let i=136+16*e,s=112+16*t;this.data.cursor_manager.move_to({x:i,y:s},{tween_config:{type:a.CursorManager.CursorTweens.POINT,variant:a.PointVariants.LONG}},()=>{this.on_change(t,e)})}set_sprites(){let t=!1;for(let e=0;e<3;e++){for(let i=0;i<5;i++){if(!this.item_grid[e][i]){t=!0;break}let s=this.data.info.items_list[this.item_grid[e][i].key_name],n=this.sprite_group.children.filter(t=>!1===t.alive&&"items_icons"===t.key),a=this.sprite_group.children.filter(t=>!1===t.alive&&"item_border"===t.key);if(n.length>0&&a.length>0?(a[0].reset(16*i,16*e),n[0].reset(16*i,16*e),n[0].frameName=s.key_name):(this.window.create_at_group(16*i,16*e,"item_border",void 0,void 0,"sprites"),this.window.create_at_group(16*i,16*e,"items_icons",void 0,s.key_name,"sprites")),this.item_grid[e][i].broken){let t=this.sprite_group.children.filter(t=>!1===t.alive&&"broken"===t.key);t.length>0?t[0].reset(16*i,16*e):this.window.create_at_group(16*i,16*e,"broken",void 0,void 0,"sprites")}if(this.item_grid[e][i].equipped){let t=this.icon_group.children.filter(t=>!1===t.alive&&"equipped"===t.key);t.length>0?t[0].reset(16*i,16*e):this.window.create_at_group(16*i,16*e,"equipped",void 0,void 0,"icons")}if(this.item_grid[e][i].quantity>1){let t=this.icon_group.children.filter(t=>!1===t.alive&&void 0!==t.text);if(t.length>0)t[0].text=this.item_grid[e][i].quantity.toString(),t[0].reset(16*i,16*e),t[0].x+=8-t[0].width;else{let t=this.game.add.bitmapText(16*i,16*e,"gs-item-bmp-font",this.item_grid[e][i].quantity.toString());t.x+=8-t.width,this.window.add_to_internal_group("icons",t)}}}if(t)break}this.sprite_group.alpha=1}refresh(t,e){this.char=this.data.info.party_data.members.filter(e=>e.key_name===t)[0],this.selected_item=e,n.kill_all_sprites(this.sprite_group),n.kill_all_sprites(this.icon_group),this.make_item_grid(),this.set_sprites()}open(t,e,i=!1,s){this.char=this.data.info.party_data.members.filter(e=>e.key_name===t)[0],this.selected_item=e,this.make_item_grid(),this.check_expand(i),this.set_sprites(),this.is_open=!0,this.window.show(s,!1)}close(t,e=!1){n.kill_all_sprites(this.sprite_group,e),n.kill_all_sprites(this.icon_group,e),this.text.text.alpha=0,this.text.shadow.alpha=0,this.char=null,this.selected_item=null,this.cursor_pos={line:0,col:0},this.item_grid=[],this.check_expand(!1),this.is_open=!1,this.window.close(t,!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BuySelectMenu=void 0;const s=i(2),n=i(0),a=i(4),_=Phaser.Timer.QUARTER,o=Phaser.Timer.QUARTER>>1;e.BuySelectMenu=class{constructor(t,e,i){this.game=t,this.data=e,this.on_change=i,this.window=new s.Window(this.game,0,96,236,28),this.items={},this.selected_index=0,this.current_page=0,this.pages=[],this.tweens={item:null,bg:null},this.is_open=!1,this.sprite_group=this.game.add.group(),this.sprite_group.x=16,this.sprite_group.y=112,this.tag_group=this.game.add.group(),this.tag_group.x=24,this.tag_group.y=104,this.text_group=this.game.add.group(),this.text_group.x=39,this.text_group.y=131,this.bg_group=this.game.add.group(),this.bg_group.x=36,this.bg_group.y=132,this.arrow_group=this.game.add.group(),this.arrow_group.x=224,this.arrow_group.y=80,this.up_arrow=this.arrow_group.create(16,20,"green_arrow"),this.up_arrow.rotation=Math.PI,this.down_arrow=this.arrow_group.create(0,52,"green_arrow"),this.up_arrow.alpha=0,this.down_arrow.alpha=0,this.arrow_tweens=[]}update_group_pos(){this.sprite_group.x=16+this.game.camera.x,this.sprite_group.y=112+this.game.camera.y,this.tag_group.x=24+this.game.camera.x,this.tag_group.y=104+this.game.camera.y,this.text_group.x=39+this.game.camera.x,this.text_group.y=131+this.game.camera.y,this.bg_group.x=36+this.game.camera.x,this.bg_group.y=132+this.game.camera.y,this.arrow_group.x=224+this.game.camera.x,this.arrow_group.y=80+this.game.camera.y}set_arrows(t=!1,e=!1){this.up_arrow.x=16,this.up_arrow.y=20,this.down_arrow.x=0,this.down_arrow.y=52,this.up_arrow.alpha=t?1:0,this.down_arrow.alpha=e?1:0}check_arrows(){let t=!1,e=!1;this.current_page<this.pages.length-1&&(e=!0),this.current_page>0&&(t=!0),this.set_arrows(t,e),this.init_arrow_tweens(),this.game.world.bringToTop(this.arrow_group)}init_arrow_tweens(){let t=this.game.add.tween(this.up_arrow).to({y:12},o,Phaser.Easing.Linear.None).to({y:20},o,Phaser.Easing.Linear.None).loop();this.arrow_tweens.push(t);let e=this.game.add.tween(this.down_arrow).to({y:60},o,Phaser.Easing.Linear.None).to({y:52},o,Phaser.Easing.Linear.None).loop();this.arrow_tweens.push(e),t.start(),e.start()}clear_arrow_tweens(){for(let t=0;t<this.arrow_tweens.length;t++)this.game.tweens.remove(this.arrow_tweens.pop())}set_text(t,e){let i=this.text_group.children.filter(t=>!1===t.alive&&0!==t.tint),s=this.text_group.children.filter(t=>!1===t.alive&&0===t.tint),n=null,a=null;i.length>0&&s.length>0?(i[0].text=t,i[0].reset(32*e,0),s[0].text=t,s[0].reset(32*e,0),n=i[0],a=s[0]):(a=this.game.add.bitmapText(32*e,0,"gs-shop-bmp-font",t),n=this.game.add.bitmapText(32*e,0,"gs-shop-bmp-font",t),a.rotation=Math.PI/2,n.rotation=Math.PI/2,a.tint=0,this.text_group.add(a),this.text_group.add(n)),a.y-=n.width-1,n.y-=n.width,a.x-=1;let _=this.bg_group.children.filter(t=>!1===t.alive);if(_.length>0)_[0].clear(),_[0].beginFill(16741120,1),_[0].drawRect(0,0,-(n.height+1),-(n.width+1)),_[0].endFill(),_[0].reset(32*e,0);else{let t=this.game.add.graphics(32*e,0);t.beginFill(16741120,1),t.drawRect(0,0,-(n.height+1),-(n.width+1)),t.endFill(),this.bg_group.add(t)}this.game.world.bringToTop(this.text_group)}make_pages(){let t=Object.keys(this.items).length,e=Array.from(Object.keys(this.items)),i=t%7==0?t/7|0:1+(t/7|0);for(let t=0;t<i;t++){let i=[];for(let s=7*t;s<7*(t+1)&&e[s];s++)i.push(this.items[e[s]]);this.pages[t]=i}}set_sprites(t){for(let e=0;e<this.pages[t].length;e++){let i=this.sprite_group.children.filter(t=>!1===t.alive&&"items_icons"===t.key),s=this.sprite_group.children.filter(t=>!1===t.alive&&"item_border"===t.key);i.length>0&&s.length>0?(s[0].reset(32*e,0),s[0].scale.x=1,s[0].scale.y=1,i[0].frameName=this.pages[t][e].key_name,i[0].scale.x=1,i[0].scale.y=1,i[0].reset(32*e,0)):(this.sprite_group.create(32*e,0,"item_border").anchor.setTo(.5,.5),this.sprite_group.create(32*e,0,"items_icons",this.pages[t][e].key_name).anchor.setTo(.5,.5));let n=this.tag_group.children.filter(t=>!1===t.alive);n.length>0?n[0].reset(32*e,0):this.tag_group.create(32*e,0,"price_tag");let a=this.data.info.items_list[this.pages[t][e].key_name].price;this.set_text(a.toString(),e)}this.set_item(this.selected_index%7)}change_page(t,e){if(1===this.pages.length)return;this.clear_arrow_tweens(),Object.keys(this.items).length<7*t||(this.current_page=t,void 0!==e?this.selected_index=e:null!==this.selected_index&&this.selected_index>=this.pages[this.current_page].length&&(this.selected_index=this.pages[this.current_page].length-1),n.kill_all_sprites(this.sprite_group),n.kill_all_sprites(this.tag_group),n.kill_all_sprites(this.text_group),n.kill_all_sprites(this.bg_group),this.unset_item(this.selected_index),this.set_sprites(t),this.check_arrows(),this.change_item(this.selected_index))}grant_control(t,e){let i=[{key:this.data.gamepad.LEFT,on_down:this.previous_item.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.next_item.bind(this)},{key:this.data.gamepad.UP,on_down:this.previous_page.bind(this)},{key:this.data.gamepad.DOWN,on_down:this.next_page.bind(this)},{key:this.data.gamepad.A,on_down:e,params:{reset_control:!0}},{key:this.data.gamepad.B,on_down:t,params:{reset_control:!0}}];this.data.control_manager.set_control(i,{loop_configs:{horizontal:!0}})}next_page(t){if(1===this.pages.length||this.current_page+1===this.pages.length)return;let e=this.current_page+1;this.change_page(e,t)}previous_page(t){if(1===this.pages.length||this.current_page-1<0)return;let e=this.current_page-1;this.change_page(e,t)}change_item(t){this.unset_item(this.selected_index),this.selected_index=t,this.set_item(this.selected_index),this.set_cursor(this.selected_index),this.on_change(this.pages[this.current_page][this.selected_index].key_name)}next_item(){1===this.pages[this.current_page].length&&1===this.pages.length||(this.selected_index+1===this.pages[this.current_page].length?this.current_page+1===this.pages.length?1===this.pages.length?this.change_item(0):this.change_page(0,0):this.next_page(0):this.change_item(this.selected_index+1))}previous_item(){1===this.pages[this.current_page].length&&1===this.pages.length||(this.selected_index-1<0?this.current_page-1<0?1===this.pages.length?this.change_item(this.pages[this.current_page].length-1):this.change_page(this.pages.length-1,this.pages[this.pages.length-1].length-1):this.previous_page(this.pages[this.current_page-1].length-1):this.change_item(this.selected_index-1))}set_item(t){this.game.world.bringToTop(this.sprite_group),this.data.cursor_manager.bring_to_top();let e=this.sprite_group.children.filter(t=>!0===t.alive&&"items_icons"===t.key),i=this.sprite_group.children.filter(t=>!0===t.alive&&"item_border"===t.key),s=[this.tweens.item,this.tweens.bg],n=[e,i];for(let e=0;e<2;e++)s[e]=this.game.add.tween(n[e][t].scale).to({x:1.55,y:1.55},_,Phaser.Easing.Linear.None,!0,0,-1,!0);this.tweens={item:s[0],bg:s[1]}}is_last(t,e){return t===this.pages.length-1&&e===this.pages[t].length-1}unset_item(t){let e=this.sprite_group.children.filter(t=>!0===t.alive&&"items_icons"===t.key),i=this.sprite_group.children.filter(t=>!0===t.alive&&"item_border"===t.key),s=[this.tweens.item,this.tweens.bg],n=[e,i];for(let e=0;e<2;e++)n[e][t]&&n[e][t].scale.setTo(1,1),s[e]&&(this.game.tweens.remove(s[e]),s[e]=null)}set_cursor(t,e){let i=0+32*t;this.data.cursor_manager.move_to({x:i,y:112},{animate:!1,tween_config:{type:a.CursorManager.CursorTweens.POINT,variant:a.PointVariants.LONG}},e)}open(t,e=0,i=0,s){this.items=t,this.current_page=i,this.selected_index=e,this.is_open=!0,this.make_pages(),this.check_arrows(),this.set_sprites(this.current_page),this.set_cursor(this.selected_index),this.update_group_pos(),this.window.show(s,!1)}close(t,e=!1){this.unset_item(this.selected_index),n.kill_all_sprites(this.sprite_group,e),n.kill_all_sprites(this.tag_group,e),n.kill_all_sprites(this.text_group,e),n.kill_all_sprites(this.bg_group,e),this.items={},this.pages=[],this.selected_index=0,this.current_page=0,this.is_open=!1,this.set_arrows(!1,!1),this.window.close(t,!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.EquipCompare=void 0;const s=i(2),n=i(0),a=i(8),_=i(9),o=i(5),r=i(3);e.EquipCompare=class{constructor(t,e){this.game=t,this.data=e,this.selected_item=null,this.selected_char=null,this.is_open=!1,this.window=new s.Window(this.game,128,88,108,68),this.text_group=this.window.define_internal_group("texts",{x:8,y:8}),this.arrow_group=this.window.define_internal_group("arrows",{x:65,y:7}),this.cant_equip_text=this.window.set_text_in_position("Can't equip",14,32,!1,!1,this.window.font_color,!1,void 0,!0),this.cant_equip_text.text.alpha=0,this.cant_equip_text.shadow.alpha=0,this.atk_label_text=this.init_text_sprite("ATK",0,0,!1),this.def_label_text=this.init_text_sprite("DEF",0,16,!1),this.agi_label_text=this.init_text_sprite("AGL",0,32,!1),this.item_name_text=this.init_text_sprite("",0,48,!1),this.curr_atk_text=this.init_text_sprite("",53,0,!0),this.curr_def_text=this.init_text_sprite("",53,16,!0),this.curr_agi_text=this.init_text_sprite("",53,32,!0),this.new_atk_text=this.init_text_sprite("",93,0,!0),this.new_def_text=this.init_text_sprite("",93,16,!0),this.new_agi_text=this.init_text_sprite("",93,32,!0),this.text_group.alpha=0,this.arrow_group.alpha=0}init_text_sprite(t,e,i,s){let n=this.window.set_text_in_position(t,e,i,s);return this.window.add_to_internal_group("texts",n.shadow),this.window.add_to_internal_group("texts",n.text),n}make_arrow(t,e){if(0===t)return;let i=16*e+(t>0?-1:0),s=t>0?"up_arrow":"down_arrow",n=this.arrow_group.children.filter(t=>!1===t.alive&&t.key===s);n.length>0?n[0].reset(0,i):this.window.create_at_group(0,i,s,void 0,void 0,"arrows")}compare_items(t,e,i,s){let n={};t&&(n=r.mapKeys(this.data.info.items_list[t].effects,t=>t.type));let a=r.mapKeys(this.data.info.items_list[e].effects,t=>t.type),o=0,h=0;if(n[i])switch(n[i].operator){case _.effect_operators.PLUS:o=n[i].quantity;break;case _.effect_operators.MINUS:o=-1*n[i].quantity;break;case _.effect_operators.TIMES:o=n[i].quantity*s;break;case _.effect_operators.DIVIDE:o=n[i].quantity/s|0}if(a[i])switch(a[i].operator){case _.effect_operators.PLUS:h=a[i].quantity;break;case _.effect_operators.MINUS:h=-1*a[i].quantity;break;case _.effect_operators.TIMES:h=a[i].quantity*s;break;case _.effect_operators.DIVIDE:h=-s/a[i].quantity|0}return h-o}display_stat(t,e,i){let s=null,n=null,a=0;switch(t){case _.effect_types.ATTACK:s=this.new_atk_text,n=this.curr_atk_text,a=0;break;case _.effect_types.DEFENSE:s=this.new_def_text,n=this.curr_def_text,a=1;break;case _.effect_types.AGILITY:s=this.new_agi_text,n=this.curr_agi_text,a=2}s.text.alpha=0===i?0:1,s.shadow.alpha=0===i?0:1,this.window.update_text(String(e),n),0!==i&&(this.window.update_text(String(e+i),s),this.make_arrow(i,a))}change_character(t){this.selected_char=this.data.info.party_data.members.filter(e=>e.key_name===t)[0],n.kill_all_sprites(this.arrow_group),this.show_stat_compare()}show_stat_compare(){if(!this.data.info.items_list[this.selected_item].equipable_chars.includes(this.selected_char.key_name))return void this.show_cant_equip();this.cant_equip_text.text.alpha=0,this.cant_equip_text.shadow.alpha=0;let t=this.data.info.items_list[this.selected_item].type,e=null,i=this.selected_char.equip_slots,s=["WEAPONS","ARMOR","CHEST_PROTECTOR","HEAD_PROTECTOR","RING","LEG_PROTECTOR","UNDERWEAR"],n=["weapon","body","chest","head","ring","boots","underwear"];for(let _=0;_<s.length;_++)t===a.item_types[s[_]]&&i[n[_]]&&(e=this.data.info.items_list[i[n[_]].key_name].key_name);let r={[o.main_stats.ATTACK]:0,[o.main_stats.DEFENSE]:0,[o.main_stats.AGILITY]:0},h=[_.effect_types.ATTACK,_.effect_types.DEFENSE,_.effect_types.AGILITY];for(let t=0;t<h.length;t++)r[o.effect_type_stat[h[t]]]=this.compare_items(e,this.selected_item,h[t],this.selected_char[o.effect_type_stat[h[t]]]),this.display_stat(h[t],this.selected_char[o.effect_type_stat[h[t]]],r[o.effect_type_stat[h[t]]]);let c=this.data.info.items_list[e]?this.data.info.items_list[e].name:"";this.window.update_text(c,this.item_name_text);for(let t=0;t<3;t++)this.window.draw_separator(4,19+16*t,108,19+16*t,!1);this.text_group.alpha=1,this.arrow_group.alpha=1}show_cant_equip(){this.text_group.alpha=0,this.arrow_group.alpha=0,this.window.clear_separators(),this.cant_equip_text.text.alpha=1,this.cant_equip_text.shadow.alpha=1}open(t,e,i){this.selected_char=this.data.info.party_data.members.filter(e=>e.key_name===t)[0],this.selected_item=e,this.show_stat_compare(),this.is_open=!0,this.window.show(i,!1)}close(t,e=!1){n.kill_all_sprites(this.arrow_group,e),e&&n.kill_all_sprites(this.text_group,e),this.selected_item=null,this.selected_char=null,this.is_open=!1,this.window.close(t,!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.YesNoMenu=void 0;const s=i(18),n=i(0);e.YesNoMenu=class{constructor(t,e){this.game=t,this.data=e,this.yes_callback=null,this.no_callback=null,this.buttons_keys=["yes","no"],this.is_open=!1,this.menu=new s.HorizontalMenu(this.game,this.data,this.buttons_keys,this.buttons_keys.map(t=>n.capitalize(t)),{on_press:this.button_press.bind(this),on_cancel:this.close.bind(this)}),this.menu.title_window.update_size({width:36})}update_position(t,e){if(void 0!==t){let e=this.menu.title_window.x-this.menu.x;this.menu.x=t,this.menu.title_window.x=t+e}void 0!==e&&(this.menu.y=e,this.menu.title_window.y=e),this.menu.update_position(),this.menu.title_window.send_to_front()}button_press(){switch(this.buttons_keys[this.menu.selected_button_index]){case"yes":this.close(this.yes_callback);break;case"no":this.close(this.no_callback)}}is_active(){return this.menu.menu_active}open(t,e,i){this.yes_callback=t.yes,this.no_callback=t.no,this.data.hero.in_action()&&(this.data.hero.stop_char(),this.data.hero.update_shadow()),this.is_open=!0,this.menu.open(i,0,!0),e&&this.update_position(e.x,e.y)}close(t){void 0===t&&(t=this.no_callback),this.is_active()&&(this.menu.close(t),this.is_open=!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ShopItemQuantityWindow=void 0;const s=i(33),n=i(2),a=i(4);e.ShopItemQuantityWindow=class{constructor(t,e){this.game=t,this.data=e,this.window=new n.Window(this.game,56,32,180,20),this.item_counter=new s.ItemCounter(this.game,this.window.group,8,8,this.on_change.bind(this)),this.chosen_quantity=1,this.base_price=0,this.is_open=!1,this.quantity_text=this.window.set_text_in_position(String(this.chosen_quantity),93,8,!0),this.coins_val_text=this.window.set_text_in_position("",141,8,!0),this.coins_label_text=this.window.set_text_in_position("Coins",144,8)}on_change(t){this.chosen_quantity=t,this.window.update_text(String(this.chosen_quantity),this.quantity_text),this.window.update_text(String(this.base_price*this.chosen_quantity),this.coins_val_text)}grant_control(t,e){let i=[{key:this.data.gamepad.LEFT,on_down:this.decrease_amount.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.increase_amount.bind(this)},{key:this.data.gamepad.A,on_down:e},{key:this.data.gamepad.B,on_down:t}];this.data.control_manager.set_control(i,{loop_configs:{horizontal:!0,horizontal_time:100}})}increase_amount(){this.item_counter.advance_step(1)}decrease_amount(){this.item_counter.advance_step(-1)}open(t,e,i=!1,s){this.data.cursor_manager.move_to({x:132,y:46},{tween_config:{type:a.CursorManager.CursorTweens.WIGGLE}},()=>{this.base_price=this.data.info.items_list[t.key_name].price,this.window.update_text(String(this.base_price),this.coins_val_text);let n=e?e.quantity:0,a=-1===t.quantity?30:t.quantity;a+n>30&&(a=30-n),i&&this.base_price*a>this.data.info.party_data.coins&&(a=this.data.info.party_data.coins/this.base_price|0),this.item_counter.config(a,this.chosen_quantity,n),this.is_open=!0,this.window.show(s,!1)})}close(t){this.item_counter.deactivate(),this.item_counter.clear(),this.data.cursor_manager.clear_tweens(),this.chosen_quantity=1,this.base_price=0,this.is_open=!1,this.window.close(t,!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ControlManager=void 0;const s=i(3),n=Phaser.Timer.QUARTER>>1;e.ControlManager=class{constructor(t,e){this.game=t,this.gamepad=e,this.disabled=!1,this.busy=!1,this.keys_list=this.gamepad.keys;let i=[];for(let t=0;t<this.keys_list.length;t++)i.push({key:this.keys_list[t],on_down:null,on_up:null,pressed:!1,loop:!1,loop_time:n,reset:!1});this.keys=s.mapKeys(i,t=>t.key),this.signal_bindings=[],this.signal_bindings_key=null,this.control_queue=[],this.global_bindings={},this.loop_start_timer=this.game.time.create(!1),this.loop_repeat_timer=this.game.time.create(!1)}get initialized(){return 0!==this.signal_bindings.length}get has_next(){return 0!==this.control_queue.length}simple_input(t,e){let i=[{key:this.gamepad.A,on_down:t,reset_control:e?e.reset_on_press:void 0}];return e?(e.confirm_only||i.push({key:this.gamepad.B,on_down:t,reset_control:e?e.reset_on_press:void 0}),this.set_control(i,{persist:e.persist,no_reset:e.no_initial_reset})):(i.push({key:this.gamepad.B,on_down:t,reset_control:e?e.reset_on_press:void 0}),this.set_control(i))}set_control(t,e){if(this.busy){console.log("ControlManager is busy. Request queued.");let i=this.make_global_key(),s=e;return s.global_key=i,this.control_queue.push({controls:t,configs:s}),i}{let i=!!e&&(!!e.no_reset&&e.no_reset);this.initialized&&!i&&this.reset(),this.busy=!0;for(let e=0;e<t.length;e++)t[e].on_down&&(this.keys[t[e].key].on_down=t[e].on_down),t[e].on_up&&(this.keys[t[e].key].on_up=t[e].on_up),t[e].params&&(this.keys[t[e].key].reset=!!t[e].params.reset_control&&t[e].params.reset_control);if(e){this.set_configs(e);let t=e.global_key?e.global_key:this.make_global_key();return this.enable_keys(t,e.persist)}{let t=this.make_global_key();return this.enable_keys(t)}}}set_configs(t){if(t.loop_configs){let e=t.loop_configs,i=[];e.vertical&&(i.push({key:this.gamepad.UP,loop_time:e.vertical_time}),i.push({key:this.gamepad.DOWN,loop_time:e.vertical_time})),e.horizontal&&(i.push({key:this.gamepad.LEFT,loop_time:e.horizontal_time}),i.push({key:this.gamepad.RIGHT,loop_time:e.horizontal_time})),e.shoulder&&(i.push({key:this.gamepad.L,loop_time:e.shoulder_time}),i.push({key:this.gamepad.R,loop_time:e.shoulder_time})),this.enable_loop(i)}}enable_loop(t){t.forEach(t=>{this.keys[t.key].loop=!0,t.loop_time&&(this.keys[t.key].loop_time=t.loop_time)})}enable_keys(t,e){let i=[];for(let t=0;t<this.keys_list.length;t++){let s=this.keys[this.keys_list[t]].on_down,n=this.keys[this.keys_list[t]].on_up;if(this.keys[this.keys_list[t]].on_up){let s=this.game.input.keyboard.addKey(this.keys[this.keys_list[t]].key).onUp.add(()=>{this.disabled||n()});e||this.signal_bindings.push(s),i.push(s)}if(this.keys[this.keys_list[t]].on_down){let n=this.keys[this.keys_list[t]].loop_time,a=this.keys[this.keys_list[t]].reset;if(this.keys[this.keys_list[t]].loop){let a=this.game.input.keyboard.addKey(this.keys[this.keys_list[t]].key).onDown.add(()=>{if(this.keys[this.gamepad.opposite_key(this.keys_list[t])].pressed){if(this.disabled)return;this.keys[this.gamepad.opposite_key(this.keys_list[t])].pressed=!1,this.stop_timers()}this.keys[this.keys_list[t]].pressed=!0,this.set_loop_timers(s,n)}),_=this.game.input.keyboard.addKey(this.keys[this.keys_list[t]].key).onUp.add(()=>{this.disabled||(this.keys[this.keys_list[t]].pressed=!1,this.stop_timers())});e||this.signal_bindings.push(a,_),i.push(a,_)}else{let n=this.game.input.keyboard.addKey(this.keys[this.keys_list[t]].key).onDown.add(()=>{this.disabled||(a&&this.reset(),s())});e||this.signal_bindings.push(n),i.push(n)}}}if(this.reset(!1),this.busy=!1,this.global_bindings[t]=i,e||(this.signal_bindings_key=t),!this.has_next)return t;{console.log("Executing next ControlManager request...");let t=this.control_queue.shift();this.set_control(t.controls,t.configs)}}set_loop_timers(t,e){t(),this.loop_start_timer.add(Phaser.Timer.QUARTER,()=>{this.loop_repeat_timer.loop(e,t),this.loop_repeat_timer.start()}),this.loop_start_timer.start()}stop_timers(){this.loop_start_timer.stop(),this.loop_repeat_timer.stop()}make_global_key(){let t=!1,e=0;do{if(!this.global_bindings[e]){t=!0;break}e++}while(!t);return this.global_bindings[e]=[new Phaser.SignalBinding(new Phaser.Signal,()=>{},!1)],e}detach_bindings(t){if(!this.global_bindings[t])return;this.global_bindings[t].forEach(t=>t.detach()),this.global_bindings[t]=null}reset(t=!0){this.loop_start_timer.stop(),this.loop_repeat_timer.stop();for(let t=0;t<this.keys_list.length;t++)this.keys[this.keys_list[t]].pressed=!1,this.keys[this.keys_list[t]].on_down=null,this.keys[this.keys_list[t]].on_up=null,this.keys[this.keys_list[t]].loop=!1,this.keys[this.keys_list[t]].loop_time=n,this.keys[this.keys_list[t]].reset=!1;t&&(this.signal_bindings.forEach(t=>{t.detach()}),this.signal_bindings_key&&this.detach_bindings(this.signal_bindings_key),this.signal_bindings_key=null,this.signal_bindings=[])}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Gamepad=void 0;const s=["LEFT","RIGHT","UP","DOWN","A","B","L","R","SELECT","START","PSY1","PSY2","PSY3","ZOOM1","ZOOM2","ZOOM3","MUTE","DEBUG_PHYSICS","DEBUG_GRID","DEBUG_KEYS","DEBUG_STATS","DEBUG_FPS","DEBUG_SLIDERS","DEBUG_CAM_PLUS","DEBUG_CAM_MINUS"];e.Gamepad=class{constructor(t){this.data=t,this.initialize_gamepad()}initialize_gamepad(){for(let t of s)this[t]=Phaser.Keyboard[this.data.dbs.init_db.default_inputs[t]]}opposite_key(t){switch(t){case this.LEFT:return this.RIGHT;case this.RIGHT:return this.LEFT;case this.UP:return this.DOWN;case this.DOWN:return this.UP;case this.A:return this.B;case this.B:return this.A;case this.L:return this.R;case this.R:return this.L;case this.SELECT:return this.START;case this.START:return this.SELECT;default:return null}}get keys(){return s.map(t=>this[t])}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Audio=void 0;e.Audio=class{constructor(t,e){this.se_data={},this.current_bgm=null,this.game=t,this.data=e}add_se(t){this.se_data[t]=this.game.add.audioSprite(t)}play_se(t,e,i,s=0,n=1){const a=this.se_data[t].play(e,n,s);i&&a.onStop.addOnce(i)}add_bgm(t,e=!1){!t||this.current_bgm&&this.current_bgm.key===t?!t&&this.current_bgm&&(this.current_bgm.stop(),this.current_bgm.destroy(),this.current_bgm=null):(this.current_bgm&&this.current_bgm.destroy(),this.current_bgm=this.game.add.audio(t),e&&this.play_bgm())}play_bgm(t=!0,e=.6){this.current_bgm.loop=t,this.current_bgm.volume=e,this.current_bgm.play()}stop_bgm(){this.current_bgm.stop()}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,